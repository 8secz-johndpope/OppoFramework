package com.android.server.pm;

import android.annotation.OppoHook;
import android.annotation.OppoHook.OppoHookType;
import android.annotation.OppoHook.OppoRomType;
import android.app.ActivityManager;
import android.app.ActivityManagerNative;
import android.app.IActivityManager;
import android.app.ResourcesManager;
import android.app.admin.IDevicePolicyManager;
import android.app.admin.SecurityLog;
import android.app.backup.IBackupManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentFilter.AuthorityEntry;
import android.content.IntentSender;
import android.content.IntentSender.SendIntentException;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.AppsQueryHelper;
import android.content.pm.EphemeralApplicationInfo;
import android.content.pm.EphemeralResolveInfo;
import android.content.pm.EphemeralResolveInfo.EphemeralDigest;
import android.content.pm.EphemeralResolveInfo.EphemeralResolveIntentInfo;
import android.content.pm.FeatureInfo;
import android.content.pm.IOnPermissionsChangeListener;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageDeleteObserver;
import android.content.pm.IPackageDeleteObserver2;
import android.content.pm.IPackageInstallObserver2;
import android.content.pm.IPackageInstaller;
import android.content.pm.IPackageManager.Stub;
import android.content.pm.IPackageMoveObserver;
import android.content.pm.IPackageStatsObserver;
import android.content.pm.InstrumentationInfo;
import android.content.pm.IntentFilterVerificationInfo;
import android.content.pm.KeySet;
import android.content.pm.LauncherActivityInfo;
import android.content.pm.LauncherApps;
import android.content.pm.PackageCleanItem;
import android.content.pm.PackageInfo;
import android.content.pm.PackageInfoLite;
import android.content.pm.PackageInstaller.SessionParams;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.LegacyPackageDeleteObserver;
import android.content.pm.PackageManagerInternal;
import android.content.pm.PackageManagerInternal.PackagesProvider;
import android.content.pm.PackageManagerInternal.SyncAdapterPackagesProvider;
import android.content.pm.PackageParser;
import android.content.pm.PackageParser.Activity;
import android.content.pm.PackageParser.ActivityIntentInfo;
import android.content.pm.PackageParser.Instrumentation;
import android.content.pm.PackageParser.NewPermissionInfo;
import android.content.pm.PackageParser.Package;
import android.content.pm.PackageParser.PackageLite;
import android.content.pm.PackageParser.PackageParserException;
import android.content.pm.PackageParser.Permission;
import android.content.pm.PackageParser.PermissionGroup;
import android.content.pm.PackageParser.Provider;
import android.content.pm.PackageParser.ProviderIntentInfo;
import android.content.pm.PackageParser.Service;
import android.content.pm.PackageParser.ServiceIntentInfo;
import android.content.pm.PackageStats;
import android.content.pm.PackageUserState;
import android.content.pm.ParceledListSlice;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.content.pm.PermissionRecords;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.pm.Signature;
import android.content.pm.UserInfo;
import android.content.pm.VerifierDeviceIdentity;
import android.content.pm.VerifierInfo;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.hardware.display.DisplayManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.os.Environment.UserEnvironment;
import android.os.FileObserver;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.OppoManager;
import android.os.OppoUsageManager;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.Process;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.SELinux;
import android.os.ServiceManager;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.UserManagerInternal;
import android.os.storage.IMountService;
import android.os.storage.MountServiceInternal;
import android.os.storage.MountServiceInternal.ExternalStorageMountPolicy;
import android.os.storage.StorageEventListener;
import android.os.storage.StorageManager;
import android.os.storage.VolumeInfo;
import android.provider.Settings.Global;
import android.provider.Settings.Secure;
import android.security.KeyStore;
import android.security.SystemKeyStore;
import android.system.ErrnoException;
import android.system.Os;
import android.system.OsConstants;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.DisplayMetrics;
import android.util.EventLog;
import android.util.ExceptionUtils;
import android.util.Log;
import android.util.LogPrinter;
import android.util.MathUtils;
import android.util.Pair;
import android.util.PrintStreamPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.util.Xml;
import android.util.jar.StrictJarFile;
import android.widget.Toast;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.app.IMediaContainerService;
import com.android.internal.app.IntentForwarderActivity;
import com.android.internal.app.ResolverActivity;
import com.android.internal.content.NativeLibraryHelper;
import com.android.internal.content.NativeLibraryHelper.Handle;
import com.android.internal.content.PackageHelper;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.os.IParcelFileDescriptorFactory;
import com.android.internal.os.InstallerConnection.InstallerException;
import com.android.internal.os.SomeArgs;
import com.android.internal.telephony.CarrierAppUtils;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.IndentingPrintWriter;
import com.android.internal.util.Preconditions;
import com.android.internal.util.XmlUtils;
import com.android.server.AttributeCache;
import com.android.server.EventLogTags;
import com.android.server.FgThread;
import com.android.server.IntentResolver;
import com.android.server.LocalServices;
import com.android.server.LocationManagerService;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemConfig.PermissionEntry;
import com.android.server.Watchdog;
import com.android.server.am.ActivityManagerService;
import com.android.server.am.AppErrorDialog.Data;
import com.android.server.am.MtkAppErrorDialog;
import com.android.server.am.OppoCrashClearManager;
import com.android.server.am.OppoMultiAppManager;
import com.android.server.am.OppoMultiAppManagerUtil;
import com.android.server.am.OppoPermissionConstants;
import com.android.server.am.OppoProcessManager;
import com.android.server.coloros.OppoListManager;
import com.android.server.display.OppoBrightUtils;
import com.android.server.net.NetworkPolicyManagerInternal;
import com.android.server.oppo.IElsaManager;
import com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer;
import com.android.server.pm.PermissionsState.PermissionState;
import com.android.server.pm.Settings.VersionInfo;
import com.android.server.storage.DeviceStorageMonitorInternal;
import com.mediatek.am.AMEventHookAction;
import com.mediatek.am.AMEventHookData.BeforeShowAppErrorDialog;
import com.mediatek.am.AMEventHookData.BeforeShowAppErrorDialog.Index;
import com.mediatek.am.AMEventHookResult;
import com.mediatek.appworkingset.AWSDBHelper.PackageProcessList;
import com.mediatek.cta.CtaPackageManagerInternal;
import com.mediatek.cta.CtaUtils;
import com.mediatek.pq.IAppDetectionService;
import com.mediatek.server.cta.CtaPackageManagerInternalImpl;
import com.mediatek.server.cta.CtaPermsController;
import com.mediatek.server.pm.MtkPermErrorDialog;
import com.oppo.hypnus.Hypnus;
import dalvik.system.CloseGuard;
import dalvik.system.DexFile;
import dalvik.system.VMRuntime;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import libcore.io.IoUtils;
import libcore.util.EmptyArray;
import oppo.content.res.OppoFontUtils;
import oppo.util.OppoMultiLauncherUtil;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

/*  JADX ERROR: NullPointerException in pass: ReSugarCode
    java.lang.NullPointerException
    	at jadx.core.dex.visitors.ReSugarCode.initClsEnumMap(ReSugarCode.java:159)
    	at jadx.core.dex.visitors.ReSugarCode.visit(ReSugarCode.java:44)
    	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:12)
    	at jadx.core.ProcessClass.process(ProcessClass.java:32)
    	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
    	at java.lang.Iterable.forEach(Iterable.java:75)
    	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
    	at jadx.core.ProcessClass.process(ProcessClass.java:37)
    	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
    	at jadx.api.JavaClass.decompile(JavaClass.java:62)
    	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
    */
/*  JADX ERROR: NullPointerException in pass: ExtractFieldInit
    java.lang.NullPointerException
    	at jadx.core.dex.visitors.ExtractFieldInit.checkStaticFieldsInit(ExtractFieldInit.java:58)
    	at jadx.core.dex.visitors.ExtractFieldInit.visit(ExtractFieldInit.java:44)
    	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:12)
    	at jadx.core.ProcessClass.process(ProcessClass.java:32)
    	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
    	at java.lang.Iterable.forEach(Iterable.java:75)
    	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
    	at jadx.core.ProcessClass.process(ProcessClass.java:37)
    	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
    	at jadx.api.JavaClass.decompile(JavaClass.java:62)
    	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
    */
public class PackageManagerService extends Stub {
    private static final String ACTION_SKIN_CHANGED = "android.intent.action.SKIN_CHANGED";
    private static final String ATTR_IS_GRANTED = "g";
    private static final String ATTR_PACKAGE_NAME = "pkg";
    private static final String ATTR_PERMISSION_NAME = "name";
    private static final String ATTR_REVOKE_ON_UPGRADE = "rou";
    private static final String ATTR_USER_FIXED = "fixed";
    private static final String ATTR_USER_SET = "set";
    private static final int BLUETOOTH_UID = 1002;
    static final int BROADCAST_DELAY = 10000;
    static final int CHECK_PENDING_VERIFICATION = 16;
    private static final String CHROME_BROWSER_PKG_NAME = "com.android.chrome";
    static final boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE = false;
    private static final int DATA_FREE_SIZE_THRESHOLD = 16;
    private static final boolean DBG_ENG = false;
    private static boolean DBG_IS_LOGGABLE = false;
    static boolean DEBUG_ABI_SELECTION = false;
    private static boolean DEBUG_APP_DATA = false;
    private static boolean DEBUG_BACKUP = false;
    static boolean DEBUG_BROADCASTS = false;
    static boolean DEBUG_CTA_PERMISSIONS = false;
    static boolean DEBUG_DEXOPT = false;
    static final boolean DEBUG_DEXOPT_BACKUP = false;
    static boolean DEBUG_DOMAIN_VERIFICATION = false;
    private static boolean DEBUG_EPHEMERAL = false;
    private static final boolean DEBUG_FILTERS = false;
    static boolean DEBUG_FOR_PERMISSION = false;
    static boolean DEBUG_INSTALL = false;
    static boolean DEBUG_INTENT_MATCHING = false;
    static boolean DEBUG_PACKAGE_INFO = false;
    static boolean DEBUG_PACKAGE_SCANNING = false;
    static boolean DEBUG_PMS = false;
    static boolean DEBUG_PREFERRED = false;
    static boolean DEBUG_REMOVE = false;
    static boolean DEBUG_SD_INSTALL = false;
    static boolean DEBUG_SETTINGS = false;
    static boolean DEBUG_SHOW_INFO = false;
    private static boolean DEBUG_TRIAGED_MISSING = false;
    static boolean DEBUG_UPGRADE = false;
    static boolean DEBUG_VERIFY = false;
    static final ComponentName DEFAULT_CONTAINER_COMPONENT = null;
    static final String DEFAULT_CONTAINER_PACKAGE = "com.android.defcontainer";
    private static int DEFAULT_EPHEMERAL_HASH_PREFIX_COUNT = 0;
    private static int DEFAULT_EPHEMERAL_HASH_PREFIX_MASK = 0;
    private static final long DEFAULT_MANDATORY_FSTRIM_INTERVAL = 259200000;
    private static final int DEFAULT_VERIFICATION_RESPONSE = 1;
    private static final long DEFAULT_VERIFICATION_TIMEOUT = 10000;
    private static final boolean DEFAULT_VERIFY_ENABLE = true;
    private static final String DEVICE_INFO_PATH = "/proc/devinfo/emmc";
    private static final String DEVICE_MANUFACTURE = "manufacture";
    private static final String DEVICE_MANUFACTURE_MICRON = "MICRON";
    private static final String DEVICE_VERSION = "version";
    private static final String DEVICE_VERSION_MICRON = "S0J9F8";
    private static final boolean DISABLE_EPHEMERAL_APPS = false;
    private static final int[] EMPTY_INT_ARRAY = null;
    static final int END_COPY = 4;
    static final boolean EXP_VERSION = false;
    static final int FIND_INSTALL_LOC = 8;
    private static final String GAME_CENTER_PKGNAME = "com.nearme.gamecenter";
    private static final String GAME_CENTER_SYSTEM_APP = "com.nearme.deamon";
    private static final int GRANT_DENIED = 1;
    private static final int GRANT_INSTALL = 2;
    private static final int GRANT_RUNTIME = 3;
    private static final int GRANT_UPGRADE = 4;
    private static final boolean HIDE_EPHEMERAL_APIS = true;
    static final int INIT_COPY = 5;
    private static final String INSTALL_PACKAGE_SUFFIX = "-";
    static final int INTENT_FILTER_VERIFIED = 18;
    private static final String KILL_APP_REASON_GIDS_CHANGED = "permission grant or revoke changed gids";
    private static final String KILL_APP_REASON_PERMISSIONS_REVOKED = "permissions revoked";
    private static final int LOG_UID = 1007;
    private static final int MAX_PERMISSION_TREE_FOOTPRINT = 32768;
    static final int MCS_BOUND = 3;
    static final int MCS_CHECK = 20;
    static final int MCS_GIVE_UP = 11;
    static final int MCS_RECONNECT = 10;
    static final int MCS_UNBIND = 6;
    static final int MSG_CACHE_ICON_INIT = 23;
    static final int MSG_PACAKGE_ADDED = 21;
    static final int MSG_PACKAGE_REMOVED = 22;
    private static final String MTK_GMO_RAM_OPTIMIZE = "ro.mtk_gmo_ram_optimize";
    private static final String MTK_GMO_ROM_OPTIMIZE = "ro.mtk_gmo_rom_optimize";
    private static final int NFC_UID = 1027;
    private static final String OPPO_BROWSER_PKG_NAME = "com.android.browser";
    private static final String OPPO_DEFAULT_BROWSER_FEATURE = "oppo.exp.default.browser";
    private static final String OPPO_LOWRAM_FEATURE = "oppo.rom.lowram.support";
    private static final String OPPO_SECURITYPAY_FEATURE = "oppo.securitypay.support";
    private static final String PACKAGE_MIME_TYPE = "application/vnd.android.package-archive";
    private static final String PACKAGE_SCHEME = "package";
    static final int PACKAGE_VERIFIED = 15;
    static final String PLATFORM_PACKAGE_NAME = "android";
    static final int POST_INSTALL = 9;
    private static final Set<String> PROTECTED_ACTIONS = null;
    private static final int RADIO_UID = 1001;
    private static final int READ_SYSTEM_DEFAULT_DELAY_TIME = 20000;
    public static final int REASON_AB_OTA = 4;
    public static final int REASON_BACKGROUND_DEXOPT = 3;
    public static final int REASON_BOOT = 1;
    public static final int REASON_CORE_APP = 8;
    public static final int REASON_FIRST_BOOT = 0;
    public static final int REASON_FORCED_DEXOPT = 7;
    public static final int REASON_INSTALL = 2;
    public static final int REASON_LAST = 8;
    public static final int REASON_NON_SYSTEM_LIBRARY = 5;
    public static final int REASON_SHARED_APK = 6;
    private static final String REGION_INDIA = "IN";
    static final int REMOVE_CHATTY = 65536;
    static final int SCAN_BOOTING = 256;
    static final int SCAN_CHECK_ONLY = 32768;
    static final int SCAN_DEFER_DEX = 128;
    static final int SCAN_DELETE_DATA_ON_FAILURES = 1024;
    static final int SCAN_DONT_KILL_APP = 131072;
    static final int SCAN_FORCE_DEX = 4;
    static final int SCAN_IGNORE_FROZEN = 262144;
    static final int SCAN_INITIAL = 16384;
    static final int SCAN_MOVE = 8192;
    static final int SCAN_NEW_INSTALL = 16;
    static final int SCAN_NO_DEX = 2;
    static final int SCAN_NO_PATHS = 32;
    static final int SCAN_REPLACING = 2048;
    static final int SCAN_REQUIRE_KNOWN = 4096;
    static final int SCAN_TRUSTED_OVERLAY = 512;
    static final int SCAN_UPDATE_SIGNATURE = 8;
    static final int SCAN_UPDATE_TIME = 64;
    private static final String SD_ENCRYPTION_ALGORITHM = "AES";
    private static final String SD_ENCRYPTION_KEYSTORE_NAME = "AppsOnSD";
    static final int SEND_PENDING_BROADCAST = 1;
    private static final int SHELL_UID = 2000;
    private static final String SKIP_SHARED_LIBRARY_CHECK = "&";
    static final int START_CLEANING_PACKAGE = 7;
    static final int START_INTENT_FILTER_VERIFICATIONS = 17;
    private static final int SYSTEM_RUNTIME_GRANT_MASK = 52;
    static final String TAG = "PackageManager";
    private static final String TAG_ALL_GRANTS = "rt-grants";
    private static final String TAG_DEFAULT_APPS = "da";
    private static final String TAG_GRANT = "grant";
    private static final String TAG_INTENT_FILTER_VERIFICATION = "iv";
    private static final String TAG_PERMISSION = "perm";
    private static final String TAG_PERMISSION_BACKUP = "perm-grant-backup";
    private static final String TAG_PREFERRED_BACKUP = "pa";
    static final int UPDATED_MEDIA_STATUS = 12;
    static final int UPDATE_PERMISSIONS_ALL = 1;
    static final int UPDATE_PERMISSIONS_REPLACE_ALL = 4;
    static final int UPDATE_PERMISSIONS_REPLACE_PKG = 2;
    private static final int USER_RUNTIME_GRANT_MASK = 11;
    private static final String VENDOR_OVERLAY_DIR = "/vendor/overlay";
    private static final long WATCHDOG_TIMEOUT = 600000;
    static final int WRITE_PACKAGE_LIST = 19;
    static final int WRITE_PACKAGE_RESTRICTIONS = 14;
    static final int WRITE_SETTINGS = 13;
    static final int WRITE_SETTINGS_DELAY = 10000;
    private static ConcurrentHashMap<String, Bitmap> mActivityIconsCache;
    private static ConcurrentHashMap<String, Bitmap> mAppIconsCache;
    private static ConcurrentHashMap<String, Bitmap> mAppIconsCacheCompress;
    static final String mCrossFlag = null;
    private static Hypnus mHyp;
    static final String mNetLock = null;
    static final String mOperator = null;
    private static final Comparator<ProviderInfo> mProviderInitOrderSorter = null;
    static final String mRegion = null;
    static final String mRegionMark = null;
    private static final Comparator<ResolveInfo> mResolvePrioritySorter = null;
    private static final Comparator<ResolveInfo> mSystemAppPrioritySorter = null;
    private static final Intent sBrowserIntent = null;
    static UserManagerService sUserManager;
    private final String CUSTOMIZE_LIST_PATH;
    private final String CUSTOMIZE_SYSTEM_APP_BLACKLIST_PATH;
    boolean backgroundClearIsRunning;
    final ActivityIntentResolver mActivities;
    ApplicationInfo mAndroidApplication;
    File mAppChanelFile;
    List<String> mAppChannelArrayList;
    final File mAppInstallDir;
    private File mAppLib32InstallDir;
    final ArrayMap<String, ArraySet<String>> mAppOpPermissionPackages;
    final String mAsecInternalPath;
    final ArrayMap<String, FeatureInfo> mAvailableFeatures;
    private BlackAppInstallHelper mBlackAppInstallHelper;
    private final HashSet<String> mBlockPermReviewPkgs;
    private final Runnable mClearSystemApp;
    private CompatibilityHelper mCompatibilityHelper;
    private final CompilerStats mCompilerStats;
    private IMediaContainerService mContainerService;
    final Context mContext;
    private CtaPermsController mCtaPermsController;
    private final boolean mCtmFlag;
    private final String mCtmName;
    ComponentName mCustomResolverComponentName;
    private List<String> mCustomizeList;
    private List<String> mCustomizeSystemAppBlacklist;
    List<String> mDataAppArrayList;
    File mDataAppDir;
    File mDataAppPathNameFile;
    File mDataAppPkgNameFile;
    File mDataEngineermodeDir;
    private final DefaultContainerConnection mDefContainerConn;
    final int mDefParseFlags;
    final DefaultPermissionGrantPolicy mDefaultPermissionPolicy;
    private boolean mDeferProtectedFilters;
    String mDeviceType;
    @GuardedBy("mPackages")
    private boolean mDexOptDialogShown;
    private ArraySet<Integer> mDirtyUsers;
    final File mDrmAppPrivateInstallDir;
    private final EphemeralApplicationRegistry mEphemeralApplicationRegistry;
    final File mEphemeralInstallDir;
    final ActivityInfo mEphemeralInstallerActivity;
    final ComponentName mEphemeralInstallerComponent;
    final ResolveInfo mEphemeralInstallerInfo;
    final ComponentName mEphemeralResolverComponent;
    final EphemeralResolverConnection mEphemeralResolverConnection;
    private final ArraySet<String> mExistingSystemPackages;
    private final ArrayMap<String, File> mExpectingBetter;
    final boolean mFactoryTest;
    boolean mFirstBoot;
    private final HashSet<String> mForcePermReviewPkgs;
    boolean mFoundPolicyFile;
    @GuardedBy("mPackages")
    final ArraySet<String> mFrozenPackages;
    final int[] mGlobalGids;
    final PackageHandler mHandler;
    final ServiceThread mHandlerThread;
    volatile boolean mHasSystemUidErrors;
    final Object mInstallLock;
    @GuardedBy("mInstallLock")
    final Installer mInstaller;
    final PackageInstallerService mInstallerService;
    final ArrayMap<ComponentName, Instrumentation> mInstrumentation;
    final SparseArray<IntentFilterVerificationState> mIntentFilterVerificationStates;
    private int mIntentFilterVerificationToken;
    private final IntentFilterVerifier<ActivityIntentInfo> mIntentFilterVerifier;
    private final ComponentName mIntentFilterVerifierComponent;
    boolean mIsCtsAppInstall;
    final boolean mIsPreNMR1Upgrade;
    final boolean mIsPreNUpgrade;
    final boolean mIsUpgrade;
    private List<String> mKeepUninstalledPackages;
    final ArrayMap<String, Set<String>> mKnownCodebase;
    private boolean mLowRamFeature;
    boolean mMTPROFDisable;
    private boolean mMediaMounted;
    ApplicationInfo mMediatekApplication;
    final DisplayMetrics mMetrics;
    private final MoveCallbacks mMoveCallbacks;
    File mNetLockExpAppPathNameFile;
    File mNetLockExpAppPkgNameFile;
    int mNextInstallToken;
    private AtomicInteger mNextMoveId;
    private final OnPermissionChangeListeners mOnPermissionChangeListeners;
    final boolean mOnlyCore;
    final File mOperatorAppInstallDir;
    File mOperatorExpAppPathNameFile;
    File mOperatorExpAppPkgNameFile;
    ArrayMap<String, FeatureInfo> mOppoAvailableFeatures;
    public ArrayList<OppoAdbInstallerEntry> mOppoPackageInstallerList;
    private OppoDcimProtectionService mOppoScimProtection;
    final ArrayMap<String, ArrayMap<String, Package>> mOverlays;
    private HashMap<Integer, IPackageDeleteObserver> mPackageDeleteList;
    private final PackageDexOptimizer mPackageDexOptimizer;
    private final String[] mPackageInstaller;
    private final PackageUsage mPackageUsage;
    @GuardedBy("mPackages")
    final ArrayMap<String, Package> mPackages;
    File mPackagexmlFile;
    final PendingPackageBroadcasts mPendingBroadcasts;
    final SparseArray<PackageVerificationState> mPendingVerification;
    private int mPendingVerificationToken;
    final ArrayMap<String, PermissionGroup> mPermissionGroups;
    Package mPlatformPackage;
    final File mPluginAppInstallDir;
    private ArrayList<Message> mPostSystemReadyMessages;
    private final ProcessLoggingHandler mProcessLoggingHandler;
    boolean mPromoteSystemApps;
    final ArraySet<String> mProtectedBroadcasts;
    private final List<ActivityIntentInfo> mProtectedFilters;
    final ProtectedPackages mProtectedPackages;
    final ProviderIntentResolver mProviders;
    final ArrayMap<String, Provider> mProvidersByAuthority;
    private final Runnable mReadSystemDefaultApp;
    final ActivityIntentResolver mReceivers;
    File mRegionMarkExpAppPathNameFile;
    File mRegionMarkExpAppPkgNameFile;
    final String mRequiredInstallerPackage;
    final String mRequiredUninstallerPackage;
    final String mRequiredVerifierPackage;
    final ActivityInfo mResolveActivity;
    ComponentName mResolveComponentName;
    final ResolveInfo mResolveInfo;
    boolean mResolverReplaced;
    private ArrayMap<OriginInfo, String> mRunningInstallerPkgName;
    final SparseArray<PostInstallData> mRunningInstalls;
    volatile boolean mSafeMode;
    final int mSdkVersion;
    final String[] mSeparateProcesses;
    private int mServiceCheck;
    private boolean mServiceConnected;
    final ServiceIntentResolver mServices;
    final String mServicesSystemSharedLibraryPackageName;
    @GuardedBy("mPackages")
    final Settings mSettings;
    final String mSetupWizardPackage;
    final ArrayMap<String, SharedLibraryEntry> mSharedLibraries;
    final String mSharedSystemSharedLibraryPackageName;
    private BroadcastReceiver mSkinChangedReceiver;
    private StorageEventListener mStorageListener;
    final String mStorageManagerPackage;
    List<String> mSystemAppArrayList;
    File mSystemAppPkgFileName;
    File mSystemEtcDir;
    final SparseArray<ArraySet<String>> mSystemPermissions;
    volatile boolean mSystemReady;
    private boolean mThemeIconsChanged;
    private FileObserver mThemeIconsFileObserver;
    final ArraySet<String> mTransferedPackages;
    private UserManagerInternal mUserManagerInternal;
    SparseBooleanArray mUserNeedsBadging;
    final ArrayList<String> mbadCalcPackageCache;
    final ArrayList<String> mbadClearPackageCache;

    final /* synthetic */ class -void_postPreferredActivityChangedBroadcast_int_userId_LambdaImpl0 implements Runnable {
        private /* synthetic */ int val$userId;

        public /* synthetic */ -void_postPreferredActivityChangedBroadcast_int_userId_LambdaImpl0(int i) {
            this.val$userId = i;
        }

        public void run() {
            PackageManagerService.m5-com_android_server_pm_PackageManagerService_lambda$1(this.val$userId);
        }
    }

    private interface BlobXmlRestorer {
        void apply(XmlPullParser xmlPullParser, int i) throws IOException, XmlPullParserException;
    }

    final class ActivityIntentResolver extends IntentResolver<ActivityIntentInfo, ResolveInfo> {
        private final ArrayMap<ComponentName, Activity> mActivities = new ArrayMap();
        private int mFlags;

        public class IterGenerator<E> {
            public Iterator<E> generate(ActivityIntentInfo info) {
                return null;
            }
        }

        public class ActionIterGenerator extends IterGenerator<String> {
            public ActionIterGenerator() {
                super();
            }

            public Iterator<String> generate(ActivityIntentInfo info) {
                return info.actionsIterator();
            }
        }

        public class AuthoritiesIterGenerator extends IterGenerator<AuthorityEntry> {
            public AuthoritiesIterGenerator() {
                super();
            }

            public Iterator<AuthorityEntry> generate(ActivityIntentInfo info) {
                return info.authoritiesIterator();
            }
        }

        public class CategoriesIterGenerator extends IterGenerator<String> {
            public CategoriesIterGenerator() {
                super();
            }

            public Iterator<String> generate(ActivityIntentInfo info) {
                return info.categoriesIterator();
            }
        }

        public class SchemesIterGenerator extends IterGenerator<String> {
            public SchemesIterGenerator() {
                super();
            }

            public Iterator<String> generate(ActivityIntentInfo info) {
                return info.schemesIterator();
            }
        }

        ActivityIntentResolver() {
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, boolean defaultOnly, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            this.mFlags = defaultOnly ? 65536 : 0;
            return super.queryIntent(intent, resolvedType, defaultOnly, userId);
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, int flags, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            this.mFlags = flags;
            if ((65536 & flags) != 0) {
                z = true;
            }
            return super.queryIntent(intent, resolvedType, z, userId);
        }

        public List<ResolveInfo> queryIntentForPackage(Intent intent, String resolvedType, int flags, ArrayList<Activity> packageActivities, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId) || packageActivities == null) {
                return null;
            }
            this.mFlags = flags;
            boolean defaultOnly = (65536 & flags) != 0;
            int N = packageActivities.size();
            ArrayList<ActivityIntentInfo[]> listCut = new ArrayList(N);
            for (int i = 0; i < N; i++) {
                ArrayList<ActivityIntentInfo> intentFilters = ((Activity) packageActivities.get(i)).intents;
                if (intentFilters != null && intentFilters.size() > 0) {
                    ActivityIntentInfo[] array = new ActivityIntentInfo[intentFilters.size()];
                    intentFilters.toArray(array);
                    listCut.add(array);
                }
            }
            return super.queryIntentFromList(intent, resolvedType, defaultOnly, listCut, userId);
        }

        private Activity findMatchingActivity(List<Activity> activityList, ActivityInfo activityInfo) {
            for (Activity sysActivity : activityList) {
                if (sysActivity.info.name.equals(activityInfo.name) || sysActivity.info.name.equals(activityInfo.targetActivity)) {
                    return sysActivity;
                }
                if (sysActivity.info.targetActivity != null && (sysActivity.info.targetActivity.equals(activityInfo.name) || sysActivity.info.targetActivity.equals(activityInfo.targetActivity))) {
                    return sysActivity;
                }
            }
            return null;
        }

        private <T> void getIntentListSubset(List<ActivityIntentInfo> intentList, IterGenerator<T> generator, Iterator<T> searchIterator) {
            while (searchIterator.hasNext() && intentList.size() != 0) {
                T searchAction = searchIterator.next();
                Iterator<ActivityIntentInfo> intentIter = intentList.iterator();
                while (intentIter.hasNext()) {
                    boolean selectionFound = false;
                    Iterator<T> intentSelectionIter = generator.generate((ActivityIntentInfo) intentIter.next());
                    while (intentSelectionIter != null && intentSelectionIter.hasNext()) {
                        T intentSelection = intentSelectionIter.next();
                        if (intentSelection != null && intentSelection.equals(searchAction)) {
                            selectionFound = true;
                            break;
                        }
                    }
                    if (!selectionFound) {
                        intentIter.remove();
                    }
                }
            }
        }

        private boolean isProtectedAction(ActivityIntentInfo filter) {
            Iterator<String> actionsIter = filter.actionsIterator();
            while (actionsIter != null && actionsIter.hasNext()) {
                if (PackageManagerService.PROTECTED_ACTIONS.contains((String) actionsIter.next())) {
                    return true;
                }
            }
            return false;
        }

        private void adjustPriority(List<Activity> systemActivities, ActivityIntentInfo intent) {
            if (intent.getPriority() > 0) {
                ActivityInfo activityInfo = intent.activity.info;
                if (!((activityInfo.applicationInfo.privateFlags & 8) != 0)) {
                    intent.setPriority(0);
                } else if (systemActivities != null) {
                    Activity foundActivity = findMatchingActivity(systemActivities, activityInfo);
                    if (foundActivity == null) {
                        intent.setPriority(0);
                        return;
                    }
                    List<ActivityIntentInfo> intentListCopy = new ArrayList(foundActivity.intents);
                    List<ActivityIntentInfo> foundFilters = findFilters(intent);
                    Iterator<String> actionsIterator = intent.actionsIterator();
                    if (actionsIterator != null) {
                        getIntentListSubset(intentListCopy, new ActionIterGenerator(), actionsIterator);
                        if (intentListCopy.size() == 0) {
                            intent.setPriority(0);
                            return;
                        }
                    }
                    Iterator<String> categoriesIterator = intent.categoriesIterator();
                    if (categoriesIterator != null) {
                        getIntentListSubset(intentListCopy, new CategoriesIterGenerator(), categoriesIterator);
                        if (intentListCopy.size() == 0) {
                            intent.setPriority(0);
                            return;
                        }
                    }
                    Iterator<String> schemesIterator = intent.schemesIterator();
                    if (schemesIterator != null) {
                        getIntentListSubset(intentListCopy, new SchemesIterGenerator(), schemesIterator);
                        if (intentListCopy.size() == 0) {
                            intent.setPriority(0);
                            return;
                        }
                    }
                    Iterator<AuthorityEntry> authoritiesIterator = intent.authoritiesIterator();
                    if (authoritiesIterator != null) {
                        getIntentListSubset(intentListCopy, new AuthoritiesIterGenerator(), authoritiesIterator);
                        if (intentListCopy.size() == 0) {
                            intent.setPriority(0);
                            return;
                        }
                    }
                    int cappedPriority = 0;
                    for (int i = intentListCopy.size() - 1; i >= 0; i--) {
                        cappedPriority = Math.max(cappedPriority, ((ActivityIntentInfo) intentListCopy.get(i)).getPriority());
                    }
                    if (intent.getPriority() > cappedPriority) {
                        intent.setPriority(cappedPriority);
                    }
                } else if (!isProtectedAction(intent)) {
                } else {
                    if (PackageManagerService.this.mDeferProtectedFilters) {
                        PackageManagerService.this.mProtectedFilters.add(intent);
                    } else if (!intent.activity.info.packageName.equals(PackageManagerService.this.mSetupWizardPackage)) {
                        intent.setPriority(0);
                    }
                }
            }
        }

        public final void addActivity(Activity a, String type) {
            this.mActivities.put(a.getComponentName(), a);
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Log.v(PackageManagerService.TAG, "  " + type + " " + (a.info.nonLocalizedLabel != null ? a.info.nonLocalizedLabel : a.info.name) + ":");
            }
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Log.v(PackageManagerService.TAG, "    Class=" + a.info.name);
            }
            int NI = a.intents.size();
            for (int j = 0; j < NI; j++) {
                ActivityIntentInfo intent = (ActivityIntentInfo) a.intents.get(j);
                if ("activity".equals(type)) {
                    List<Activity> systemActivities;
                    PackageSetting ps = PackageManagerService.this.mSettings.getDisabledSystemPkgLPr(intent.activity.info.packageName);
                    if (ps == null || ps.pkg == null) {
                        systemActivities = null;
                    } else {
                        systemActivities = ps.pkg.activities;
                    }
                    adjustPriority(systemActivities, intent);
                }
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                if (!intent.debugCheck()) {
                    Log.w(PackageManagerService.TAG, "==> For Activity " + a.info.name);
                }
                addFilter(intent);
            }
        }

        public final void removeActivity(Activity a, String type) {
            this.mActivities.remove(a.getComponentName());
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Object obj;
                String str = PackageManagerService.TAG;
                StringBuilder append = new StringBuilder().append("  ").append(type).append(" ");
                if (a.info.nonLocalizedLabel != null) {
                    obj = a.info.nonLocalizedLabel;
                } else {
                    obj = a.info.name;
                }
                Log.v(str, append.append(obj).append(":").toString());
                Log.v(PackageManagerService.TAG, "    Class=" + a.info.name);
            }
            int NI = a.intents.size();
            for (int j = 0; j < NI; j++) {
                ActivityIntentInfo intent = (ActivityIntentInfo) a.intents.get(j);
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                removeFilter(intent);
            }
        }

        protected boolean allowFilterResult(ActivityIntentInfo filter, List<ResolveInfo> dest) {
            ActivityInfo filterAi = filter.activity.info;
            for (int i = dest.size() - 1; i >= 0; i--) {
                ActivityInfo destAi = ((ResolveInfo) dest.get(i)).activityInfo;
                if (destAi.name == filterAi.name && destAi.packageName == filterAi.packageName) {
                    return false;
                }
            }
            return true;
        }

        protected ActivityIntentInfo[] newArray(int size) {
            return new ActivityIntentInfo[size];
        }

        protected boolean isFilterStopped(ActivityIntentInfo filter, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return true;
            }
            Package p = filter.activity.owner;
            if (p != null) {
                PackageSetting ps = p.mExtras;
                if (ps != null) {
                    if ((ps.pkgFlags & 1) == 0) {
                        z = ps.getStopped(userId);
                    }
                    return z;
                }
            }
            return false;
        }

        protected boolean isPackageForFilter(String packageName, ActivityIntentInfo info) {
            return packageName.equals(info.activity.owner.packageName);
        }

        protected ResolveInfo newResult(ActivityIntentInfo info, int match, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId) || !PackageManagerService.this.mSettings.isEnabledAndMatchLPr(info.activity.info, this.mFlags, userId)) {
                return null;
            }
            Activity activity = info.activity;
            PackageSetting ps = activity.owner.mExtras;
            if (ps == null) {
                return null;
            }
            ActivityInfo ai = PackageParser.generateActivityInfo(activity, this.mFlags, ps.readUserState(userId), userId);
            if (userId == OppoMultiAppManager.USER_ID && ai == null) {
                ai = PackageParser.generateActivityInfo(activity, this.mFlags, ps.readUserState(0), 0);
                if (PackageManagerService.DEBUG_PMS) {
                    Slog.v(PackageManagerService.TAG, "multi app: userId changed from 999 to 0");
                }
            }
            if (ai == null) {
                return null;
            }
            ResolveInfo res = new ResolveInfo();
            res.activityInfo = ai;
            if ((this.mFlags & 64) != 0) {
                res.filter = info;
            }
            if (info != null) {
                res.handleAllWebDataURI = info.handleAllWebDataURI();
            }
            res.priority = info.getPriority();
            res.preferredOrder = activity.owner.mPreferredOrder;
            res.match = match;
            res.isDefault = info.hasDefault;
            res.labelRes = info.labelRes;
            res.nonLocalizedLabel = info.nonLocalizedLabel;
            if (PackageManagerService.this.userNeedsBadging(userId)) {
                res.noResourceId = true;
            } else {
                res.icon = info.icon;
            }
            res.iconResourceId = info.icon;
            res.system = res.activityInfo.applicationInfo.isSystemApp();
            return res;
        }

        protected void sortResults(List<ResolveInfo> results) {
            Collections.sort(results, PackageManagerService.mResolvePrioritySorter);
        }

        protected void dumpFilter(PrintWriter out, String prefix, ActivityIntentInfo filter) {
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(filter.activity)));
            out.print(' ');
            filter.activity.printComponentShortName(out);
            out.print(" filter ");
            out.println(Integer.toHexString(System.identityHashCode(filter)));
        }

        protected Object filterToLabel(ActivityIntentInfo filter) {
            return filter.activity;
        }

        protected void dumpFilterLabel(PrintWriter out, String prefix, Object label, int count) {
            Activity activity = (Activity) label;
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(activity)));
            out.print(' ');
            activity.printComponentShortName(out);
            if (count > 1) {
                out.print(" (");
                out.print(count);
                out.print(" filters)");
            }
            out.println();
        }
    }

    static abstract class InstallArgs {
        String abiOverride;
        final Certificate[][] certificates;
        final int installFlags;
        final String[] installGrantPermissions;
        final String installerPackageName;
        String[] instructionSets;
        final MoveInfo move;
        final IPackageInstallObserver2 observer;
        final OriginInfo origin;
        final int traceCookie;
        final String traceMethod;
        final UserHandle user;
        final String volumeUuid;

        abstract void cleanUpResourcesLI();

        abstract int copyApk(IMediaContainerService iMediaContainerService, boolean z) throws RemoteException;

        abstract boolean doPostDeleteLI(boolean z);

        abstract int doPostInstall(int i, int i2);

        abstract int doPreInstall(int i);

        abstract boolean doRename(int i, Package packageR, String str);

        abstract String getCodePath();

        abstract String getResourcePath();

        InstallArgs(OriginInfo origin, MoveInfo move, IPackageInstallObserver2 observer, int installFlags, String installerPackageName, String volumeUuid, UserHandle user, String[] instructionSets, String abiOverride, String[] installGrantPermissions, String traceMethod, int traceCookie, Certificate[][] certificates) {
            this.origin = origin;
            this.move = move;
            this.installFlags = installFlags;
            this.observer = observer;
            this.installerPackageName = installerPackageName;
            this.volumeUuid = volumeUuid;
            this.user = user;
            this.instructionSets = instructionSets;
            this.abiOverride = abiOverride;
            this.installGrantPermissions = installGrantPermissions;
            this.traceMethod = traceMethod;
            this.traceCookie = traceCookie;
            this.certificates = certificates;
        }

        int doPreCopy() {
            return 1;
        }

        int doPostCopy(int uid) {
            return 1;
        }

        protected boolean isFwdLocked() {
            return (this.installFlags & 1) != 0;
        }

        protected boolean isExternalAsec() {
            return (this.installFlags & 8) != 0;
        }

        protected boolean isEphemeral() {
            return (this.installFlags & 2048) != 0;
        }

        UserHandle getUser() {
            return this.user;
        }
    }

    class AsecInstallArgs extends InstallArgs {
        static final String PUBLIC_RES_FILE_NAME = "res.zip";
        static final String RES_FILE_NAME = "pkg.apk";
        String cid;
        String packagePath;
        String resourcePath;

        AsecInstallArgs(InstallParams params) {
            super(params.origin, params.move, params.observer, params.installFlags, params.installerPackageName, params.volumeUuid, params.getUser(), null, params.packageAbiOverride, params.grantedRuntimePermissions, params.traceMethod, params.traceCookie, params.certificates);
        }

        AsecInstallArgs(String fullCodePath, String[] instructionSets, boolean isExternal, boolean isForwardLocked) {
            super(OriginInfo.fromNothing(), null, null, (isExternal ? 8 : 0) | (isForwardLocked ? 1 : 0), null, null, null, instructionSets, null, null, null, 0, null);
            if (!fullCodePath.endsWith(RES_FILE_NAME)) {
                fullCodePath = new File(fullCodePath, RES_FILE_NAME).getAbsolutePath();
            }
            int eidx = fullCodePath.lastIndexOf("/");
            String subStr1 = fullCodePath.substring(0, eidx);
            this.cid = subStr1.substring(subStr1.lastIndexOf("/") + 1, eidx);
            setMountPath(subStr1);
        }

        AsecInstallArgs(String cid, String[] instructionSets, boolean isForwardLocked) {
            super(OriginInfo.fromNothing(), null, null, (PackageManagerService.this.isAsecExternal(cid) ? 8 : 0) | (isForwardLocked ? 1 : 0), null, null, null, instructionSets, null, null, null, 0, null);
            this.cid = cid;
            setMountPath(PackageHelper.getSdDir(cid));
        }

        void createCopyFile() {
            this.cid = PackageManagerService.this.mInstallerService.allocateExternalStageCidLegacy();
        }

        int copyApk(IMediaContainerService imcs, boolean temp) throws RemoteException {
            if (!this.origin.staged || this.origin.cid == null) {
                if (temp) {
                    createCopyFile();
                } else {
                    PackageHelper.destroySdDir(this.cid);
                }
                String newMountPath = imcs.copyPackageToContainer(this.origin.file.getAbsolutePath(), this.cid, PackageManagerService.getEncryptKey(), isExternalAsec(), isFwdLocked(), PackageManagerService.deriveAbiOverride(this.abiOverride, null));
                if (newMountPath == null) {
                    return -18;
                }
                setMountPath(newMountPath);
                return 1;
            }
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.d(PackageManagerService.TAG, this.origin.cid + " already staged; skipping copy");
            }
            this.cid = this.origin.cid;
            setMountPath(PackageHelper.getSdDir(this.cid));
            return 1;
        }

        String getCodePath() {
            return this.packagePath;
        }

        String getResourcePath() {
            return this.resourcePath;
        }

        int doPreInstall(int status) {
            if (status != 1) {
                PackageHelper.destroySdDir(this.cid);
            } else if (!PackageHelper.isContainerMounted(this.cid)) {
                String newMountPath = PackageHelper.mountSdDir(this.cid, PackageManagerService.getEncryptKey(), 1000);
                if (newMountPath == null) {
                    return -18;
                }
                setMountPath(newMountPath);
            }
            return status;
        }

        boolean doRename(int status, Package pkg, String oldCodePath) {
            String newCacheId = PackageManagerService.getNextCodePath(oldCodePath, pkg.packageName, "/pkg.apk");
            if (!PackageHelper.isContainerMounted(this.cid) || PackageHelper.unMountSdDir(this.cid)) {
                String newMountPath;
                if (!PackageHelper.renameSdDir(this.cid, newCacheId)) {
                    Slog.e(PackageManagerService.TAG, "Failed to rename " + this.cid + " to " + newCacheId + " which might be stale. Will try to clean up.");
                    if (!PackageHelper.destroySdDir(newCacheId)) {
                        Slog.e(PackageManagerService.TAG, "Very strange. Cannot clean up stale container " + newCacheId);
                        return false;
                    } else if (!PackageHelper.renameSdDir(this.cid, newCacheId)) {
                        Slog.e(PackageManagerService.TAG, "Failed to rename " + this.cid + " to " + newCacheId + " inspite of cleaning it up.");
                        return false;
                    }
                }
                if (PackageHelper.isContainerMounted(newCacheId)) {
                    newMountPath = PackageHelper.getSdDir(newCacheId);
                } else {
                    Slog.w(PackageManagerService.TAG, "Mounting container " + newCacheId);
                    newMountPath = PackageHelper.mountSdDir(newCacheId, PackageManagerService.getEncryptKey(), 1000);
                }
                if (newMountPath == null) {
                    Slog.w(PackageManagerService.TAG, "Failed to get cache path for  " + newCacheId);
                    return false;
                }
                Log.i(PackageManagerService.TAG, "Succesfully renamed " + this.cid + " to " + newCacheId + " at new path: " + newMountPath);
                this.cid = newCacheId;
                File beforeCodeFile = new File(this.packagePath);
                setMountPath(newMountPath);
                File afterCodeFile = new File(this.packagePath);
                pkg.setCodePath(afterCodeFile.getAbsolutePath());
                pkg.setBaseCodePath(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.baseCodePath));
                pkg.setSplitCodePaths(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.splitCodePaths));
                pkg.setApplicationVolumeUuid(pkg.volumeUuid);
                pkg.setApplicationInfoCodePath(pkg.codePath);
                pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
                pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
                pkg.setApplicationInfoResourcePath(pkg.codePath);
                pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);
                pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
                return true;
            }
            Slog.i(PackageManagerService.TAG, "Failed to unmount " + this.cid + " before renaming");
            return false;
        }

        private void setMountPath(String mountPath) {
            File mountFile = new File(mountPath);
            File monolithicFile = new File(mountFile, RES_FILE_NAME);
            if (monolithicFile.exists()) {
                this.packagePath = monolithicFile.getAbsolutePath();
                if (isFwdLocked()) {
                    this.resourcePath = new File(mountFile, PUBLIC_RES_FILE_NAME).getAbsolutePath();
                    return;
                } else {
                    this.resourcePath = this.packagePath;
                    return;
                }
            }
            this.packagePath = mountFile.getAbsolutePath();
            this.resourcePath = this.packagePath;
        }

        int doPostInstall(int status, int uid) {
            if (status != 1) {
                cleanUp();
            } else {
                int groupOwner;
                String protectedFile;
                if (isFwdLocked()) {
                    groupOwner = UserHandle.getSharedAppGid(uid);
                    protectedFile = RES_FILE_NAME;
                } else {
                    groupOwner = -1;
                    protectedFile = null;
                }
                if (uid < 10000 || !PackageHelper.fixSdPermissions(this.cid, groupOwner, protectedFile)) {
                    Slog.e(PackageManagerService.TAG, "Failed to finalize " + this.cid);
                    PackageHelper.destroySdDir(this.cid);
                    return -18;
                } else if (!PackageHelper.isContainerMounted(this.cid)) {
                    PackageHelper.mountSdDir(this.cid, PackageManagerService.getEncryptKey(), Process.myUid());
                }
            }
            return status;
        }

        private void cleanUp() {
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Slog.i(PackageManagerService.TAG, "cleanUp");
            }
            PackageHelper.destroySdDir(this.cid);
        }

        private List<String> getAllCodePaths() {
            File codeFile = new File(getCodePath());
            if (codeFile != null && codeFile.exists()) {
                try {
                    return PackageParser.parsePackageLite(codeFile, 0).getAllCodePaths();
                } catch (PackageParserException e) {
                }
            }
            return Collections.EMPTY_LIST;
        }

        void cleanUpResourcesLI() {
            cleanUpResourcesLI(getAllCodePaths());
        }

        private void cleanUpResourcesLI(List<String> allCodePaths) {
            cleanUp();
            PackageManagerService.this.removeDexFiles(allCodePaths, this.instructionSets);
        }

        String getPackageName() {
            return PackageManagerService.getAsecPackageName(this.cid);
        }

        boolean doPostDeleteLI(boolean delete) {
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Slog.i(PackageManagerService.TAG, "doPostDeleteLI() del=" + delete);
            }
            List<String> allCodePaths = getAllCodePaths();
            boolean mounted = PackageHelper.isContainerMounted(this.cid);
            if (mounted && PackageHelper.unMountSdDir(this.cid)) {
                mounted = false;
            }
            if (!mounted && delete) {
                cleanUpResourcesLI(allCodePaths);
            }
            return !mounted;
        }

        int doPreCopy() {
            if (!isFwdLocked() || PackageHelper.fixSdPermissions(this.cid, PackageManagerService.this.getPackageUid(PackageManagerService.DEFAULT_CONTAINER_PACKAGE, DumpState.DUMP_DEXOPT, 0), RES_FILE_NAME)) {
                return 1;
            }
            return -18;
        }

        int doPostCopy(int uid) {
            if (!isFwdLocked() || (uid >= 10000 && PackageHelper.fixSdPermissions(this.cid, UserHandle.getSharedAppGid(uid), RES_FILE_NAME))) {
                return 1;
            }
            Slog.e(PackageManagerService.TAG, "Failed to finalize " + this.cid);
            PackageHelper.destroySdDir(this.cid);
            return -18;
        }
    }

    private final class ClearStorageConnection implements ServiceConnection {
        IMediaContainerService mContainerService;

        /* synthetic */ ClearStorageConnection(PackageManagerService this$0, ClearStorageConnection clearStorageConnection) {
            this();
        }

        private ClearStorageConnection() {
        }

        public void onServiceConnected(ComponentName name, IBinder service) {
            synchronized (this) {
                this.mContainerService = IMediaContainerService.Stub.asInterface(service);
                notifyAll();
            }
        }

        public void onServiceDisconnected(ComponentName name) {
        }
    }

    private static class CrossProfileDomainInfo {
        int bestDomainVerificationStatus;
        ResolveInfo resolveInfo;

        /* synthetic */ CrossProfileDomainInfo(CrossProfileDomainInfo crossProfileDomainInfo) {
            this();
        }

        private CrossProfileDomainInfo() {
        }
    }

    class DefaultContainerConnection implements ServiceConnection {
        DefaultContainerConnection() {
        }

        public void onServiceConnected(ComponentName name, IBinder service) {
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "onServiceConnected");
            }
            PackageManagerService.this.mServiceConnected = true;
            PackageManagerService.this.mServiceCheck = 0;
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "onServiceConnected: " + PackageManagerService.this.mServiceConnected + ", " + PackageManagerService.this.mServiceCheck);
            }
            PackageManagerService.this.mHandler.sendMessage(PackageManagerService.this.mHandler.obtainMessage(3, IMediaContainerService.Stub.asInterface(service)));
        }

        public void onServiceDisconnected(ComponentName name) {
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "onServiceDisconnected");
            }
            PackageManagerService.this.mServiceConnected = false;
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "onServiceDisconnected: " + PackageManagerService.this.mServiceConnected);
            }
        }
    }

    static class DumpState {
        public static final int DUMP_ACTIVITY_RESOLVERS = 4;
        public static final int DUMP_COMPILER_STATS = 2097152;
        public static final int DUMP_CONTENT_RESOLVERS = 32;
        public static final int DUMP_DEXOPT = 1048576;
        public static final int DUMP_DOMAIN_PREFERRED = 262144;
        public static final int DUMP_FEATURES = 2;
        public static final int DUMP_FROZEN = 524288;
        public static final int DUMP_INSTALLS = 65536;
        public static final int DUMP_INTENT_FILTER_VERIFIERS = 131072;
        public static final int DUMP_KEYSETS = 16384;
        public static final int DUMP_LIBS = 1;
        public static final int DUMP_MESSAGES = 512;
        public static final int DUMP_PACKAGES = 128;
        public static final int DUMP_PERMISSIONS = 64;
        public static final int DUMP_PREFERRED = 4096;
        public static final int DUMP_PREFERRED_XML = 8192;
        public static final int DUMP_PROVIDERS = 1024;
        public static final int DUMP_RECEIVER_RESOLVERS = 16;
        public static final int DUMP_SERVICE_RESOLVERS = 8;
        public static final int DUMP_SHARED_USERS = 256;
        public static final int DUMP_VERIFIERS = 2048;
        public static final int DUMP_VERSION = 32768;
        public static final int OPTION_SHOW_FILTERS = 1;
        private int mOptions;
        private SharedUserSetting mSharedUser;
        private boolean mTitlePrinted;
        private int mTypes;

        DumpState() {
        }

        public boolean isDumping(int type) {
            boolean z = true;
            if (this.mTypes == 0 && type != 8192) {
                return true;
            }
            if ((this.mTypes & type) == 0) {
                z = false;
            }
            return z;
        }

        public void setDump(int type) {
            this.mTypes |= type;
        }

        public boolean isOptionEnabled(int option) {
            return (this.mOptions & option) != 0;
        }

        public void setOptionEnabled(int option) {
            this.mOptions |= option;
        }

        public boolean onTitlePrinted() {
            boolean printed = this.mTitlePrinted;
            this.mTitlePrinted = true;
            return printed;
        }

        public boolean getTitlePrinted() {
            return this.mTitlePrinted;
        }

        public void setTitlePrinted(boolean enabled) {
            this.mTitlePrinted = enabled;
        }

        public SharedUserSetting getSharedUser() {
            return this.mSharedUser;
        }

        public void setSharedUser(SharedUserSetting user) {
            this.mSharedUser = user;
        }
    }

    private static final class EphemeralIntentResolver extends IntentResolver<EphemeralResolveIntentInfo, EphemeralResolveInfo> {
        final ArrayMap<String, Pair<Integer, EphemeralResolveInfo>> mOrderResult;

        /* synthetic */ EphemeralIntentResolver(EphemeralIntentResolver ephemeralIntentResolver) {
            this();
        }

        private EphemeralIntentResolver() {
            this.mOrderResult = new ArrayMap();
        }

        protected EphemeralResolveIntentInfo[] newArray(int size) {
            return new EphemeralResolveIntentInfo[size];
        }

        protected boolean isPackageForFilter(String packageName, EphemeralResolveIntentInfo info) {
            return true;
        }

        protected EphemeralResolveInfo newResult(EphemeralResolveIntentInfo info, int match, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            String packageName = info.getEphemeralResolveInfo().getPackageName();
            Integer order = Integer.valueOf(info.getOrder());
            Pair<Integer, EphemeralResolveInfo> lastOrderResult = (Pair) this.mOrderResult.get(packageName);
            if (lastOrderResult != null && ((Integer) lastOrderResult.first).intValue() >= order.intValue()) {
                return null;
            }
            EphemeralResolveInfo res = info.getEphemeralResolveInfo();
            if (order.intValue() > 0) {
                this.mOrderResult.put(packageName, new Pair(order, res));
            }
            return res;
        }

        protected void filterResults(List<EphemeralResolveInfo> results) {
            if (this.mOrderResult.size() != 0) {
                int resultSize = results.size();
                int i = 0;
                while (i < resultSize) {
                    EphemeralResolveInfo info = (EphemeralResolveInfo) results.get(i);
                    Pair<Integer, EphemeralResolveInfo> savedInfo = (Pair) this.mOrderResult.get(info.getPackageName());
                    if (savedInfo != null) {
                        if (savedInfo.second == info) {
                            this.mOrderResult.remove(savedInfo);
                            if (this.mOrderResult.size() == 0) {
                                break;
                            }
                        } else {
                            results.remove(i);
                            resultSize--;
                            i--;
                        }
                    }
                    i++;
                }
            }
        }
    }

    class FileInstallArgs extends InstallArgs {
        private File codeFile;
        private File resourceFile;

        FileInstallArgs(InstallParams params) {
            super(params.origin, params.move, params.observer, params.installFlags, params.installerPackageName, params.volumeUuid, params.getUser(), null, params.packageAbiOverride, params.grantedRuntimePermissions, params.traceMethod, params.traceCookie, params.certificates);
            if (isFwdLocked()) {
                throw new IllegalArgumentException("Forward locking only supported in ASEC");
            }
        }

        FileInstallArgs(String codePath, String resourcePath, String[] instructionSets) {
            super(OriginInfo.fromNothing(), null, null, 0, null, null, null, instructionSets, null, null, null, 0, null);
            this.codeFile = codePath != null ? new File(codePath) : null;
            this.resourceFile = resourcePath != null ? new File(resourcePath) : null;
        }

        int copyApk(IMediaContainerService imcs, boolean temp) throws RemoteException {
            Trace.traceBegin(1048576, "copyApk");
            try {
                int doCopyApk = doCopyApk(imcs, temp);
                return doCopyApk;
            } finally {
                Trace.traceEnd(1048576);
            }
        }

        private int doCopyApk(IMediaContainerService imcs, boolean temp) throws RemoteException {
            if (this.origin.staged) {
                if (PackageManagerService.DEBUG_INSTALL) {
                    Slog.d(PackageManagerService.TAG, this.origin.file + " already staged; skipping copy");
                }
                this.codeFile = this.origin.file;
                this.resourceFile = this.origin.file;
                return 1;
            }
            try {
                File tempDir = PackageManagerService.this.mInstallerService.allocateStageDirLegacy(this.volumeUuid, (this.installFlags & 2048) != 0);
                this.codeFile = tempDir;
                this.resourceFile = tempDir;
                int ret = imcs.copyPackage(this.origin.file.getAbsolutePath(), new IParcelFileDescriptorFactory.Stub() {
                    public ParcelFileDescriptor open(String name, int mode) throws RemoteException {
                        if (FileUtils.isValidExtFilename(name)) {
                            try {
                                File file = new File(FileInstallArgs.this.codeFile, name);
                                FileDescriptor fd = Os.open(file.getAbsolutePath(), OsConstants.O_RDWR | OsConstants.O_CREAT, 420);
                                Os.chmod(file.getAbsolutePath(), 420);
                                return new ParcelFileDescriptor(fd);
                            } catch (ErrnoException e) {
                                throw new RemoteException("Failed to open: " + e.getMessage());
                            }
                        }
                        throw new IllegalArgumentException("Invalid filename: " + name);
                    }
                });
                if (ret != 1) {
                    Slog.e(PackageManagerService.TAG, "Failed to copy package");
                    return ret;
                }
                File libraryRoot = new File(this.codeFile, "lib");
                AutoCloseable autoCloseable = null;
                try {
                    autoCloseable = Handle.create(this.codeFile);
                    ret = NativeLibraryHelper.copyNativeBinariesWithOverride(autoCloseable, libraryRoot, this.abiOverride);
                    IoUtils.closeQuietly(autoCloseable);
                } catch (IOException e) {
                    Slog.e(PackageManagerService.TAG, "Copying native libraries failed", e);
                    ret = -110;
                    IoUtils.closeQuietly(autoCloseable);
                } catch (Throwable th) {
                    IoUtils.closeQuietly(autoCloseable);
                    throw th;
                }
                return ret;
            } catch (IOException e2) {
                Slog.w(PackageManagerService.TAG, "Failed to create copy file: " + e2);
                return -4;
            }
        }

        int doPreInstall(int status) {
            if (status != 1) {
                cleanUp();
            }
            return status;
        }

        boolean doRename(int status, Package pkg, String oldCodePath) {
            if (status != 1) {
                cleanUp();
                return false;
            }
            File targetDir = this.codeFile.getParentFile();
            File beforeCodeFile = this.codeFile;
            File afterCodeFile = PackageManagerService.this.getNextCodePath(targetDir, pkg.packageName);
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.d(PackageManagerService.TAG, "Renaming " + beforeCodeFile + " to " + afterCodeFile);
            }
            try {
                Os.rename(beforeCodeFile.getAbsolutePath(), afterCodeFile.getAbsolutePath());
                if (SELinux.restoreconRecursive(afterCodeFile)) {
                    this.codeFile = afterCodeFile;
                    this.resourceFile = afterCodeFile;
                    pkg.setCodePath(afterCodeFile.getAbsolutePath());
                    pkg.setBaseCodePath(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.baseCodePath));
                    pkg.setSplitCodePaths(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.splitCodePaths));
                    pkg.setApplicationVolumeUuid(pkg.volumeUuid);
                    pkg.setApplicationInfoCodePath(pkg.codePath);
                    pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
                    pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
                    pkg.setApplicationInfoResourcePath(pkg.codePath);
                    pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);
                    pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
                    return true;
                }
                Slog.w(PackageManagerService.TAG, "Failed to restorecon");
                return false;
            } catch (ErrnoException e) {
                Slog.w(PackageManagerService.TAG, "Failed to rename", e);
                return false;
            }
        }

        int doPostInstall(int status, int uid) {
            if (status != 1) {
                cleanUp();
            }
            return status;
        }

        String getCodePath() {
            return this.codeFile != null ? this.codeFile.getAbsolutePath() : null;
        }

        String getResourcePath() {
            return this.resourceFile != null ? this.resourceFile.getAbsolutePath() : null;
        }

        private boolean cleanUp() {
            if (this.codeFile == null || !this.codeFile.exists()) {
                return false;
            }
            PackageManagerService.this.removeCodePathLI(this.codeFile);
            if (!(this.resourceFile == null || FileUtils.contains(this.codeFile, this.resourceFile))) {
                this.resourceFile.delete();
            }
            return true;
        }

        void cleanUpResourcesLI() {
            List<String> allCodePaths = Collections.EMPTY_LIST;
            if (this.codeFile != null && this.codeFile.exists()) {
                try {
                    allCodePaths = PackageParser.parsePackageLite(this.codeFile, 0).getAllCodePaths();
                } catch (PackageParserException e) {
                }
            }
            cleanUp();
            PackageManagerService.this.removeDexFiles(allCodePaths, this.instructionSets);
        }

        boolean doPostDeleteLI(boolean delete) {
            cleanUpResourcesLI();
            return true;
        }
    }

    private abstract class HandlerParams {
        private static final int MAX_RETRIES = 4;
        private int mRetries = 0;
        private final UserHandle mUser;
        int traceCookie;
        String traceMethod;

        abstract void handleReturnCode();

        abstract void handleServiceError();

        abstract void handleStartCopy() throws RemoteException;

        HandlerParams(UserHandle user) {
            this.mUser = user;
        }

        UserHandle getUser() {
            return this.mUser;
        }

        HandlerParams setTraceMethod(String traceMethod) {
            this.traceMethod = traceMethod;
            return this;
        }

        HandlerParams setTraceCookie(int traceCookie) {
            this.traceCookie = traceCookie;
            return this;
        }

        final boolean startCopy() {
            boolean res;
            try {
                int i = this.mRetries + 1;
                this.mRetries = i;
                if (i > 4) {
                    Slog.w(PackageManagerService.TAG, "Failed to invoke remote methods on default container service. Giving up");
                    PackageManagerService.this.mHandler.sendEmptyMessage(11);
                    handleServiceError();
                    return false;
                }
                handleStartCopy();
                res = true;
                handleReturnCode();
                return res;
            } catch (RemoteException e) {
                if (PackageManagerService.DEBUG_INSTALL) {
                    Slog.i(PackageManagerService.TAG, "Posting install MCS_RECONNECT");
                }
                PackageManagerService.this.mHandler.sendEmptyMessage(10);
                res = false;
            }
        }

        final void serviceError() {
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.i(PackageManagerService.TAG, "serviceError");
            }
            handleServiceError();
            handleReturnCode();
        }
    }

    private static class IFVerificationParams {
        Package pkg;
        boolean replacing;
        int userId;
        int verifierUid;

        public IFVerificationParams(Package _pkg, boolean _replacing, int _userId, int _verifierUid) {
            this.pkg = _pkg;
            this.replacing = _replacing;
            this.userId = _userId;
            this.replacing = _replacing;
            this.verifierUid = _verifierUid;
        }
    }

    class InstallParams extends HandlerParams {
        final Certificate[][] certificates;
        final String[] grantedRuntimePermissions;
        int installFlags;
        final String installerPackageName;
        private InstallArgs mArgs;
        private int mRet;
        final MoveInfo move;
        final IPackageInstallObserver2 observer;
        final OriginInfo origin;
        final String packageAbiOverride;
        final VerificationInfo verificationInfo;
        String volumeUuid;

        InstallParams(OriginInfo origin, MoveInfo move, IPackageInstallObserver2 observer, int installFlags, String installerPackageName, String volumeUuid, VerificationInfo verificationInfo, UserHandle user, String packageAbiOverride, String[] grantedPermissions, Certificate[][] certificates) {
            super(user);
            this.origin = origin;
            this.move = move;
            this.observer = observer;
            this.installFlags = installFlags;
            this.installerPackageName = installerPackageName;
            this.volumeUuid = volumeUuid;
            this.verificationInfo = verificationInfo;
            this.packageAbiOverride = packageAbiOverride;
            this.grantedRuntimePermissions = grantedPermissions;
            this.certificates = certificates;
        }

        public String toString() {
            return "InstallParams{" + Integer.toHexString(System.identityHashCode(this)) + " file=" + this.origin.file + " cid=" + this.origin.cid + "}";
        }

        /* JADX WARNING: Missing block: B:62:0x00b7, code:
            if (r6 == false) goto L_0x00ca;
     */
        /* JADX WARNING: Missing block: B:63:0x00b9, code:
            return 2;
     */
        /* JADX WARNING: Missing block: B:78:0x00cc, code:
            return r15.recommendedInstallLocation;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        private int installLocationPolicy(PackageInfoLite pkgLite) {
            boolean downgradePermitted = false;
            String packageName = pkgLite.packageName;
            int installLocation = pkgLite.installLocation;
            boolean onSd = (this.installFlags & 8) != 0;
            synchronized (PackageManagerService.this.mPackages) {
                Package installedPkg = (Package) PackageManagerService.this.mPackages.get(packageName);
                Package dataOwnerPkg = installedPkg;
                if (installedPkg == null) {
                    PackageSetting ps = (PackageSetting) PackageManagerService.this.mSettings.mPackages.get(packageName);
                    if (ps != null) {
                        dataOwnerPkg = ps.pkg;
                    }
                }
                if (dataOwnerPkg != null) {
                    boolean downgradeRequested = (this.installFlags & 128) != 0;
                    boolean packageDebuggable = (dataOwnerPkg.applicationInfo.flags & 2) != 0;
                    if (downgradeRequested) {
                        if (Build.IS_DEBUGGABLE) {
                            downgradePermitted = true;
                        } else {
                            downgradePermitted = packageDebuggable;
                        }
                    }
                    if (!downgradePermitted) {
                        try {
                            PackageManagerService.checkDowngrade(dataOwnerPkg, pkgLite);
                        } catch (PackageManagerException e) {
                            Slog.w(PackageManagerService.TAG, "Downgrade detected: " + e.getMessage());
                            return -7;
                        }
                    }
                }
                if (installedPkg != null) {
                    if ((this.installFlags & 2) == 0) {
                        return -4;
                    } else if ((installedPkg.applicationInfo.flags & 1) != 0) {
                        if (!onSd) {
                            return 1;
                        } else if (OppoPackageManagerHelper.IsTrustApkList(packageName)) {
                            Slog.w(PackageManagerService.TAG, "install update to system app on sdcard for oppo apk");
                            OppoPackageManagerHelper.mForceToSD = true;
                            return 1;
                        } else {
                            Slog.w(PackageManagerService.TAG, "Cannot install update to system app on sdcard");
                            return -3;
                        }
                    } else if (onSd) {
                        return 2;
                    } else if (installLocation == 1) {
                        return 1;
                    } else if (installLocation != 2) {
                        if (PackageManagerService.isExternal(installedPkg)) {
                            return 2;
                        }
                        return 1;
                    }
                }
            }
        }

        public void handleStartCopy() throws RemoteException {
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.i(PackageManagerService.TAG, "startCopy " + getUser() + ": " + this);
            }
            int ret = 1;
            if (this.origin.staged) {
                if (this.origin.file != null) {
                    this.installFlags |= 16;
                    this.installFlags &= -9;
                } else if (this.origin.cid != null) {
                    this.installFlags |= 8;
                    this.installFlags &= -17;
                } else {
                    throw new IllegalStateException("Invalid stage location");
                }
            }
            boolean onSd = (this.installFlags & 8) != 0;
            boolean onInt = (this.installFlags & 16) != 0;
            boolean ephemeral = (this.installFlags & 2048) != 0;
            PackageInfoLite pkgLite = null;
            if (onInt && onSd) {
                Slog.w(PackageManagerService.TAG, "Conflicting flags specified for installing on both internal and external");
                ret = -19;
            } else if (onSd && ephemeral) {
                Slog.w(PackageManagerService.TAG, "Conflicting flags specified for installing ephemeral on external");
                ret = -19;
            } else {
                pkgLite = PackageManagerService.this.mContainerService.getMinimalPackageInfo(this.origin.resolvedPath, this.installFlags, this.packageAbiOverride);
                if (PackageManagerService.DEBUG_EPHEMERAL && ephemeral) {
                    Slog.v(PackageManagerService.TAG, "pkgLite for install: " + pkgLite);
                }
                if (!this.origin.staged && pkgLite.recommendedInstallLocation == -1) {
                    try {
                        PackageManagerService.this.mInstaller.freeCache(null, PackageManagerService.this.mContainerService.calculateInstalledSize(this.origin.resolvedPath, isForwardLocked(), this.packageAbiOverride) + StorageManager.from(PackageManagerService.this.mContext).getStorageLowBytes(Environment.getDataDirectory()));
                        pkgLite = PackageManagerService.this.mContainerService.getMinimalPackageInfo(this.origin.resolvedPath, this.installFlags, this.packageAbiOverride);
                    } catch (InstallerException e) {
                        Slog.w(PackageManagerService.TAG, "Failed to free cache", e);
                    }
                    if (pkgLite.recommendedInstallLocation == -6) {
                        pkgLite.recommendedInstallLocation = -1;
                    }
                }
            }
            if (PackageManagerService.EXP_VERSION && !PackageManagerService.this.checkAppInstallPermission(pkgLite.packageName)) {
                Slog.i(PackageManagerService.TAG, pkgLite.packageName + " checked failed!");
                ret = -2;
            }
            if (ret == 1) {
                int loc = pkgLite.recommendedInstallLocation;
                if (loc == -3) {
                    ret = -19;
                } else if (loc == -4) {
                    ret = -1;
                } else if (loc == -1) {
                    ret = -4;
                } else if (loc == -2) {
                    ret = -2;
                } else if (loc == -6) {
                    ret = -3;
                } else if (loc == -5) {
                    ret = -20;
                } else {
                    loc = installLocationPolicy(pkgLite);
                    if (loc == -7) {
                        ret = -25;
                    } else if (!(onSd || onInt) || OppoPackageManagerHelper.mForceToSD) {
                        OppoPackageManagerHelper.mForceToSD = false;
                        if (loc == 2) {
                            this.installFlags |= 8;
                            this.installFlags &= -17;
                        } else if (loc == 3) {
                            if (PackageManagerService.DEBUG_EPHEMERAL) {
                                Slog.v(PackageManagerService.TAG, "...setting INSTALL_EPHEMERAL install flag");
                            }
                            this.installFlags |= 2048;
                            this.installFlags &= -25;
                        } else {
                            this.installFlags |= 16;
                            this.installFlags &= -9;
                        }
                    }
                }
                if (LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get("ro.mtk_select_ins_loc")) && this.volumeUuid == null) {
                    String volumeuuid = null;
                    try {
                        volumeuuid = PackageHelper.resolveInstallVolume(PackageManagerService.this.mContext, this.installerPackageName, pkgLite.installLocation, PackageManagerService.this.mContainerService.calculateInstalledSize(this.origin.resolvedPath, isForwardLocked(), this.packageAbiOverride));
                        this.volumeUuid = volumeuuid;
                    } catch (IOException e2) {
                        Slog.w(PackageManagerService.TAG, "Exception happend: " + e2);
                    } finally {
                        this.volumeUuid = null;
                    }
                    Slog.w(PackageManagerService.TAG, "Best volume for " + this.installerPackageName + " : " + volumeuuid);
                }
            }
            InstallArgs args = PackageManagerService.this.createInstallArgs(this);
            args.abiOverride = PackageManagerService.this.mCompatibilityHelper.abiOverride(args.abiOverride, pkgLite.packageName);
            this.mArgs = args;
            if (ret == 1) {
                int requiredUid;
                UserHandle verifierUser = getUser();
                if (verifierUser == UserHandle.ALL) {
                    verifierUser = UserHandle.SYSTEM;
                }
                if (PackageManagerService.this.mRequiredVerifierPackage == null) {
                    requiredUid = -1;
                } else {
                    requiredUid = PackageManagerService.this.getPackageUid(PackageManagerService.this.mRequiredVerifierPackage, 268435456, verifierUser.getIdentifier());
                }
                if (this.origin.existing || requiredUid == -1 || !PackageManagerService.this.isVerificationEnabled(verifierUser.getIdentifier(), this.installFlags)) {
                    ret = args.copyApk(PackageManagerService.this.mContainerService, true);
                } else {
                    Intent verification = new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION");
                    verification.addFlags(268435456);
                    verification.setDataAndType(Uri.fromFile(new File(this.origin.resolvedPath)), PackageManagerService.PACKAGE_MIME_TYPE);
                    verification.addFlags(1);
                    List<ResolveInfo> receivers = PackageManagerService.this.queryIntentReceiversInternal(verification, PackageManagerService.PACKAGE_MIME_TYPE, 0, verifierUser.getIdentifier());
                    if (PackageManagerService.DEBUG_VERIFY) {
                        Slog.d(PackageManagerService.TAG, "Found " + receivers.size() + " verifiers for intent " + verification.toString() + " with " + pkgLite.verifiers.length + " optional verifiers");
                    }
                    PackageManagerService packageManagerService = PackageManagerService.this;
                    int verificationId = packageManagerService.mPendingVerificationToken;
                    packageManagerService.mPendingVerificationToken = verificationId + 1;
                    verification.putExtra("android.content.pm.extra.VERIFICATION_ID", verificationId);
                    verification.putExtra("android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE", this.installerPackageName);
                    verification.putExtra("android.content.pm.extra.VERIFICATION_INSTALL_FLAGS", this.installFlags);
                    verification.putExtra("android.content.pm.extra.VERIFICATION_PACKAGE_NAME", pkgLite.packageName);
                    verification.putExtra("android.content.pm.extra.VERIFICATION_VERSION_CODE", pkgLite.versionCode);
                    if (this.verificationInfo != null) {
                        if (this.verificationInfo.originatingUri != null) {
                            verification.putExtra("android.intent.extra.ORIGINATING_URI", this.verificationInfo.originatingUri);
                        }
                        if (this.verificationInfo.referrer != null) {
                            verification.putExtra("android.intent.extra.REFERRER", this.verificationInfo.referrer);
                        }
                        if (this.verificationInfo.originatingUid >= 0) {
                            verification.putExtra("android.intent.extra.ORIGINATING_UID", this.verificationInfo.originatingUid);
                        }
                        if (this.verificationInfo.installerUid >= 0) {
                            verification.putExtra("android.content.pm.extra.VERIFICATION_INSTALLER_UID", this.verificationInfo.installerUid);
                        }
                    }
                    PackageVerificationState packageVerificationState = new PackageVerificationState(requiredUid, args);
                    PackageManagerService.this.mPendingVerification.append(verificationId, packageVerificationState);
                    List<ComponentName> sufficientVerifiers = PackageManagerService.this.matchVerifiers(pkgLite, receivers, packageVerificationState);
                    if (sufficientVerifiers != null) {
                        int N = sufficientVerifiers.size();
                        if (N == 0) {
                            Slog.i(PackageManagerService.TAG, "Additional verifiers required, but none installed.");
                            ret = -22;
                        } else {
                            for (int i = 0; i < N; i++) {
                                ComponentName verifierComponent = (ComponentName) sufficientVerifiers.get(i);
                                Intent intent = new Intent(verification);
                                intent.setComponent(verifierComponent);
                                PackageManagerService.this.mContext.sendBroadcastAsUser(intent, verifierUser);
                            }
                        }
                    }
                    ComponentName requiredVerifierComponent = PackageManagerService.this.matchComponentForVerifier(PackageManagerService.this.mRequiredVerifierPackage, receivers);
                    if (ret == 1 && PackageManagerService.this.mRequiredVerifierPackage != null) {
                        Trace.asyncTraceBegin(1048576, "verification", verificationId);
                        verification.setComponent(requiredVerifierComponent);
                        final int i2 = verificationId;
                        PackageManagerService.this.mContext.sendOrderedBroadcastAsUser(verification, verifierUser, "android.permission.PACKAGE_VERIFICATION_AGENT", new BroadcastReceiver() {
                            public void onReceive(Context context, Intent intent) {
                                Message msg = PackageManagerService.this.mHandler.obtainMessage(16);
                                msg.arg1 = i2;
                                PackageManagerService.this.mHandler.sendMessageDelayed(msg, PackageManagerService.this.getVerificationTimeout());
                            }
                        }, null, 0, null, null);
                        this.mArgs = null;
                    }
                }
            }
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.i(PackageManagerService.TAG, "Apk copy done");
            }
            this.mRet = ret;
        }

        void handleReturnCode() {
            if (this.mArgs != null) {
                PackageManagerService.this.processPendingInstall(this.mArgs, this.mRet);
            }
        }

        void handleServiceError() {
            this.mArgs = PackageManagerService.this.createInstallArgs(this);
            this.mRet = -110;
        }

        public boolean isForwardLocked() {
            return (this.installFlags & 1) != 0;
        }
    }

    private interface IntentFilterVerifier<T extends IntentFilter> {
        boolean addOneIntentFilterVerification(int i, int i2, int i3, T t, String str);

        void receiveVerificationResponse(int i);

        void startVerifications(int i);
    }

    private class IntentVerifierProxy implements IntentFilterVerifier<ActivityIntentInfo> {
        private Context mContext;
        private ArrayList<Integer> mCurrentIntentFilterVerifications = new ArrayList();
        private ComponentName mIntentFilterVerifierComponent;

        public IntentVerifierProxy(Context context, ComponentName verifierComponent) {
            this.mContext = context;
            this.mIntentFilterVerifierComponent = verifierComponent;
        }

        private String getDefaultScheme() {
            return "https";
        }

        public void startVerifications(int userId) {
            int count = this.mCurrentIntentFilterVerifications.size();
            for (int n = 0; n < count; n++) {
                int verificationId = ((Integer) this.mCurrentIntentFilterVerifications.get(n)).intValue();
                IntentFilterVerificationState ivs = (IntentFilterVerificationState) PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
                String packageName = ivs.getPackageName();
                ArrayList<ActivityIntentInfo> filters = ivs.getFilters();
                int filterCount = filters.size();
                ArraySet<String> domainsSet = new ArraySet();
                for (int m = 0; m < filterCount; m++) {
                    domainsSet.addAll(((ActivityIntentInfo) filters.get(m)).getHostsList());
                }
                ArrayList<String> domainsList = new ArrayList(domainsSet);
                synchronized (PackageManagerService.this.mPackages) {
                    if (PackageManagerService.this.mSettings.createIntentFilterVerificationIfNeededLPw(packageName, domainsList) != null) {
                        PackageManagerService.this.scheduleWriteSettingsLocked();
                    }
                }
                sendVerificationRequest(userId, verificationId, ivs);
            }
            this.mCurrentIntentFilterVerifications.clear();
        }

        private void sendVerificationRequest(int userId, int verificationId, IntentFilterVerificationState ivs) {
            Intent verificationIntent = new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION");
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_ID", verificationId);
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_URI_SCHEME", getDefaultScheme());
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_HOSTS", ivs.getHostsString());
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_PACKAGE_NAME", ivs.getPackageName());
            verificationIntent.setComponent(this.mIntentFilterVerifierComponent);
            verificationIntent.addFlags(268435456);
            this.mContext.sendBroadcastAsUser(verificationIntent, new UserHandle(userId));
            if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(PackageManagerService.TAG, "Sending IntentFilter verification broadcast");
            }
        }

        public void receiveVerificationResponse(int verificationId) {
            IntentFilterVerificationInfo ivi;
            IntentFilterVerificationState ivs = (IntentFilterVerificationState) PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
            boolean verified = ivs.isVerified();
            ArrayList<ActivityIntentInfo> filters = ivs.getFilters();
            int count = filters.size();
            if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                Slog.i(PackageManagerService.TAG, "Received verification response " + verificationId + " for " + count + " filters, verified=" + verified);
            }
            for (int n = 0; n < count; n++) {
                ActivityIntentInfo filter = (ActivityIntentInfo) filters.get(n);
                filter.setVerified(verified);
                if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                    Slog.d(PackageManagerService.TAG, "IntentFilter " + filter.toString() + " verified with result:" + verified + " and hosts:" + ivs.getHostsString());
                }
            }
            PackageManagerService.this.mIntentFilterVerificationStates.remove(verificationId);
            String packageName = ivs.getPackageName();
            synchronized (PackageManagerService.this.mPackages) {
                ivi = PackageManagerService.this.mSettings.getIntentFilterVerificationLPr(packageName);
            }
            if (ivi == null) {
                Slog.w(PackageManagerService.TAG, "IntentFilterVerificationInfo not found for verificationId:" + verificationId + " packageName:" + packageName);
                return;
            }
            if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(PackageManagerService.TAG, "Updating IntentFilterVerificationInfo for package " + packageName + " verificationId:" + verificationId);
            }
            synchronized (PackageManagerService.this.mPackages) {
                if (verified) {
                    ivi.setStatus(2);
                } else {
                    ivi.setStatus(1);
                }
                PackageManagerService.this.scheduleWriteSettingsLocked();
                int userId = ivs.getUserId();
                if (userId != -1) {
                    int updatedStatus = 0;
                    boolean needUpdate = false;
                    switch (PackageManagerService.this.mSettings.getIntentFilterVerificationStatusLPr(packageName, userId)) {
                        case 0:
                            if (verified) {
                                updatedStatus = 2;
                            } else {
                                updatedStatus = 1;
                            }
                            needUpdate = true;
                            break;
                        case 1:
                            if (verified) {
                                updatedStatus = 2;
                                needUpdate = true;
                                break;
                            }
                            break;
                    }
                    if (needUpdate) {
                        PackageManagerService.this.mSettings.updateIntentFilterVerificationStatusLPw(packageName, updatedStatus, userId);
                        PackageManagerService.this.scheduleWritePackageRestrictionsLocked(userId);
                    }
                }
            }
        }

        public boolean addOneIntentFilterVerification(int verifierUid, int userId, int verificationId, ActivityIntentInfo filter, String packageName) {
            if (!PackageManagerService.hasValidDomains(filter)) {
                return false;
            }
            IntentFilterVerificationState ivs = (IntentFilterVerificationState) PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
            if (ivs == null) {
                ivs = createDomainVerificationState(verifierUid, userId, verificationId, packageName);
            }
            if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(PackageManagerService.TAG, "Adding verification filter for " + packageName + ": " + filter);
            }
            ivs.addFilter(filter);
            return true;
        }

        private IntentFilterVerificationState createDomainVerificationState(int verifierUid, int userId, int verificationId, String packageName) {
            IntentFilterVerificationState ivs = new IntentFilterVerificationState(verifierUid, userId, packageName);
            ivs.setPendingState();
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mIntentFilterVerificationStates.append(verificationId, ivs);
                this.mCurrentIntentFilterVerifications.add(Integer.valueOf(verificationId));
            }
            return ivs;
        }
    }

    class MeasureParams extends HandlerParams {
        private boolean backgroundThreadIsRunning = false;
        private final IPackageStatsObserver mObserver;
        private final PackageStats mStats;
        private boolean mSuccess;
        private int threadState = 0;

        public MeasureParams(PackageStats stats, IPackageStatsObserver observer) {
            super(new UserHandle(stats.userHandle));
            this.mObserver = observer;
            this.mStats = stats;
        }

        public String toString() {
            return "MeasureParams{" + Integer.toHexString(System.identityHashCode(this)) + " " + this.mStats.packageName + "}";
        }

        void handleStartCopy() throws RemoteException {
            synchronized (PackageManagerService.this.mInstallLock) {
                this.mSuccess = PackageManagerService.this.getPackageSizeInfoLI(this.mStats.packageName, this.mStats.userHandle, this.mStats);
            }
            if (this.mSuccess) {
                boolean mounted = false;
                try {
                    String status = Environment.getExternalStorageState();
                    if ("mounted".equals(status)) {
                        mounted = true;
                    } else {
                        mounted = "mounted_ro".equals(status);
                    }
                } catch (Exception e) {
                }
                if (mounted) {
                    final Object lock = new Object();
                    Thread backgroundThread = new Thread(new Runnable() {
                        public void run() {
                            try {
                                long BGThreadStartTime = SystemClock.uptimeMillis();
                                UserEnvironment userEnv = new UserEnvironment(MeasureParams.this.mStats.userHandle);
                                MeasureParams.this.mStats.externalCacheSize = PackageManagerService.calculateDirectorySize(PackageManagerService.this.mContainerService, userEnv.buildExternalStorageAppCacheDirs(MeasureParams.this.mStats.packageName));
                                MeasureParams.this.mStats.externalDataSize = PackageManagerService.calculateDirectorySize(PackageManagerService.this.mContainerService, userEnv.buildExternalStorageAppDataDirs(MeasureParams.this.mStats.packageName));
                                PackageStats -get0 = MeasureParams.this.mStats;
                                -get0.externalDataSize -= MeasureParams.this.mStats.externalCacheSize;
                                MeasureParams.this.mStats.externalMediaSize = PackageManagerService.calculateDirectorySize(PackageManagerService.this.mContainerService, userEnv.buildExternalStorageAppMediaDirs(MeasureParams.this.mStats.packageName));
                                MeasureParams.this.mStats.externalObbSize = PackageManagerService.calculateDirectorySize(PackageManagerService.this.mContainerService, userEnv.buildExternalStorageAppObbDirs(MeasureParams.this.mStats.packageName));
                                long costTime = SystemClock.uptimeMillis() - BGThreadStartTime;
                                if (costTime > 30000) {
                                    Slog.e(PackageManagerService.TAG, "backgroundThread calcaulate " + MeasureParams.this.mStats.packageName + " timeout, cost time = " + costTime);
                                }
                                synchronized (lock) {
                                    MeasureParams.this.backgroundThreadIsRunning = false;
                                    lock.notify();
                                }
                            } catch (RemoteException e) {
                                Slog.e(PackageManagerService.TAG, "backgroundThread catch RemoteException " + e);
                                MeasureParams.this.threadState = 1;
                            } catch (IllegalArgumentException e2) {
                                Slog.e(PackageManagerService.TAG, "backgroundThread catch IllegalArgumentException " + e2);
                                MeasureParams.this.threadState = 1;
                            } catch (NullPointerException e3) {
                                Slog.e(PackageManagerService.TAG, "backgroundThread catch NullPointerException " + e3);
                            }
                        }
                    });
                    if (PackageManagerService.this.mbadCalcPackageCache.size() > 0) {
                        Slog.w(PackageManagerService.TAG, "backgroundThread badCache is not empty");
                        for (String cacheName : PackageManagerService.this.mbadCalcPackageCache) {
                            if (cacheName.equals(this.mStats.packageName)) {
                                Slog.w(PackageManagerService.TAG, "backgroundThread current package " + this.mStats.packageName + " is in the badCached");
                                return;
                            }
                        }
                    }
                    synchronized (lock) {
                        try {
                            this.threadState = 0;
                            this.backgroundThreadIsRunning = true;
                            backgroundThread.start();
                            lock.wait(30000);
                            if (this.threadState == 1) {
                                this.threadState = 0;
                                this.backgroundThreadIsRunning = false;
                                throw new RemoteException("backgroundThread catch RemoteException");
                            }
                            if (this.backgroundThreadIsRunning) {
                                Slog.w(PackageManagerService.TAG, "backgroundThread is running, calculateDirectorySize 30s timeout");
                                PackageManagerService.this.mHandler.sendEmptyMessage(11);
                                Slog.w(PackageManagerService.TAG, "backgroundThread give up " + this.mStats.packageName + " measure");
                                backgroundThread.interrupt();
                                this.backgroundThreadIsRunning = false;
                                ((ActivityManager) PackageManagerService.this.mContext.getSystemService("activity")).forceStopPackage(PackageManagerService.DEFAULT_CONTAINER_PACKAGE);
                                PackageManagerService.this.mbadCalcPackageCache.add(this.mStats.packageName);
                                try {
                                    Thread.sleep(2000);
                                } catch (InterruptedException e2) {
                                }
                                throw new RemoteException("default container service CalculateDirectory timeout");
                            }
                        } catch (InterruptedException e3) {
                            e3.printStackTrace();
                        }
                    }
                }
            }
            return;
        }

        void handleReturnCode() {
            if (this.mObserver != null) {
                try {
                    this.mObserver.onGetStatsCompleted(this.mStats, this.mSuccess);
                } catch (RemoteException e) {
                    Slog.i(PackageManagerService.TAG, "Observer no longer exists.");
                }
            }
        }

        void handleServiceError() {
            Slog.e(PackageManagerService.TAG, "Could not measure application " + this.mStats.packageName + " external storage");
        }
    }

    private static class MoveCallbacks extends Handler {
        private static final int MSG_CREATED = 1;
        private static final int MSG_STATUS_CHANGED = 2;
        private final RemoteCallbackList<IPackageMoveObserver> mCallbacks = new RemoteCallbackList();
        private final SparseIntArray mLastStatus = new SparseIntArray();

        public MoveCallbacks(Looper looper) {
            super(looper);
        }

        public void register(IPackageMoveObserver callback) {
            this.mCallbacks.register(callback);
        }

        public void unregister(IPackageMoveObserver callback) {
            this.mCallbacks.unregister(callback);
        }

        public void handleMessage(Message msg) {
            SomeArgs args = msg.obj;
            int n = this.mCallbacks.beginBroadcast();
            for (int i = 0; i < n; i++) {
                try {
                    invokeCallback((IPackageMoveObserver) this.mCallbacks.getBroadcastItem(i), msg.what, args);
                } catch (RemoteException e) {
                }
            }
            this.mCallbacks.finishBroadcast();
            args.recycle();
        }

        private void invokeCallback(IPackageMoveObserver callback, int what, SomeArgs args) throws RemoteException {
            switch (what) {
                case 1:
                    callback.onCreated(args.argi1, (Bundle) args.arg2);
                    return;
                case 2:
                    callback.onStatusChanged(args.argi1, args.argi2, ((Long) args.arg3).longValue());
                    return;
                default:
                    return;
            }
        }

        private void notifyCreated(int moveId, Bundle extras) {
            Slog.v(PackageManagerService.TAG, "Move " + moveId + " created " + extras.toString());
            SomeArgs args = SomeArgs.obtain();
            args.argi1 = moveId;
            args.arg2 = extras;
            obtainMessage(1, args).sendToTarget();
        }

        private void notifyStatusChanged(int moveId, int status) {
            notifyStatusChanged(moveId, status, -1);
        }

        private void notifyStatusChanged(int moveId, int status, long estMillis) {
            Slog.v(PackageManagerService.TAG, "Move " + moveId + " status " + status);
            SomeArgs args = SomeArgs.obtain();
            args.argi1 = moveId;
            args.argi2 = status;
            args.arg3 = Long.valueOf(estMillis);
            obtainMessage(2, args).sendToTarget();
            synchronized (this.mLastStatus) {
                this.mLastStatus.put(moveId, status);
            }
        }
    }

    static class MoveInfo {
        final int appId;
        final String dataAppName;
        final String fromUuid;
        final int moveId;
        final String packageName;
        final String seinfo;
        final int targetSdkVersion;
        final String toUuid;

        public MoveInfo(int moveId, String fromUuid, String toUuid, String packageName, String dataAppName, int appId, String seinfo, int targetSdkVersion) {
            this.moveId = moveId;
            this.fromUuid = fromUuid;
            this.toUuid = toUuid;
            this.packageName = packageName;
            this.dataAppName = dataAppName;
            this.appId = appId;
            this.seinfo = seinfo;
            this.targetSdkVersion = targetSdkVersion;
        }
    }

    class MoveInstallArgs extends InstallArgs {
        private File codeFile;
        private File resourceFile;

        MoveInstallArgs(InstallParams params) {
            super(params.origin, params.move, params.observer, params.installFlags, params.installerPackageName, params.volumeUuid, params.getUser(), null, params.packageAbiOverride, params.grantedRuntimePermissions, params.traceMethod, params.traceCookie, params.certificates);
        }

        int copyApk(IMediaContainerService imcs, boolean temp) {
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.d(PackageManagerService.TAG, "Moving " + this.move.packageName + " from " + this.move.fromUuid + " to " + this.move.toUuid);
            }
            synchronized (PackageManagerService.this.mInstaller) {
                try {
                    PackageManagerService.this.mInstaller.moveCompleteApp(this.move.fromUuid, this.move.toUuid, this.move.packageName, this.move.dataAppName, this.move.appId, this.move.seinfo, this.move.targetSdkVersion);
                } catch (InstallerException e) {
                    Slog.w(PackageManagerService.TAG, "Failed to move app", e);
                    return -110;
                }
            }
            this.codeFile = new File(Environment.getDataAppDirectory(this.move.toUuid), this.move.dataAppName);
            this.resourceFile = this.codeFile;
            if (PackageManagerService.DEBUG_INSTALL) {
                Slog.d(PackageManagerService.TAG, "codeFile after move is " + this.codeFile);
            }
            return 1;
        }

        int doPreInstall(int status) {
            if (status != 1) {
                cleanUp(this.move.toUuid);
            }
            return status;
        }

        boolean doRename(int status, Package pkg, String oldCodePath) {
            if (status != 1) {
                cleanUp(this.move.toUuid);
                return false;
            }
            pkg.setApplicationVolumeUuid(pkg.volumeUuid);
            pkg.setApplicationInfoCodePath(pkg.codePath);
            pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
            pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
            pkg.setApplicationInfoResourcePath(pkg.codePath);
            pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);
            pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
            return true;
        }

        int doPostInstall(int status, int uid) {
            if (status == 1) {
                cleanUp(this.move.fromUuid);
            } else {
                cleanUp(this.move.toUuid);
            }
            return status;
        }

        String getCodePath() {
            return this.codeFile != null ? this.codeFile.getAbsolutePath() : null;
        }

        String getResourcePath() {
            return this.resourceFile != null ? this.resourceFile.getAbsolutePath() : null;
        }

        private boolean cleanUp(String volumeUuid) {
            File codeFile = new File(Environment.getDataAppDirectory(volumeUuid), this.move.dataAppName);
            Slog.d(PackageManagerService.TAG, "Cleaning up " + this.move.packageName + " on " + volumeUuid);
            synchronized (PackageManagerService.this.mInstallLock) {
                for (int userId : PackageManagerService.sUserManager.getUserIds()) {
                    try {
                        PackageManagerService.this.mInstaller.destroyAppData(volumeUuid, this.move.packageName, userId, 3, 0);
                    } catch (InstallerException e) {
                        Slog.w(PackageManagerService.TAG, String.valueOf(e));
                    }
                }
                PackageManagerService.this.removeCodePathLI(codeFile);
            }
            return true;
        }

        void cleanUpResourcesLI() {
            throw new UnsupportedOperationException();
        }

        boolean doPostDeleteLI(boolean delete) {
            throw new UnsupportedOperationException();
        }
    }

    private static final class OnPermissionChangeListeners extends Handler {
        private static final int MSG_ON_PERMISSIONS_CHANGED = 1;
        private final RemoteCallbackList<IOnPermissionsChangeListener> mPermissionListeners = new RemoteCallbackList();

        public OnPermissionChangeListeners(Looper looper) {
            super(looper);
        }

        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 1:
                    handleOnPermissionsChanged(msg.arg1);
                    return;
                default:
                    return;
            }
        }

        public void addListenerLocked(IOnPermissionsChangeListener listener) {
            this.mPermissionListeners.register(listener);
        }

        public void removeListenerLocked(IOnPermissionsChangeListener listener) {
            this.mPermissionListeners.unregister(listener);
        }

        public void onPermissionsChanged(int uid) {
            if (this.mPermissionListeners.getRegisteredCallbackCount() > 0) {
                obtainMessage(1, uid, 0).sendToTarget();
            }
        }

        private void handleOnPermissionsChanged(int uid) {
            int count = this.mPermissionListeners.beginBroadcast();
            for (int i = 0; i < count; i++) {
                try {
                    ((IOnPermissionsChangeListener) this.mPermissionListeners.getBroadcastItem(i)).onPermissionsChanged(uid);
                } catch (RemoteException e) {
                    Log.e(PackageManagerService.TAG, "Permission listener is dead", e);
                } catch (Throwable th) {
                    this.mPermissionListeners.finishBroadcast();
                }
            }
            this.mPermissionListeners.finishBroadcast();
        }
    }

    static class OriginInfo {
        final String cid;
        final boolean existing;
        final File file;
        final File resolvedFile;
        final String resolvedPath;
        final boolean staged;

        static OriginInfo fromNothing() {
            return new OriginInfo(null, null, false, false);
        }

        static OriginInfo fromUntrustedFile(File file) {
            return new OriginInfo(file, null, false, false);
        }

        static OriginInfo fromExistingFile(File file) {
            return new OriginInfo(file, null, false, true);
        }

        static OriginInfo fromStagedFile(File file) {
            return new OriginInfo(file, null, true, false);
        }

        static OriginInfo fromStagedContainer(String cid) {
            return new OriginInfo(null, cid, true, false);
        }

        private OriginInfo(File file, String cid, boolean staged, boolean existing) {
            this.file = file;
            this.cid = cid;
            this.staged = staged;
            this.existing = existing;
            if (cid != null) {
                this.resolvedPath = PackageHelper.getSdDir(cid);
                this.resolvedFile = new File(this.resolvedPath);
            } else if (file != null) {
                this.resolvedPath = file.getAbsolutePath();
                this.resolvedFile = file;
            } else {
                this.resolvedPath = null;
                this.resolvedFile = null;
            }
        }
    }

    private class PackageFreezer implements AutoCloseable {
        private final PackageFreezer[] mChildren;
        private final CloseGuard mCloseGuard;
        private final AtomicBoolean mClosed;
        private final String mPackageName;
        private final boolean mWeFroze;

        public PackageFreezer() {
            this.mClosed = new AtomicBoolean();
            this.mCloseGuard = CloseGuard.get();
            this.mPackageName = null;
            this.mChildren = null;
            this.mWeFroze = false;
            this.mCloseGuard.open("close");
        }

        public PackageFreezer(String packageName, int userId, String killReason) {
            this.mClosed = new AtomicBoolean();
            this.mCloseGuard = CloseGuard.get();
            synchronized (PackageManagerService.this.mPackages) {
                this.mPackageName = packageName;
                this.mWeFroze = PackageManagerService.this.mFrozenPackages.add(this.mPackageName);
                PackageSetting ps = (PackageSetting) PackageManagerService.this.mSettings.mPackages.get(this.mPackageName);
                if (ps != null) {
                    PackageManagerService.this.killApplication(ps.name, ps.appId, userId, killReason);
                }
                Package p = (Package) PackageManagerService.this.mPackages.get(packageName);
                if (p == null || p.childPackages == null) {
                    this.mChildren = null;
                } else {
                    int N = p.childPackages.size();
                    this.mChildren = new PackageFreezer[N];
                    for (int i = 0; i < N; i++) {
                        this.mChildren[i] = new PackageFreezer(((Package) p.childPackages.get(i)).packageName, userId, killReason);
                    }
                }
            }
            this.mCloseGuard.open("close");
        }

        protected void finalize() throws Throwable {
            try {
                this.mCloseGuard.warnIfOpen();
                close();
            } finally {
                super.finalize();
            }
        }

        public void close() {
            int i = 0;
            this.mCloseGuard.close();
            if (this.mClosed.compareAndSet(false, true)) {
                synchronized (PackageManagerService.this.mPackages) {
                    if (this.mWeFroze) {
                        PackageManagerService.this.mFrozenPackages.remove(this.mPackageName);
                    }
                    if (this.mChildren != null) {
                        PackageFreezer[] packageFreezerArr = this.mChildren;
                        int length = packageFreezerArr.length;
                        while (i < length) {
                            packageFreezerArr[i].close();
                            i++;
                        }
                    }
                }
            }
        }
    }

    class PackageHandler extends Handler {
        private boolean mBound = false;
        final ArrayList<HandlerParams> mPendingInstalls = new ArrayList();

        private boolean connectToService() {
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "Trying to bind to DefaultContainerService");
            }
            Intent service = new Intent().setComponent(PackageManagerService.DEFAULT_CONTAINER_COMPONENT);
            Process.setThreadPriority(0);
            if (PackageManagerService.this.mContext.bindServiceAsUser(service, PackageManagerService.this.mDefContainerConn, 1, UserHandle.SYSTEM)) {
                Process.setThreadPriority(10);
                this.mBound = true;
                PackageManagerService.this.mHandler.sendMessageDelayed(PackageManagerService.this.mHandler.obtainMessage(20), 1000);
                return true;
            }
            Process.setThreadPriority(10);
            return false;
        }

        private void disconnectService() {
            PackageManagerService.this.mContainerService = null;
            this.mBound = false;
            PackageManagerService.this.mServiceConnected = false;
            if (PackageManagerService.DEBUG_SD_INSTALL) {
                Log.i(PackageManagerService.TAG, "disconnectService: " + PackageManagerService.this.mServiceConnected);
            }
            Process.setThreadPriority(0);
            PackageManagerService.this.mContext.unbindService(PackageManagerService.this.mDefContainerConn);
            Process.setThreadPriority(10);
        }

        PackageHandler(Looper looper) {
            super(looper);
        }

        public void handleMessage(Message msg) {
            try {
                doHandleMessage(msg);
            } finally {
                Process.setThreadPriority(10);
            }
        }

        /* JADX WARNING: Missing block: B:144:0x0442, code:
            r32 = 0;
     */
        /* JADX WARNING: Missing block: B:146:0x0448, code:
            if (r32 >= r49) goto L_0x045e;
     */
        /* JADX WARNING: Missing block: B:147:0x044a, code:
            com.android.server.pm.PackageManagerService.-wrap47(r59.this$0, r40[r32], true, r26[r32], r53[r32]);
            r32 = r32 + 1;
     */
        /* JADX WARNING: Missing block: B:151:0x045e, code:
            android.os.Process.setThreadPriority(10);
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        void doHandleMessage(Message msg) {
            int i;
            int uid;
            HandlerParams params;
            Iterator params$iterator;
            int userId;
            InstallArgs args;
            int verificationId;
            PackageVerificationState state;
            Uri originUri;
            int ret;
            switch (msg.what) {
                case 1:
                    Process.setThreadPriority(0);
                    synchronized (PackageManagerService.this.mPackages) {
                        if (PackageManagerService.this.mPendingBroadcasts != null) {
                            int size = PackageManagerService.this.mPendingBroadcasts.size();
                            if (size > 0) {
                                String[] packages = new String[size];
                                ArrayList<String>[] components = new ArrayList[size];
                                int[] uids = new int[size];
                                i = 0;
                                for (int n = 0; n < PackageManagerService.this.mPendingBroadcasts.userIdCount(); n++) {
                                    int packageUserId = PackageManagerService.this.mPendingBroadcasts.userIdAt(n);
                                    Iterator<Entry<String, ArrayList<String>>> it = PackageManagerService.this.mPendingBroadcasts.packagesForUserId(packageUserId).entrySet().iterator();
                                    while (it.hasNext() && i < size) {
                                        Entry<String, ArrayList<String>> ent = (Entry) it.next();
                                        packages[i] = (String) ent.getKey();
                                        components[i] = (ArrayList) ent.getValue();
                                        PackageSetting ps = (PackageSetting) PackageManagerService.this.mSettings.mPackages.get(ent.getKey());
                                        if (ps != null) {
                                            uid = UserHandle.getUid(packageUserId, ps.appId);
                                        } else {
                                            uid = -1;
                                        }
                                        uids[i] = uid;
                                        i++;
                                    }
                                }
                                size = i;
                                PackageManagerService.this.mPendingBroadcasts.clear();
                                break;
                            }
                            return;
                        }
                        return;
                    }
                    break;
                case 3:
                    if (PackageManagerService.DEBUG_UPGRADE) {
                        Slog.i(PackageManagerService.TAG, "mcs_bound");
                    }
                    if (msg.obj != null) {
                        PackageManagerService.this.mContainerService = (IMediaContainerService) msg.obj;
                        Trace.asyncTraceEnd(1048576, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                    }
                    if (PackageManagerService.this.mContainerService != null) {
                        if (this.mPendingInstalls.size() <= 0) {
                            Slog.w(PackageManagerService.TAG, "Empty queue");
                            break;
                        }
                        params = (HandlerParams) this.mPendingInstalls.get(0);
                        if (params != null) {
                            Trace.asyncTraceEnd(1048576, "queueInstall", System.identityHashCode(params));
                            Trace.traceBegin(1048576, "startCopy");
                            if (params.startCopy()) {
                                if (PackageManagerService.DEBUG_UPGRADE) {
                                    Log.i(PackageManagerService.TAG, "Checking for more work or unbind...");
                                }
                                if (this.mPendingInstalls.size() > 0) {
                                    this.mPendingInstalls.remove(0);
                                }
                                if (this.mPendingInstalls.size() != 0) {
                                    if (PackageManagerService.DEBUG_UPGRADE) {
                                        Log.i(PackageManagerService.TAG, "Posting MCS_BOUND for next work");
                                    }
                                    PackageManagerService.this.mHandler.sendEmptyMessage(3);
                                } else if (this.mBound) {
                                    if (PackageManagerService.DEBUG_UPGRADE) {
                                        Log.i(PackageManagerService.TAG, "Posting delayed MCS_UNBIND");
                                    }
                                    removeMessages(6);
                                    sendMessageDelayed(obtainMessage(6), 10000);
                                }
                            }
                            Trace.traceEnd(1048576);
                            break;
                        }
                    } else if (!this.mBound) {
                        Slog.e(PackageManagerService.TAG, "Cannot bind to media container service");
                        params$iterator = this.mPendingInstalls.iterator();
                        if (!params$iterator.hasNext()) {
                            this.mPendingInstalls.clear();
                            break;
                        }
                        params = (HandlerParams) params$iterator.next();
                        params.serviceError();
                        Trace.asyncTraceEnd(1048576, "queueInstall", System.identityHashCode(params));
                        if (params.traceMethod != null) {
                            Trace.asyncTraceEnd(1048576, params.traceMethod, params.traceCookie);
                        }
                        return;
                    } else {
                        Slog.w(PackageManagerService.TAG, "Waiting to connect to media container service");
                        break;
                    }
                    break;
                case 5:
                    params = msg.obj;
                    int idx = this.mPendingInstalls.size();
                    if (PackageManagerService.DEBUG_UPGRADE) {
                        Slog.i(PackageManagerService.TAG, "init_copy idx=" + idx + ": " + params);
                    }
                    if (PackageManagerService.mHyp == null) {
                        PackageManagerService.mHyp = new Hypnus();
                    }
                    if (!(PackageManagerService.mHyp == null || params.toString().indexOf("InstallParams") == -1)) {
                        PackageManagerService.mHyp.hypnusSetAction(15, OppoBrightUtils.HIGH_BRIGHTNESS_MAX_LUX);
                    }
                    if (!this.mBound) {
                        Trace.asyncTraceBegin(1048576, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                        if (connectToService()) {
                            this.mPendingInstalls.add(idx, params);
                            break;
                        }
                        Slog.e(PackageManagerService.TAG, "Failed to bind to media container service");
                        params.serviceError();
                        Trace.asyncTraceEnd(1048576, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                        if (params.traceMethod != null) {
                            Trace.asyncTraceEnd(1048576, params.traceMethod, params.traceCookie);
                        }
                        return;
                    }
                    this.mPendingInstalls.add(idx, params);
                    if (idx == 0) {
                        PackageManagerService.this.mHandler.sendEmptyMessage(3);
                        break;
                    }
                    break;
                case 6:
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Slog.i(PackageManagerService.TAG, "mcs_unbind");
                    }
                    if (this.mPendingInstalls.size() != 0 || PackageManagerService.this.mPendingVerification.size() != 0) {
                        if (this.mPendingInstalls.size() > 0) {
                            PackageManagerService.this.mHandler.sendEmptyMessage(3);
                            break;
                        }
                    } else if (this.mBound) {
                        if (PackageManagerService.DEBUG_INSTALL) {
                            Slog.i(PackageManagerService.TAG, "calling disconnectService()");
                        }
                        disconnectService();
                        break;
                    }
                    break;
                case 7:
                    Process.setThreadPriority(0);
                    String packageName = msg.obj;
                    userId = msg.arg1;
                    boolean andCode = msg.arg2 != 0;
                    synchronized (PackageManagerService.this.mPackages) {
                        if (userId == -1) {
                            for (int user : PackageManagerService.sUserManager.getUserIds()) {
                                PackageManagerService.this.mSettings.addPackageToCleanLPw(new PackageCleanItem(user, packageName, andCode));
                            }
                        } else {
                            PackageManagerService.this.mSettings.addPackageToCleanLPw(new PackageCleanItem(userId, packageName, andCode));
                        }
                    }
                    Process.setThreadPriority(10);
                    PackageManagerService.this.startCleaningPackages();
                    break;
                case 9:
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Log.v(PackageManagerService.TAG, "Handling post-install for " + msg.arg1);
                    }
                    if (PackageManagerService.mHyp != null) {
                        PackageManagerService.mHyp.hypnusSetAction(15, 0);
                    }
                    PostInstallData data = (PostInstallData) PackageManagerService.this.mRunningInstalls.get(msg.arg1);
                    boolean didRestore = msg.arg2 != 0;
                    PackageManagerService.this.mRunningInstalls.delete(msg.arg1);
                    if (data != null) {
                        args = data.args;
                        PackageInstalledInfo parentRes = data.res;
                        boolean grantPermissions = (args.installFlags & 256) != 0;
                        boolean killApp = (args.installFlags & 4096) == 0;
                        String[] grantedPermissions = args.installGrantPermissions;
                        PackageManagerService.this.handlePackagePostInstall(parentRes, grantPermissions, killApp, grantedPermissions, didRestore, args.installerPackageName, args.observer);
                        try {
                            if (parentRes.returnCode < 0) {
                                String str;
                                Slog.v(PackageManagerService.TAG, "install fail");
                                StringBuilder stringBuilder = new StringBuilder(512);
                                if (args.origin == null) {
                                    str = "origin:null\r\n";
                                } else {
                                    str = "origin:" + args.origin.file + "\r\n";
                                }
                                StringBuilder log = stringBuilder.append(str).append("apk install fail ").append("apk name = ").append(parentRes.name).append(" returnCode = ").append(parentRes.returnCode).append(" returnMsg = ").append(parentRes.returnMsg);
                                if (parentRes.pkg != null) {
                                    log.append(" package = ").append(parentRes.pkg.packageName).append(" versionCode = ").append(parentRes.pkg.mVersionCode).append(" versionName = ").append(parentRes.pkg.mVersionName);
                                }
                                OppoManager.writeLogToPartition(OppoManager.TYPE_ANDROID_INSTALL_FAILD, log.toString(), "ANDROID", "install_fail", PackageManagerService.this.mContext.getString(17040934));
                                Slog.v(PackageManagerService.TAG, "record end");
                            }
                        } catch (Exception e) {
                            Slog.v(PackageManagerService.TAG, "record install fail event e = " + e.toString());
                        }
                        int childCount = parentRes.addedChildPackages != null ? parentRes.addedChildPackages.size() : 0;
                        if (PackageManagerService.EXP_VERSION && parentRes.returnCode == 1) {
                            PackageManagerService.this.sendNonSilentInstallBroadcastExp(args.installerPackageName, args.origin, parentRes, childCount, -1);
                        }
                        for (i = 0; i < childCount; i++) {
                            PackageInstalledInfo childRes = (PackageInstalledInfo) parentRes.addedChildPackages.valueAt(i);
                            PackageManagerService.this.handlePackagePostInstall(childRes, grantPermissions, killApp, grantedPermissions, false, args.installerPackageName, args.observer);
                            if (PackageManagerService.EXP_VERSION && childRes.returnCode == 1) {
                                PackageManagerService.this.sendNonSilentInstallBroadcastExp(args.installerPackageName, args.origin, childRes, childCount, i);
                            }
                        }
                        if (args.traceMethod != null) {
                            Trace.asyncTraceEnd(1048576, args.traceMethod, args.traceCookie);
                        }
                    } else {
                        Slog.e(PackageManagerService.TAG, "Bogus post-install token " + msg.arg1);
                    }
                    Trace.asyncTraceEnd(1048576, "postInstall", msg.arg1);
                    break;
                case 10:
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Slog.i(PackageManagerService.TAG, "mcs_reconnect");
                    }
                    if (this.mPendingInstalls.size() > 0) {
                        if (this.mBound) {
                            disconnectService();
                        }
                        if (!connectToService()) {
                            Slog.e(PackageManagerService.TAG, "Failed to bind to media container service");
                            for (HandlerParams params2 : this.mPendingInstalls) {
                                params2.serviceError();
                                Trace.asyncTraceEnd(1048576, "queueInstall", System.identityHashCode(params2));
                            }
                            this.mPendingInstalls.clear();
                            break;
                        }
                    }
                    break;
                case 11:
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Slog.i(PackageManagerService.TAG, "mcs_giveup too many retries");
                    }
                    if (this.mPendingInstalls.size() > 0) {
                        Trace.asyncTraceEnd(1048576, "queueInstall", System.identityHashCode((HandlerParams) this.mPendingInstalls.remove(0)));
                        break;
                    }
                    break;
                case 12:
                    if (PackageManagerService.DEBUG_SD_INSTALL) {
                        Log.i(PackageManagerService.TAG, "Got message UPDATED_MEDIA_STATUS");
                    }
                    boolean reportStatus = msg.arg1 == 1;
                    boolean doGc = msg.arg2 == 1;
                    if (PackageManagerService.DEBUG_SD_INSTALL) {
                        Log.i(PackageManagerService.TAG, "reportStatus=" + reportStatus + ", doGc = " + doGc);
                    }
                    if (doGc) {
                        Runtime.getRuntime().gc();
                    }
                    if (msg.obj != null) {
                        Set<AsecInstallArgs> args2 = msg.obj;
                        if (PackageManagerService.DEBUG_SD_INSTALL) {
                            Log.i(PackageManagerService.TAG, "Unloading all containers");
                        }
                        PackageManagerService.this.unloadAllContainers(args2);
                    }
                    if (reportStatus) {
                        try {
                            if (PackageManagerService.DEBUG_SD_INSTALL) {
                                Log.i(PackageManagerService.TAG, "Invoking MountService call back");
                            }
                            PackageHelper.getMountService().finishMediaUpdate();
                            break;
                        } catch (RemoteException e2) {
                            Log.e(PackageManagerService.TAG, "MountService not running?");
                            break;
                        }
                    }
                    break;
                case 13:
                    Process.setThreadPriority(0);
                    synchronized (PackageManagerService.this.mPackages) {
                        removeMessages(13);
                        removeMessages(14);
                        PackageManagerService.this.mSettings.writeLPr();
                        PackageManagerService.this.mDirtyUsers.clear();
                    }
                    Process.setThreadPriority(10);
                    break;
                case 14:
                    Process.setThreadPriority(0);
                    synchronized (PackageManagerService.this.mPackages) {
                        removeMessages(14);
                        for (Integer intValue : PackageManagerService.this.mDirtyUsers) {
                            PackageManagerService.this.mSettings.writePackageRestrictionsLPr(intValue.intValue());
                        }
                        PackageManagerService.this.mDirtyUsers.clear();
                    }
                    Process.setThreadPriority(10);
                    break;
                case 15:
                    verificationId = msg.arg1;
                    state = (PackageVerificationState) PackageManagerService.this.mPendingVerification.get(verificationId);
                    if (state != null) {
                        PackageVerificationResponse response = msg.obj;
                        state.setVerifierResponse(response.callerUid, response.code);
                        if (state.isVerificationComplete()) {
                            PackageManagerService.this.mPendingVerification.remove(verificationId);
                            args = state.getInstallArgs();
                            originUri = Uri.fromFile(args.origin.resolvedFile);
                            if (state.isInstallAllowed()) {
                                ret = -110;
                                PackageManagerService.this.broadcastPackageVerified(verificationId, originUri, response.code, state.getInstallArgs().getUser());
                                try {
                                    ret = args.copyApk(PackageManagerService.this.mContainerService, true);
                                } catch (RemoteException e3) {
                                    Slog.e(PackageManagerService.TAG, "Could not contact the ContainerService");
                                }
                            } else {
                                ret = -22;
                            }
                            Trace.asyncTraceEnd(1048576, "verification", verificationId);
                            PackageManagerService.this.processPendingInstall(args, ret);
                            PackageManagerService.this.mHandler.sendEmptyMessage(6);
                            break;
                        }
                    }
                    Slog.w(PackageManagerService.TAG, "Invalid verification token " + verificationId + " received");
                    break;
                    break;
                case 16:
                    verificationId = msg.arg1;
                    state = (PackageVerificationState) PackageManagerService.this.mPendingVerification.get(verificationId);
                    if (!(state == null || state.timeoutExtended())) {
                        args = state.getInstallArgs();
                        originUri = Uri.fromFile(args.origin.resolvedFile);
                        Slog.i(PackageManagerService.TAG, "Verification timed out for " + originUri);
                        PackageManagerService.this.mPendingVerification.remove(verificationId);
                        ret = -22;
                        if (PackageManagerService.this.getDefaultVerificationResponse() == 1) {
                            Slog.i(PackageManagerService.TAG, "Continuing with installation of " + originUri);
                            state.setVerifierResponse(Binder.getCallingUid(), 2);
                            PackageManagerService.this.broadcastPackageVerified(verificationId, originUri, 1, state.getInstallArgs().getUser());
                            try {
                                ret = args.copyApk(PackageManagerService.this.mContainerService, true);
                            } catch (RemoteException e4) {
                                Slog.e(PackageManagerService.TAG, "Could not contact the ContainerService");
                            }
                        } else {
                            PackageManagerService.this.broadcastPackageVerified(verificationId, originUri, -1, state.getInstallArgs().getUser());
                        }
                        Trace.asyncTraceEnd(1048576, "verification", verificationId);
                        PackageManagerService.this.processPendingInstall(args, ret);
                        PackageManagerService.this.mHandler.sendEmptyMessage(6);
                        break;
                    }
                case 17:
                    IFVerificationParams params3 = msg.obj;
                    PackageManagerService.this.verifyIntentFiltersIfNeeded(params3.userId, params3.verifierUid, params3.replacing, params3.pkg);
                    break;
                case 18:
                    verificationId = msg.arg1;
                    IntentFilterVerificationState state2 = (IntentFilterVerificationState) PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
                    if (state2 != null) {
                        userId = state2.getUserId();
                        if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                            Slog.d(PackageManagerService.TAG, "Processing IntentFilter verification with token:" + verificationId + " and userId:" + userId);
                        }
                        IntentFilterVerificationResponse response2 = msg.obj;
                        state2.setVerifierResponse(response2.callerUid, response2.code);
                        if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                            Slog.d(PackageManagerService.TAG, "IntentFilter verification with token:" + verificationId + " and userId:" + userId + " is settings verifier response with response code:" + response2.code);
                        }
                        if (response2.code == -1 && PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                            Slog.d(PackageManagerService.TAG, "Domains failing verification: " + response2.getFailedDomainsString());
                        }
                        if (!state2.isVerificationComplete()) {
                            if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
                                Slog.d(PackageManagerService.TAG, "IntentFilter verification with token:" + verificationId + " was not said to be complete");
                                break;
                            }
                        }
                        PackageManagerService.this.mIntentFilterVerifier.receiveVerificationResponse(verificationId);
                        break;
                    }
                    Slog.w(PackageManagerService.TAG, "Invalid IntentFilter verification token " + verificationId + " received");
                    break;
                    break;
                case 19:
                    Process.setThreadPriority(0);
                    synchronized (PackageManagerService.this.mPackages) {
                        removeMessages(19);
                        PackageManagerService.this.mSettings.writePackageListLPr(msg.arg1);
                    }
                    Process.setThreadPriority(10);
                    break;
                case 20:
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Slog.i(PackageManagerService.TAG, "mcs_check");
                    }
                    PackageManagerService packageManagerService = PackageManagerService.this;
                    packageManagerService.mServiceCheck = packageManagerService.mServiceCheck + 1;
                    Slog.i(PackageManagerService.TAG, "mcs_check(" + PackageManagerService.this.mServiceConnected + ", " + PackageManagerService.this.mServiceCheck + ")");
                    if (!PackageManagerService.this.mServiceConnected && PackageManagerService.this.mServiceCheck <= 3) {
                        connectToService();
                        break;
                    }
                case 21:
                    PackageManagerService.this.onPackageAdded((String) msg.obj);
                    break;
                case 22:
                    PackageManagerService.this.onPackageRemoved((String) msg.obj);
                    break;
                case 23:
                    PackageManagerService.this.cacheActivityIconsData(null);
                    PackageManagerService.this.cacheAppIconsData();
                    break;
            }
        }
    }

    static class PackageInstalledInfo {
        ArrayMap<String, PackageInstalledInfo> addedChildPackages;
        String name;
        int[] newUsers;
        String origPackage;
        String origPermission;
        int[] origUsers;
        Package pkg;
        PackageRemovedInfo removedInfo;
        int returnCode;
        String returnMsg;
        int uid;

        PackageInstalledInfo() {
        }

        public void setError(int code, String msg) {
            setReturnCode(code);
            setReturnMessage(msg);
            Slog.w(PackageManagerService.TAG, msg);
        }

        public void setError(String msg, PackageParserException e) {
            setReturnCode(e.error);
            setReturnMessage(ExceptionUtils.getCompleteMessage(msg, e));
            Slog.w(PackageManagerService.TAG, msg, e);
        }

        public void setError(String msg, PackageManagerException e) {
            this.returnCode = e.error;
            setReturnMessage(ExceptionUtils.getCompleteMessage(msg, e));
            Slog.w(PackageManagerService.TAG, msg, e);
        }

        public void setReturnCode(int returnCode) {
            this.returnCode = returnCode;
            int childCount = this.addedChildPackages != null ? this.addedChildPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                ((PackageInstalledInfo) this.addedChildPackages.valueAt(i)).returnCode = returnCode;
            }
        }

        private void setReturnMessage(String returnMsg) {
            this.returnMsg = returnMsg;
            int childCount = this.addedChildPackages != null ? this.addedChildPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                ((PackageInstalledInfo) this.addedChildPackages.valueAt(i)).returnMsg = returnMsg;
            }
        }
    }

    private class PackageManagerInternalImpl extends PackageManagerInternal {
        /* synthetic */ PackageManagerInternalImpl(PackageManagerService this$0, PackageManagerInternalImpl packageManagerInternalImpl) {
            this();
        }

        private PackageManagerInternalImpl() {
        }

        public void setLocationPackagesProvider(PackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setLocationPackagesProviderLPw(provider);
            }
        }

        public void setVoiceInteractionPackagesProvider(PackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setVoiceInteractionPackagesProviderLPw(provider);
            }
        }

        public void setSmsAppPackagesProvider(PackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setSmsAppPackagesProviderLPw(provider);
            }
        }

        public void setDialerAppPackagesProvider(PackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setDialerAppPackagesProviderLPw(provider);
            }
        }

        public void setSimCallManagerPackagesProvider(PackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setSimCallManagerPackagesProviderLPw(provider);
            }
        }

        public void setSyncAdapterPackagesprovider(SyncAdapterPackagesProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.setSyncAdapterPackagesProviderLPw(provider);
            }
        }

        public void grantDefaultPermissionsToDefaultSmsApp(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSmsAppLPr(packageName, userId);
            }
        }

        public void grantDefaultPermissionsToDefaultDialerApp(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mSettings.setDefaultDialerPackageNameLPw(packageName, userId);
                PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultDialerAppLPr(packageName, userId);
            }
        }

        public void grantDefaultPermissionsToDefaultSimCallManager(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSimCallManagerLPr(packageName, userId);
            }
        }

        /* JADX WARNING: Missing block: B:31:0x0069, code:
            return;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void setKeepUninstalledPackages(List<String> packageList) {
            Throwable th;
            Preconditions.checkNotNull(packageList);
            List list = null;
            synchronized (PackageManagerService.this.mPackages) {
                int i;
                if (PackageManagerService.this.mKeepUninstalledPackages != null) {
                    int packagesCount = PackageManagerService.this.mKeepUninstalledPackages.size();
                    i = 0;
                    List<String> removedFromList = null;
                    while (i < packagesCount) {
                        List<String> removedFromList2;
                        try {
                            String oldPackage = (String) PackageManagerService.this.mKeepUninstalledPackages.get(i);
                            if (packageList == null || !packageList.contains(oldPackage)) {
                                if (removedFromList == null) {
                                    removedFromList2 = new ArrayList();
                                } else {
                                    removedFromList2 = removedFromList;
                                }
                                try {
                                    removedFromList2.add(oldPackage);
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            } else {
                                removedFromList2 = removedFromList;
                            }
                            i++;
                            removedFromList = removedFromList2;
                        } catch (Throwable th3) {
                            th = th3;
                            removedFromList2 = removedFromList;
                            throw th;
                        }
                    }
                    list = removedFromList;
                }
                PackageManagerService.this.mKeepUninstalledPackages = new ArrayList(packageList);
                if (list != null) {
                    int removedCount = list.size();
                    for (i = 0; i < removedCount; i++) {
                        PackageManagerService.this.deletePackageIfUnusedLPr((String) list.get(i));
                    }
                }
            }
        }

        /* JADX WARNING: Missing block: B:23:0x006e, code:
            return r2;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public boolean isPermissionsReviewRequired(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                if (Build.isPermissionReviewRequired()) {
                    PackageSetting packageSetting = (PackageSetting) PackageManagerService.this.mSettings.mPackages.get(packageName);
                    if (packageSetting == null) {
                        return false;
                    } else if (packageSetting.pkg.applicationInfo.targetSdkVersion < 23 || CtaUtils.isCtaSupported()) {
                        boolean reviewRequired = packageSetting.getPermissionsState().isPermissionReviewRequired(userId);
                        if (PackageManagerService.this.mCtaPermsController != null) {
                            reviewRequired = PackageManagerService.this.mCtaPermsController.isPermissionReviewRequired(packageSetting.pkg, userId, reviewRequired);
                        }
                        if (reviewRequired) {
                            Slog.d(PackageManagerService.TAG, "packageName = " + packageName + " needs permission review");
                        }
                    } else {
                        return false;
                    }
                }
                return false;
            }
        }

        public ApplicationInfo getApplicationInfo(String packageName, int userId) {
            return PackageManagerService.this.getApplicationInfo(packageName, 0, userId);
        }

        public ComponentName getHomeActivitiesAsUser(List<ResolveInfo> allHomeCandidates, int userId) {
            return PackageManagerService.this.getHomeActivitiesAsUser(allHomeCandidates, userId);
        }

        public void setDeviceAndProfileOwnerPackages(int deviceOwnerUserId, String deviceOwnerPackage, SparseArray<String> profileOwnerPackages) {
            PackageManagerService.this.mProtectedPackages.setDeviceAndProfileOwnerPackages(deviceOwnerUserId, deviceOwnerPackage, profileOwnerPackages);
        }

        public boolean isPackageDataProtected(int userId, String packageName) {
            return PackageManagerService.this.mProtectedPackages.isPackageDataProtected(userId, packageName);
        }

        public boolean wasPackageEverLaunched(String packageName, int userId) {
            boolean wasPackageEverLaunchedLPr;
            synchronized (PackageManagerService.this.mPackages) {
                wasPackageEverLaunchedLPr = PackageManagerService.this.mSettings.wasPackageEverLaunchedLPr(packageName, userId);
            }
            return wasPackageEverLaunchedLPr;
        }

        public void initMtkPermErrorDialog(BeforeShowAppErrorDialog data, AMEventHookResult result) {
            PackageManagerService.this.initMtkPermErrorDialog(data, result);
        }

        public boolean inCptWhiteList(int type, String verifyStr) {
            return PackageManagerService.this.mCompatibilityHelper.isInWhiteList(type, verifyStr);
        }
    }

    class PackageRemovedInfo {
        ArrayMap<String, PackageInstalledInfo> appearedChildPackages;
        InstallArgs args = null;
        boolean dataRemoved;
        boolean isRemovedPackageSystemUpdate = false;
        boolean isUpdate;
        int[] origUsers;
        int removedAppId = -1;
        ArrayMap<String, PackageRemovedInfo> removedChildPackages;
        boolean removedForAllUsers;
        String removedPackage;
        int[] removedUsers = null;
        int uid = -1;

        PackageRemovedInfo() {
        }

        void sendPackageRemovedBroadcasts(boolean killApp) {
            sendPackageRemovedBroadcastInternal(killApp);
            int childCount = this.removedChildPackages != null ? this.removedChildPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                ((PackageRemovedInfo) this.removedChildPackages.valueAt(i)).sendPackageRemovedBroadcastInternal(killApp);
            }
        }

        void sendSystemPackageUpdatedBroadcasts() {
            if (this.isRemovedPackageSystemUpdate) {
                sendSystemPackageUpdatedBroadcastsInternal();
                int childCount = this.removedChildPackages != null ? this.removedChildPackages.size() : 0;
                for (int i = 0; i < childCount; i++) {
                    PackageRemovedInfo childInfo = (PackageRemovedInfo) this.removedChildPackages.valueAt(i);
                    if (childInfo.isRemovedPackageSystemUpdate) {
                        childInfo.sendSystemPackageUpdatedBroadcastsInternal();
                    }
                }
            }
        }

        void sendSystemPackageAppearedBroadcasts() {
            int packageCount = this.appearedChildPackages != null ? this.appearedChildPackages.size() : 0;
            for (int i = 0; i < packageCount; i++) {
                PackageInstalledInfo installedInfo = (PackageInstalledInfo) this.appearedChildPackages.valueAt(i);
                for (int userId : installedInfo.newUsers) {
                    PackageManagerService.this.sendPackageAddedForUser(installedInfo.name, true, UserHandle.getAppId(installedInfo.uid), userId);
                }
            }
        }

        private void sendSystemPackageUpdatedBroadcastsInternal() {
            Bundle extras = new Bundle(2);
            extras.putInt("android.intent.extra.UID", this.removedAppId >= 0 ? this.removedAppId : this.uid);
            extras.putBoolean("android.intent.extra.REPLACING", true);
            PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", this.removedPackage, extras, 0, null, null, null);
            PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_REPLACED", this.removedPackage, extras, 0, null, null, null);
            PackageManagerService.this.sendPackageBroadcast("android.intent.action.MY_PACKAGE_REPLACED", null, null, 0, this.removedPackage, null, null);
        }

        private void sendPackageRemovedBroadcastInternal(boolean killApp) {
            boolean z;
            Bundle extras = new Bundle(2);
            extras.putInt("android.intent.extra.UID", this.removedAppId >= 0 ? this.removedAppId : this.uid);
            extras.putBoolean("android.intent.extra.DATA_REMOVED", this.dataRemoved);
            String str = "android.intent.extra.DONT_KILL_APP";
            if (killApp) {
                z = false;
            } else {
                z = true;
            }
            extras.putBoolean(str, z);
            if (this.isUpdate || this.isRemovedPackageSystemUpdate) {
                extras.putBoolean("android.intent.extra.REPLACING", true);
            }
            extras.putBoolean("android.intent.extra.REMOVED_FOR_ALL_USERS", this.removedForAllUsers);
            if (this.removedPackage != null) {
                PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_REMOVED", this.removedPackage, extras, 0, null, null, this.removedUsers);
                if (this.dataRemoved && !this.isRemovedPackageSystemUpdate) {
                    PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_FULLY_REMOVED", this.removedPackage, extras, 0, null, null, this.removedUsers);
                }
            }
            if (this.removedAppId >= 0) {
                PackageManagerService.this.sendPackageBroadcast("android.intent.action.UID_REMOVED", null, extras, 0, null, null, this.removedUsers);
            }
        }
    }

    static class PendingPackageBroadcasts {
        final SparseArray<ArrayMap<String, ArrayList<String>>> mUidMap = new SparseArray(2);

        public ArrayList<String> get(int userId, String packageName) {
            return (ArrayList) getOrAllocate(userId).get(packageName);
        }

        public void put(int userId, String packageName, ArrayList<String> components) {
            getOrAllocate(userId).put(packageName, components);
        }

        public void remove(int userId, String packageName) {
            ArrayMap<String, ArrayList<String>> packages = (ArrayMap) this.mUidMap.get(userId);
            if (packages != null) {
                packages.remove(packageName);
            }
        }

        public void remove(int userId) {
            this.mUidMap.remove(userId);
        }

        public int userIdCount() {
            return this.mUidMap.size();
        }

        public int userIdAt(int n) {
            return this.mUidMap.keyAt(n);
        }

        public ArrayMap<String, ArrayList<String>> packagesForUserId(int userId) {
            return (ArrayMap) this.mUidMap.get(userId);
        }

        public int size() {
            int num = 0;
            for (int i = 0; i < this.mUidMap.size(); i++) {
                num += ((ArrayMap) this.mUidMap.valueAt(i)).size();
            }
            return num;
        }

        public void clear() {
            this.mUidMap.clear();
        }

        private ArrayMap<String, ArrayList<String>> getOrAllocate(int userId) {
            ArrayMap<String, ArrayList<String>> map = (ArrayMap) this.mUidMap.get(userId);
            if (map != null) {
                return map;
            }
            map = new ArrayMap();
            this.mUidMap.put(userId, map);
            return map;
        }
    }

    static class PostInstallData {
        public InstallArgs args;
        public PackageInstalledInfo res;

        PostInstallData(InstallArgs _a, PackageInstalledInfo _r) {
            this.args = _a;
            this.res = _r;
        }
    }

    private final class ProviderIntentResolver extends IntentResolver<ProviderIntentInfo, ResolveInfo> {
        private int mFlags;
        private final ArrayMap<ComponentName, Provider> mProviders;

        /* synthetic */ ProviderIntentResolver(PackageManagerService this$0, ProviderIntentResolver providerIntentResolver) {
            this();
        }

        private ProviderIntentResolver() {
            this.mProviders = new ArrayMap();
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, boolean defaultOnly, int userId) {
            this.mFlags = defaultOnly ? 65536 : 0;
            return super.queryIntent(intent, resolvedType, defaultOnly, userId);
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, int flags, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            this.mFlags = flags;
            if ((65536 & flags) != 0) {
                z = true;
            }
            return super.queryIntent(intent, resolvedType, z, userId);
        }

        public List<ResolveInfo> queryIntentForPackage(Intent intent, String resolvedType, int flags, ArrayList<Provider> packageProviders, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId) || packageProviders == null) {
                return null;
            }
            this.mFlags = flags;
            boolean defaultOnly = (65536 & flags) != 0;
            int N = packageProviders.size();
            ArrayList<ProviderIntentInfo[]> listCut = new ArrayList(N);
            for (int i = 0; i < N; i++) {
                ArrayList<ProviderIntentInfo> intentFilters = ((Provider) packageProviders.get(i)).intents;
                if (intentFilters != null && intentFilters.size() > 0) {
                    ProviderIntentInfo[] array = new ProviderIntentInfo[intentFilters.size()];
                    intentFilters.toArray(array);
                    listCut.add(array);
                }
            }
            return super.queryIntentFromList(intent, resolvedType, defaultOnly, listCut, userId);
        }

        public final void addProvider(Provider p) {
            if (this.mProviders.containsKey(p.getComponentName())) {
                Slog.w(PackageManagerService.TAG, "Provider " + p.getComponentName() + " already defined; ignoring");
                return;
            }
            this.mProviders.put(p.getComponentName(), p);
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Object obj;
                String str = PackageManagerService.TAG;
                StringBuilder append = new StringBuilder().append("  ");
                if (p.info.nonLocalizedLabel != null) {
                    obj = p.info.nonLocalizedLabel;
                } else {
                    obj = p.info.name;
                }
                Log.v(str, append.append(obj).append(":").toString());
                Log.v(PackageManagerService.TAG, "    Class=" + p.info.name);
            }
            int NI = p.intents.size();
            for (int j = 0; j < NI; j++) {
                ProviderIntentInfo intent = (ProviderIntentInfo) p.intents.get(j);
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                if (!intent.debugCheck()) {
                    Log.w(PackageManagerService.TAG, "==> For Provider " + p.info.name);
                }
                addFilter(intent);
            }
        }

        public final void removeProvider(Provider p) {
            this.mProviders.remove(p.getComponentName());
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Log.v(PackageManagerService.TAG, "  " + (p.info.nonLocalizedLabel != null ? p.info.nonLocalizedLabel : p.info.name) + ":");
                Log.v(PackageManagerService.TAG, "    Class=" + p.info.name);
            }
            int NI = p.intents.size();
            for (int j = 0; j < NI; j++) {
                ProviderIntentInfo intent = (ProviderIntentInfo) p.intents.get(j);
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                removeFilter(intent);
            }
        }

        protected boolean allowFilterResult(ProviderIntentInfo filter, List<ResolveInfo> dest) {
            ProviderInfo filterPi = filter.provider.info;
            for (int i = dest.size() - 1; i >= 0; i--) {
                ProviderInfo destPi = ((ResolveInfo) dest.get(i)).providerInfo;
                if (destPi.name == filterPi.name && destPi.packageName == filterPi.packageName) {
                    return false;
                }
            }
            return true;
        }

        protected ProviderIntentInfo[] newArray(int size) {
            return new ProviderIntentInfo[size];
        }

        protected boolean isFilterStopped(ProviderIntentInfo filter, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return true;
            }
            Package p = filter.provider.owner;
            if (p != null) {
                PackageSetting ps = p.mExtras;
                if (ps != null) {
                    if ((ps.pkgFlags & 1) == 0) {
                        z = ps.getStopped(userId);
                    }
                    return z;
                }
            }
            return false;
        }

        protected boolean isPackageForFilter(String packageName, ProviderIntentInfo info) {
            return packageName.equals(info.provider.owner.packageName);
        }

        protected ResolveInfo newResult(ProviderIntentInfo filter, int match, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            ProviderIntentInfo info = filter;
            if (!PackageManagerService.this.mSettings.isEnabledAndMatchLPr(filter.provider.info, this.mFlags, userId)) {
                return null;
            }
            Provider provider = filter.provider;
            PackageSetting ps = provider.owner.mExtras;
            if (ps == null) {
                return null;
            }
            ProviderInfo pi = PackageParser.generateProviderInfo(provider, this.mFlags, ps.readUserState(userId), userId);
            if (pi == null) {
                return null;
            }
            ResolveInfo res = new ResolveInfo();
            res.providerInfo = pi;
            if ((this.mFlags & 64) != 0) {
                res.filter = filter;
            }
            res.priority = filter.getPriority();
            res.preferredOrder = provider.owner.mPreferredOrder;
            res.match = match;
            res.isDefault = filter.hasDefault;
            res.labelRes = filter.labelRes;
            res.nonLocalizedLabel = filter.nonLocalizedLabel;
            res.icon = filter.icon;
            res.system = res.providerInfo.applicationInfo.isSystemApp();
            return res;
        }

        protected void sortResults(List<ResolveInfo> results) {
            Collections.sort(results, PackageManagerService.mResolvePrioritySorter);
        }

        protected void dumpFilter(PrintWriter out, String prefix, ProviderIntentInfo filter) {
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(filter.provider)));
            out.print(' ');
            filter.provider.printComponentShortName(out);
            out.print(" filter ");
            out.println(Integer.toHexString(System.identityHashCode(filter)));
        }

        protected Object filterToLabel(ProviderIntentInfo filter) {
            return filter.provider;
        }

        protected void dumpFilterLabel(PrintWriter out, String prefix, Object label, int count) {
            Provider provider = (Provider) label;
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(provider)));
            out.print(' ');
            provider.printComponentShortName(out);
            if (count > 1) {
                out.print(" (");
                out.print(count);
                out.print(" filters)");
            }
            out.println();
        }
    }

    private final class ServiceIntentResolver extends IntentResolver<ServiceIntentInfo, ResolveInfo> {
        private int mFlags;
        private final ArrayMap<ComponentName, Service> mServices;

        /* synthetic */ ServiceIntentResolver(PackageManagerService this$0, ServiceIntentResolver serviceIntentResolver) {
            this();
        }

        private ServiceIntentResolver() {
            this.mServices = new ArrayMap();
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, boolean defaultOnly, int userId) {
            this.mFlags = defaultOnly ? 65536 : 0;
            return super.queryIntent(intent, resolvedType, defaultOnly, userId);
        }

        public List<ResolveInfo> queryIntent(Intent intent, String resolvedType, int flags, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            this.mFlags = flags;
            if ((65536 & flags) != 0) {
                z = true;
            }
            return super.queryIntent(intent, resolvedType, z, userId);
        }

        public List<ResolveInfo> queryIntentForPackage(Intent intent, String resolvedType, int flags, ArrayList<Service> packageServices, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId) || packageServices == null) {
                return null;
            }
            this.mFlags = flags;
            boolean defaultOnly = (65536 & flags) != 0;
            int N = packageServices.size();
            ArrayList<ServiceIntentInfo[]> listCut = new ArrayList(N);
            for (int i = 0; i < N; i++) {
                ArrayList<ServiceIntentInfo> intentFilters = ((Service) packageServices.get(i)).intents;
                if (intentFilters != null && intentFilters.size() > 0) {
                    ServiceIntentInfo[] array = new ServiceIntentInfo[intentFilters.size()];
                    intentFilters.toArray(array);
                    listCut.add(array);
                }
            }
            return super.queryIntentFromList(intent, resolvedType, defaultOnly, listCut, userId);
        }

        public final void addService(Service s) {
            this.mServices.put(s.getComponentName(), s);
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Object obj;
                String str = PackageManagerService.TAG;
                StringBuilder append = new StringBuilder().append("  ");
                if (s.info.nonLocalizedLabel != null) {
                    obj = s.info.nonLocalizedLabel;
                } else {
                    obj = s.info.name;
                }
                Log.v(str, append.append(obj).append(":").toString());
                Log.v(PackageManagerService.TAG, "    Class=" + s.info.name);
            }
            int NI = s.intents.size();
            for (int j = 0; j < NI; j++) {
                ServiceIntentInfo intent = (ServiceIntentInfo) s.intents.get(j);
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                if (!intent.debugCheck()) {
                    Log.w(PackageManagerService.TAG, "==> For Service " + s.info.name);
                }
                addFilter(intent);
            }
        }

        public final void removeService(Service s) {
            this.mServices.remove(s.getComponentName());
            if (PackageManagerService.DEBUG_SHOW_INFO) {
                Log.v(PackageManagerService.TAG, "  " + (s.info.nonLocalizedLabel != null ? s.info.nonLocalizedLabel : s.info.name) + ":");
                Log.v(PackageManagerService.TAG, "    Class=" + s.info.name);
            }
            int NI = s.intents.size();
            for (int j = 0; j < NI; j++) {
                ServiceIntentInfo intent = (ServiceIntentInfo) s.intents.get(j);
                if (PackageManagerService.DEBUG_SHOW_INFO) {
                    Log.v(PackageManagerService.TAG, "    IntentFilter:");
                    intent.dump(new LogPrinter(2, PackageManagerService.TAG), "      ");
                }
                removeFilter(intent);
            }
        }

        protected boolean allowFilterResult(ServiceIntentInfo filter, List<ResolveInfo> dest) {
            ServiceInfo filterSi = filter.service.info;
            for (int i = dest.size() - 1; i >= 0; i--) {
                ServiceInfo destAi = ((ResolveInfo) dest.get(i)).serviceInfo;
                if (destAi.name == filterSi.name && destAi.packageName == filterSi.packageName) {
                    return false;
                }
            }
            return true;
        }

        protected ServiceIntentInfo[] newArray(int size) {
            return new ServiceIntentInfo[size];
        }

        protected boolean isFilterStopped(ServiceIntentInfo filter, int userId) {
            boolean z = false;
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return true;
            }
            Package p = filter.service.owner;
            if (p != null) {
                PackageSetting ps = p.mExtras;
                if (ps != null) {
                    if ((ps.pkgFlags & 1) == 0) {
                        z = ps.getStopped(userId);
                    }
                    return z;
                }
            }
            return false;
        }

        protected boolean isPackageForFilter(String packageName, ServiceIntentInfo info) {
            return packageName.equals(info.service.owner.packageName);
        }

        protected ResolveInfo newResult(ServiceIntentInfo filter, int match, int userId) {
            if (!PackageManagerService.sUserManager.exists(userId)) {
                return null;
            }
            ServiceIntentInfo info = filter;
            if (!PackageManagerService.this.mSettings.isEnabledAndMatchLPr(filter.service.info, this.mFlags, userId)) {
                return null;
            }
            Service service = filter.service;
            PackageSetting ps = service.owner.mExtras;
            if (ps == null) {
                return null;
            }
            ServiceInfo si = PackageParser.generateServiceInfo(service, this.mFlags, ps.readUserState(userId), userId);
            if (si == null) {
                return null;
            }
            ResolveInfo res = new ResolveInfo();
            res.serviceInfo = si;
            if ((this.mFlags & 64) != 0) {
                res.filter = filter;
            }
            res.priority = filter.getPriority();
            res.preferredOrder = service.owner.mPreferredOrder;
            res.match = match;
            res.isDefault = filter.hasDefault;
            res.labelRes = filter.labelRes;
            res.nonLocalizedLabel = filter.nonLocalizedLabel;
            res.icon = filter.icon;
            res.system = res.serviceInfo.applicationInfo.isSystemApp();
            return res;
        }

        protected void sortResults(List<ResolveInfo> results) {
            Collections.sort(results, PackageManagerService.mResolvePrioritySorter);
        }

        protected void dumpFilter(PrintWriter out, String prefix, ServiceIntentInfo filter) {
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(filter.service)));
            out.print(' ');
            filter.service.printComponentShortName(out);
            out.print(" filter ");
            out.println(Integer.toHexString(System.identityHashCode(filter)));
        }

        protected Object filterToLabel(ServiceIntentInfo filter) {
            return filter.service;
        }

        protected void dumpFilterLabel(PrintWriter out, String prefix, Object label, int count) {
            Service service = (Service) label;
            out.print(prefix);
            out.print(Integer.toHexString(System.identityHashCode(service)));
            out.print(' ');
            service.printComponentShortName(out);
            if (count > 1) {
                out.print(" (");
                out.print(count);
                out.print(" filters)");
            }
            out.println();
        }
    }

    public static final class SharedLibraryEntry {
        public final String apk;
        public final String path;

        SharedLibraryEntry(String _path, String _apk) {
            this.path = _path;
            this.apk = _apk;
        }
    }

    static class VerificationInfo {
        public static final int NO_UID = -1;
        final int installerUid;
        final int originatingUid;
        final Uri originatingUri;
        final Uri referrer;

        VerificationInfo(Uri originatingUri, Uri referrer, int originatingUid, int installerUid) {
            this.originatingUri = originatingUri;
            this.referrer = referrer;
            this.originatingUid = originatingUid;
            this.installerUid = installerUid;
        }
    }

    /*  JADX ERROR: Method load error
        jadx.core.utils.exceptions.DecodeException: Load method exception: bogus opcode: 00e9 in method: com.android.server.pm.PackageManagerService.<clinit>():void, dex: 
        	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:118)
        	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:248)
        	at jadx.core.ProcessClass.process(ProcessClass.java:29)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        Caused by: java.lang.IllegalArgumentException: bogus opcode: 00e9
        	at com.android.dx.io.OpcodeInfo.get(OpcodeInfo.java:1227)
        	at com.android.dx.io.OpcodeInfo.getName(OpcodeInfo.java:1234)
        	at jadx.core.dex.instructions.InsnDecoder.decode(InsnDecoder.java:581)
        	at jadx.core.dex.instructions.InsnDecoder.process(InsnDecoder.java:74)
        	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:104)
        	... 9 more
        */
    static {
        /*
        // Can't load method instructions: Load method exception: bogus opcode: 00e9 in method: com.android.server.pm.PackageManagerService.<clinit>():void, dex: 
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.<clinit>():void");
    }

    private static boolean hasValidDomains(ActivityIntentInfo filter) {
        if (!filter.hasCategory("android.intent.category.BROWSABLE")) {
            return false;
        }
        if (filter.hasDataScheme("http")) {
            return true;
        }
        return filter.hasDataScheme("https");
    }

    private void handlePackagePostInstall(PackageInstalledInfo res, boolean grantPermissions, boolean killApp, String[] grantedPermissions, boolean launchedForRestore, String installerPackage, IPackageInstallObserver2 installObserver) {
        if (res.returnCode == 1) {
            if (res.removedInfo != null) {
                res.removedInfo.sendPackageRemovedBroadcasts(killApp);
            }
            if (grantPermissions && res.pkg.applicationInfo.targetSdkVersion >= 23) {
                grantRequestedRuntimePermissions(res.pkg, res.newUsers, grantedPermissions);
            }
            boolean update = res.removedInfo != null ? res.removedInfo.removedPackage != null : false;
            if (!update && CtaUtils.isCtaSupported() && res.pkg.applicationInfo.targetSdkVersion >= 23) {
                grantRequestedRuntimePermissions(res.pkg, res.newUsers, CtaUtils.getCtaOnlyPermissions());
            }
            if (res.pkg.parentPackage != null) {
                synchronized (this.mPackages) {
                    grantRuntimePermissionsGrantedToDisabledPrivSysPackageParentLPw(res.pkg);
                }
            }
            synchronized (this.mPackages) {
                this.mEphemeralApplicationRegistry.onPackageInstalledLPw(res.pkg);
            }
            String packageName = res.pkg.applicationInfo.packageName;
            Bundle extras = new Bundle(1);
            extras.putInt("android.intent.extra.UID", res.uid);
            int[] firstUsers = EMPTY_INT_ARRAY;
            int[] updateUsers = EMPTY_INT_ARRAY;
            if (res.origUsers == null || res.origUsers.length == 0) {
                firstUsers = res.newUsers;
            } else {
                for (int newUser : res.newUsers) {
                    boolean isNew = true;
                    for (int i : res.origUsers) {
                        if (i == newUser) {
                            isNew = false;
                            break;
                        }
                    }
                    if (isNew) {
                        firstUsers = ArrayUtils.appendInt(firstUsers, newUser);
                    } else {
                        updateUsers = ArrayUtils.appendInt(updateUsers, newUser);
                    }
                }
            }
            if (!isEphemeral(res.pkg)) {
                this.mProcessLoggingHandler.invalidateProcessLoggingBaseApkHash(res.pkg.baseCodePath);
                sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", packageName, extras, 0, null, null, firstUsers);
                if (update) {
                    extras.putBoolean("android.intent.extra.REPLACING", true);
                }
                sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", packageName, extras, 0, null, null, updateUsers);
                if (!this.mIsCtsAppInstall && ColorPackageManagerHelper.IsCtsApp(res.pkg.applicationInfo.packageName)) {
                    Slog.i(TAG, "Cts pkg : " + res.pkg.applicationInfo.packageName);
                    this.mIsCtsAppInstall = true;
                }
                if (installerPackage != null) {
                    ColorPackageManagerHelper.sendDcsSilentInstallBroadcast(res.pkg.applicationInfo.packageName, extras, installerPackage, 0);
                }
                if (update) {
                    sendPackageBroadcast("android.intent.action.PACKAGE_REPLACED", packageName, extras, 0, null, null, updateUsers);
                    sendPackageBroadcast("android.intent.action.MY_PACKAGE_REPLACED", null, null, 0, packageName, null, updateUsers);
                } else if (launchedForRestore && !isSystemApp(res.pkg)) {
                    if (DEBUG_BACKUP) {
                        Slog.i(TAG, "Post-restore of " + packageName + " sending FIRST_LAUNCH in " + Arrays.toString(firstUsers));
                    }
                    sendFirstLaunchBroadcast(packageName, installerPackage, firstUsers);
                }
                if (res.pkg.isForwardLocked() || isExternal(res.pkg)) {
                    if (DEBUG_INSTALL) {
                        Slog.i(TAG, "upgrading pkg " + res.pkg + " is ASEC-hosted -> AVAILABLE");
                    }
                    int[] uidArray = new int[1];
                    uidArray[0] = res.pkg.applicationInfo.uid;
                    ArrayList pkgList = new ArrayList(1);
                    pkgList.add(packageName);
                    sendResourcesChangedBroadcast(true, true, pkgList, uidArray, null);
                }
            }
            if (firstUsers != null && firstUsers.length > 0) {
                synchronized (this.mPackages) {
                    for (int userId : firstUsers) {
                        if (packageIsBrowser(packageName, userId)) {
                            this.mSettings.setDefaultBrowserPackageNameLPw(null, userId);
                        }
                        this.mSettings.applyPendingPermissionGrantsLPw(packageName, userId);
                    }
                }
            }
            EventLog.writeEvent(EventLogTags.UNKNOWN_SOURCES_ENABLED, getUnknownSourcesSettings());
            Runtime.getRuntime().gc();
            if (!(res.removedInfo == null || res.removedInfo.args == null)) {
                synchronized (this.mInstallLock) {
                    res.removedInfo.args.doPostDeleteLI(true);
                }
            }
            if (update && !isSystemApp(res.pkg)) {
                ColorPackageManagerHelper.addPkgToNotLaunchedList(packageName);
            }
        }
        if (installObserver != null) {
            try {
                installObserver.onPackageInstalled(res.name, res.returnCode, res.returnMsg, extrasForInstallResult(res));
            } catch (RemoteException e) {
                Slog.i(TAG, "Observer no longer exists.");
            }
        }
        OppoAdbInstallerManager.getInstance().handleForAdbSessionInstallerObserver(res.name, res.returnCode);
        if (res.returnCode != 1) {
            ColorPackageManagerHelper.sendOppoInstallFailBro(res.name, installerPackage, 0);
        }
    }

    private void grantRuntimePermissionsGrantedToDisabledPrivSysPackageParentLPw(Package pkg) {
        if (pkg.parentPackage != null && pkg.requestedPermissions != null) {
            PackageSetting disabledSysParentPs = this.mSettings.getDisabledSystemPkgLPr(pkg.parentPackage.packageName);
            if (disabledSysParentPs != null && disabledSysParentPs.pkg != null && disabledSysParentPs.isPrivileged() && (disabledSysParentPs.childPackageNames == null || disabledSysParentPs.childPackageNames.isEmpty())) {
                int[] allUserIds = sUserManager.getUserIds();
                int permCount = pkg.requestedPermissions.size();
                for (int i = 0; i < permCount; i++) {
                    String permission = (String) pkg.requestedPermissions.get(i);
                    BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(permission);
                    if (bp != null && (bp.isRuntime() || bp.isDevelopment())) {
                        for (int userId : allUserIds) {
                            if (disabledSysParentPs.getPermissionsState().hasRuntimePermission(permission, userId)) {
                                grantRuntimePermission(pkg.packageName, permission, userId);
                            }
                        }
                    }
                }
            }
        }
    }

    private void grantRequestedRuntimePermissions(Package pkg, int[] userIds, String[] grantedPermissions) {
        for (int userId : userIds) {
            grantRequestedRuntimePermissionsForUser(pkg, userId, grantedPermissions);
        }
        synchronized (this.mPackages) {
            this.mSettings.writePackageListLPr();
        }
    }

    private void grantRequestedRuntimePermissionsForUser(Package pkg, int userId, String[] grantedPermissions) {
        SettingBase sb = pkg.mExtras;
        if (sb != null) {
            PermissionsState permissionsState = sb.getPermissionsState();
            for (String permission : pkg.requestedPermissions) {
                BasePermission bp;
                synchronized (this.mPackages) {
                    bp = (BasePermission) this.mSettings.mPermissions.get(permission);
                }
                if (bp != null && ((bp.isRuntime() || bp.isDevelopment()) && ((grantedPermissions == null || ArrayUtils.contains(grantedPermissions, permission)) && (permissionsState.getPermissionFlags(permission, userId) & 20) == 0))) {
                    grantRuntimePermission(pkg.packageName, permission, userId);
                }
            }
        }
    }

    Bundle extrasForInstallResult(PackageInstalledInfo res) {
        boolean z = false;
        Bundle extras;
        switch (res.returnCode) {
            case -112:
                extras = new Bundle();
                extras.putString("android.content.pm.extra.FAILURE_EXISTING_PERMISSION", res.origPermission);
                extras.putString("android.content.pm.extra.FAILURE_EXISTING_PACKAGE", res.origPackage);
                return extras;
            case 1:
                extras = new Bundle();
                String str = "android.intent.extra.REPLACING";
                if (!(res.removedInfo == null || res.removedInfo.removedPackage == null)) {
                    z = true;
                }
                extras.putBoolean(str, z);
                return extras;
            default:
                return null;
        }
    }

    void scheduleWriteSettingsLocked() {
        if (!this.mHandler.hasMessages(13)) {
            this.mHandler.sendEmptyMessageDelayed(13, 10000);
        }
    }

    void scheduleWritePackageListLocked(int userId) {
        if (!this.mHandler.hasMessages(19)) {
            Message msg = this.mHandler.obtainMessage(19);
            msg.arg1 = userId;
            this.mHandler.sendMessageDelayed(msg, 10000);
        }
    }

    void scheduleWritePackageRestrictionsLocked(UserHandle user) {
        scheduleWritePackageRestrictionsLocked(user == null ? -1 : user.getIdentifier());
    }

    void scheduleWritePackageRestrictionsLocked(int userId) {
        int[] userIds;
        int i = 0;
        if (userId == -1) {
            userIds = sUserManager.getUserIds();
        } else {
            userIds = new int[1];
            userIds[0] = userId;
        }
        int length = userIds.length;
        while (i < length) {
            int nextUserId = userIds[i];
            if (sUserManager.exists(nextUserId)) {
                this.mDirtyUsers.add(Integer.valueOf(nextUserId));
                if (!this.mHandler.hasMessages(14)) {
                    this.mHandler.sendEmptyMessageDelayed(14, 10000);
                }
                i++;
            } else {
                return;
            }
        }
    }

    void immediatelyWritePackageRestrictionsLocked(int userId) {
        if (sUserManager.exists(userId)) {
            this.mDirtyUsers.add(Integer.valueOf(userId));
            if (this.mHandler.hasMessages(14)) {
                this.mHandler.removeMessages(14);
            }
            this.mHandler.sendEmptyMessage(14);
        }
    }

    public static PackageManagerService main(Context context, Installer installer, boolean factoryTest, boolean onlyCore) {
        PackageManagerServiceCompilerMapping.checkProperties();
        PackageManagerService m = new PackageManagerService(context, installer, factoryTest, onlyCore);
        m.enableSystemUserPackages();
        ServiceManager.addService(PACKAGE_SCHEME, m);
        return m;
    }

    private void enableSystemUserPackages() {
        if (UserManager.isSplitSystemUser()) {
            AppsQueryHelper queryHelper = new AppsQueryHelper(this);
            Set<String> enableApps = new ArraySet();
            enableApps.addAll(queryHelper.queryApps((AppsQueryHelper.GET_NON_LAUNCHABLE_APPS | AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM) | AppsQueryHelper.GET_IMES, true, UserHandle.SYSTEM));
            enableApps.addAll(SystemConfig.getInstance().getSystemUserWhitelistedApps());
            enableApps.addAll(queryHelper.queryApps(AppsQueryHelper.GET_REQUIRED_FOR_SYSTEM_USER, false, UserHandle.SYSTEM));
            enableApps.removeAll(SystemConfig.getInstance().getSystemUserBlacklistedApps());
            Log.i(TAG, "Applications installed for system user: " + enableApps);
            List<String> allAps = queryHelper.queryApps(0, false, UserHandle.SYSTEM);
            int allAppsSize = allAps.size();
            synchronized (this.mPackages) {
                for (int i = 0; i < allAppsSize; i++) {
                    String pName = (String) allAps.get(i);
                    PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(pName);
                    if (pkgSetting != null) {
                        boolean install = enableApps.contains(pName);
                        if (pkgSetting.getInstalled(0) != install) {
                            Log.i(TAG, (install ? "Installing " : "Uninstalling ") + pName + " for system user");
                            pkgSetting.setInstalled(install, 0);
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
    }

    private void addBootEvent(String bootevent) {
        if (!this.mMTPROFDisable) {
            try {
                FileOutputStream fbp = new FileOutputStream("/proc/bootprof");
                fbp.write(bootevent.getBytes());
                fbp.flush();
                fbp.close();
            } catch (FileNotFoundException e) {
                Slog.e("BOOTPROF", "Failure open /proc/bootprof, not found!", e);
                this.mMTPROFDisable = true;
            } catch (IOException e2) {
                Slog.e("BOOTPROF", "Failure open /proc/bootprof entry", e2);
                this.mMTPROFDisable = true;
            }
        }
    }

    private static void getDefaultDisplayMetrics(Context context, DisplayMetrics metrics) {
        ((DisplayManager) context.getSystemService("display")).getDisplay(0).getMetrics(metrics);
    }

    private static void requestCopyPreoptedFiles() {
        String CP_PREOPT_PROPERTY = "sys.cppreopt";
        if (SystemProperties.getInt("ro.cp_system_other_odex", 0) == 1) {
            SystemProperties.set("sys.cppreopt", "requested");
            long timeEnd = SystemClock.uptimeMillis() + 100000;
            while (!SystemProperties.get("sys.cppreopt").equals("finished")) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                }
                if (SystemClock.uptimeMillis() > timeEnd) {
                    SystemProperties.set("sys.cppreopt", "timed-out");
                    Slog.wtf(TAG, "cppreopt did not finish!");
                    return;
                }
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:117:0x0821 A:{Splitter: B:109:0x07db, ExcHandler: java.io.IOException (r59_0 'e' java.lang.Exception)} */
    /* JADX WARNING: Missing block: B:117:0x0821, code:
            r59 = move-exception;
     */
    /* JADX WARNING: Missing block: B:118:0x0822, code:
            android.util.Slog.w(TAG, "Cannot dexopt " + r5 + "; is it an APK or JAR? " + r59.getMessage());
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public PackageManagerService(Context context, Installer installer, boolean factoryTest, boolean onlyCore) {
        int i;
        PackageSetting ps;
        File vendorAppDir;
        String packageName;
        int storageFlags;
        this.mSdkVersion = VERSION.SDK_INT;
        this.mDeviceType = "oppo";
        this.mDataAppArrayList = new ArrayList();
        this.mSystemAppArrayList = new ArrayList();
        this.mAppChannelArrayList = new ArrayList();
        this.mInstallLock = new Object();
        this.mPackages = new ArrayMap();
        this.mKnownCodebase = new ArrayMap();
        this.mOverlays = new ArrayMap();
        this.mExpectingBetter = new ArrayMap();
        this.mProtectedFilters = new ArrayList();
        this.mDeferProtectedFilters = true;
        this.mExistingSystemPackages = new ArraySet();
        this.mFrozenPackages = new ArraySet();
        this.mOppoAvailableFeatures = null;
        this.mIsCtsAppInstall = false;
        this.mOppoScimProtection = null;
        this.mLowRamFeature = false;
        this.mBlackAppInstallHelper = null;
        this.mSharedLibraries = new ArrayMap();
        this.mOppoPackageInstallerList = new ArrayList();
        this.mActivities = new ActivityIntentResolver();
        this.mReceivers = new ActivityIntentResolver();
        this.mServices = new ServiceIntentResolver(this, null);
        this.mProviders = new ProviderIntentResolver(this, null);
        this.mProvidersByAuthority = new ArrayMap();
        this.mInstrumentation = new ArrayMap();
        this.mPermissionGroups = new ArrayMap();
        this.mTransferedPackages = new ArraySet();
        this.mProtectedBroadcasts = new ArraySet();
        this.mPendingVerification = new SparseArray();
        this.mAppOpPermissionPackages = new ArrayMap();
        this.mNextMoveId = new AtomicInteger();
        this.mUserNeedsBadging = new SparseBooleanArray();
        this.mPendingVerificationToken = 0;
        this.mResolveActivity = new ActivityInfo();
        this.mResolveInfo = new ResolveInfo();
        this.mResolverReplaced = false;
        this.mIntentFilterVerificationToken = 0;
        this.mEphemeralInstallerActivity = new ActivityInfo();
        this.mEphemeralInstallerInfo = new ResolveInfo();
        this.mIntentFilterVerificationStates = new SparseArray();
        this.mCompatibilityHelper = null;
        this.CUSTOMIZE_LIST_PATH = "/system/etc/oppo_customize_whitelist.xml";
        this.mCustomizeList = new ArrayList();
        this.CUSTOMIZE_SYSTEM_APP_BLACKLIST_PATH = "/system/etc/customize_system_app_blacklist.xml";
        this.mCustomizeSystemAppBlacklist = new ArrayList();
        this.mRunningInstallerPkgName = new ArrayMap();
        this.mPendingBroadcasts = new PendingPackageBroadcasts();
        this.mContainerService = null;
        this.mDirtyUsers = new ArraySet();
        this.mServiceConnected = false;
        this.mServiceCheck = 0;
        this.mDefContainerConn = new DefaultContainerConnection();
        this.mRunningInstalls = new SparseArray();
        this.mNextInstallToken = 1;
        this.mPackageUsage = new PackageUsage();
        this.mCompilerStats = new CompilerStats();
        this.mStorageListener = new StorageEventListener() {
            public void onVolumeStateChanged(VolumeInfo vol, int oldState, int newState) {
                if (vol.type == 1) {
                    if (vol.state == 2) {
                        String volumeUuid = vol.getFsUuid();
                        PackageManagerService.this.reconcileUsers(volumeUuid);
                        PackageManagerService.this.reconcileApps(volumeUuid);
                        PackageManagerService.this.mInstallerService.onPrivateVolumeMounted(volumeUuid);
                        PackageManagerService.this.loadPrivatePackages(vol);
                    } else if (vol.state == 5) {
                        PackageManagerService.this.unloadPrivatePackages(vol);
                    }
                }
                if (vol.type != 0 || !vol.isPrimary()) {
                    return;
                }
                if (vol.state == 2) {
                    PackageManagerService.this.updateExternalMediaStatus(true, false);
                } else if (vol.state == 5) {
                    PackageManagerService.this.updateExternalMediaStatus(false, false);
                }
            }

            public void onVolumeForgotten(String fsUuid) {
                if (TextUtils.isEmpty(fsUuid)) {
                    Slog.e(PackageManagerService.TAG, "Forgetting internal storage is probably a mistake; ignoring");
                    return;
                }
                synchronized (PackageManagerService.this.mPackages) {
                    for (PackageSetting ps : PackageManagerService.this.mSettings.getVolumePackagesLPr(fsUuid)) {
                        Slog.d(PackageManagerService.TAG, "Destroying " + ps.name + " because volume was forgotten");
                        PackageManagerService.this.deletePackage(ps.name, new LegacyPackageDeleteObserver(null).getBinder(), 0, 2);
                    }
                    PackageManagerService.this.mSettings.onVolumeForgotten(fsUuid);
                    PackageManagerService.this.mSettings.writeLPr();
                }
            }
        };
        this.mClearSystemApp = new Runnable() {
            public void run() {
                Slog.d(PackageManagerService.TAG, "Run clearSystemApp");
                Intent intent = new Intent("oppo.intent.action.SWITCH_REGION_CLEAR");
                intent.setPackage("com.coloros.oppomorningsystem");
                PackageManagerService.this.mContext.startService(intent);
            }
        };
        this.mbadCalcPackageCache = new ArrayList();
        this.backgroundClearIsRunning = false;
        this.mbadClearPackageCache = new ArrayList();
        this.mSkinChangedReceiver = new BroadcastReceiver() {
            public void onReceive(Context context, Intent intent) {
                String action = intent.getAction();
                Log.d(PackageManagerService.TAG, "mBroadcastReceiver onReceive action = " + action);
                if (PackageManagerService.ACTION_SKIN_CHANGED.equals(action)) {
                    PackageManagerService.this.mThemeIconsChanged = false;
                    PackageManagerService.mAppIconsCache.clear();
                    PackageManagerService.mAppIconsCacheCompress.clear();
                    PackageManagerService.mActivityIconsCache.clear();
                    PackageManagerService.this.mHandler.sendMessage(PackageManagerService.this.mHandler.obtainMessage(23));
                }
            }
        };
        this.mThemeIconsChanged = false;
        this.mThemeIconsFileObserver = new FileObserver("/data/theme/icons", 1546) {
            public void onEvent(int event, String path) {
                Log.d(PackageManagerService.TAG, "onEvent. event = " + event + " , path = " + path);
                PackageManagerService.this.mThemeIconsChanged = true;
            }
        };
        this.mMediaMounted = false;
        this.mReadSystemDefaultApp = new Runnable() {
            public void run() {
                Slog.d(PackageManagerService.TAG, "Run Read System defult app");
                ColorPackageManagerHelper.oppoReadDefaultPkg(PackageManagerService.this.mContext);
                PackageManagerService.this.cacheActivityIconsData(null);
                PackageManagerService.this.cacheAppIconsData();
            }
        };
        this.mPackageDeleteList = new HashMap();
        String[] strArr = new String[3];
        strArr[0] = "com.android.vending";
        strArr[1] = "com.coloros.backuprestore";
        strArr[2] = "com.google.android.packageinstaller";
        this.mPackageInstaller = strArr;
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START, SystemClock.uptimeMillis());
        this.mMTPROFDisable = false;
        addBootEvent("Android:PackageManagerService_Start");
        int dataFreeSize = ColorPackageManagerHelper.getAvaiDataSize();
        if (dataFreeSize < 16) {
            Slog.w(TAG, "data avaible size is : " + dataFreeSize);
            SystemProperties.set("oppo.service.datafree.enable", LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON);
        }
        OppoPackageManagerHelper.ParsePackageXml();
        if (ColorPackageManagerHelper.ReadEncryptFile() != 0) {
            Slog.w(TAG, "fatal error:read encrypt file fail, try again");
            ColorPackageManagerHelper.ReadEncryptFile();
        }
        if (isBootFromOTA() && !ColorPackageManagerHelper.moveOdexToOatDir(context)) {
            Slog.w(TAG, "ota move Odex failed!!!");
        }
        if (this.mSdkVersion <= 0) {
            Slog.w(TAG, "**** ro.build.version.sdk not set!");
        }
        ColorPackageManagerHelper.initRuntimeFilterInfos();
        ColorPackageManagerHelper.initCtsToolList();
        ColorPackageManagerHelper.initNotLaunchedList();
        this.mContext = context;
        this.mFactoryTest = factoryTest;
        this.mOnlyCore = onlyCore;
        this.mMetrics = new DisplayMetrics();
        this.mSettings = new Settings(this.mPackages);
        this.mSettings.addSharedUserLPw("android.uid.system", 1000, 1, 8);
        this.mSettings.addSharedUserLPw("android.uid.phone", 1001, 1, 8);
        this.mSettings.addSharedUserLPw("android.uid.log", LOG_UID, 1, 8);
        this.mSettings.addSharedUserLPw("android.uid.nfc", NFC_UID, 1, 8);
        this.mSettings.addSharedUserLPw("android.uid.bluetooth", 1002, 1, 8);
        this.mSettings.addSharedUserLPw("android.uid.shell", SHELL_UID, 1, 8);
        String separateProcesses = SystemProperties.get("debug.separate_processes");
        if (separateProcesses == null || separateProcesses.length() <= 0) {
            this.mDefParseFlags = 0;
            this.mSeparateProcesses = null;
        } else if ("*".equals(separateProcesses)) {
            this.mDefParseFlags = 8;
            this.mSeparateProcesses = null;
            Slog.w(TAG, "Running with debug.separate_processes: * (ALL)");
        } else {
            this.mDefParseFlags = 0;
            this.mSeparateProcesses = separateProcesses.split(",");
            Slog.w(TAG, "Running with debug.separate_processes: " + separateProcesses);
        }
        this.mInstaller = installer;
        this.mPackageDexOptimizer = new PackageDexOptimizer(installer, this.mInstallLock, context, "*dexopt*");
        this.mMoveCallbacks = new MoveCallbacks(FgThread.get().getLooper());
        this.mOnPermissionChangeListeners = new OnPermissionChangeListeners(FgThread.get().getLooper());
        getDefaultDisplayMetrics(context, this.mMetrics);
        SystemConfig systemConfig = SystemConfig.getInstance();
        this.mGlobalGids = systemConfig.getGlobalGids();
        this.mSystemPermissions = systemConfig.getSystemPermissions();
        this.mAvailableFeatures = systemConfig.getAvailableFeatures();
        String regionName = SystemProperties.get("persist.sys.oppo.region");
        if (regionName != null && regionName.length() > 0) {
            Slog.w(TAG, "load region" + regionName + "features!");
            if (!loadRegionFeature(regionName)) {
                Slog.w(TAG, "load region feature failed!");
            }
        }
        this.mProtectedPackages = new ProtectedPackages(this.mContext);
        this.mCompatibilityHelper = new CompatibilityHelper(context);
        this.mCustomizeList = loadCustomizeWhiteList("/system/etc/oppo_customize_whitelist.xml");
        this.mCustomizeSystemAppBlacklist = loadCustomizeWhiteList("/system/etc/customize_system_app_blacklist.xml");
        this.mSettings.loadAllCustomizeList();
        boolean hasDefaultBrowser = hasSystemFeature(OPPO_DEFAULT_BROWSER_FEATURE, 0);
        if (EXP_VERSION && hasDefaultBrowser) {
            if (REGION_INDIA.equals(SystemProperties.get("ro.oppo.region.netlock", IElsaManager.EMPTY_PACKAGE))) {
                ColorPackageManagerHelper.initDefaultPackageList(OPPO_BROWSER_PKG_NAME);
            } else {
                ColorPackageManagerHelper.initDefaultPackageList(CHROME_BROWSER_PKG_NAME);
            }
        }
        this.mHandlerThread = new ServiceThread(TAG, 10, true);
        this.mHandlerThread.start();
        this.mHandler = new PackageHandler(this.mHandlerThread.getLooper());
        this.mProcessLoggingHandler = new ProcessLoggingHandler();
        Watchdog.getInstance().addThread(this.mHandler, 600000);
        this.mDefaultPermissionPolicy = new DefaultPermissionGrantPolicy(this);
        File dataDir = Environment.getDataDirectory();
        this.mAppInstallDir = new File(dataDir, "app");
        this.mAppLib32InstallDir = new File(dataDir, "app-lib");
        this.mEphemeralInstallDir = new File(dataDir, "app-ephemeral");
        this.mAsecInternalPath = new File(dataDir, "app-asec").getPath();
        this.mDrmAppPrivateInstallDir = new File(dataDir, "app-private");
        sUserManager = new UserManagerService(context, this, this.mPackages);
        ArrayMap<String, PermissionEntry> permConfig = systemConfig.getPermissions();
        for (i = 0; i < permConfig.size(); i++) {
            PermissionEntry perm = (PermissionEntry) permConfig.valueAt(i);
            BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(perm.name);
            if (bp == null) {
                BasePermission basePermission = new BasePermission(perm.name, PLATFORM_PACKAGE_NAME, 1);
                this.mSettings.mPermissions.put(perm.name, basePermission);
            }
            if (perm.gids != null) {
                bp.setGids(perm.gids, perm.perUser);
            }
        }
        ArrayMap<String, String> libConfig = systemConfig.getSharedLibraries();
        for (i = 0; i < libConfig.size(); i++) {
            this.mSharedLibraries.put((String) libConfig.keyAt(i), new SharedLibraryEntry((String) libConfig.valueAt(i), null));
        }
        this.mFoundPolicyFile = SELinuxMMAC.readInstallPolicy(this);
        if (hasSystemFeature(OPPO_SECURITYPAY_FEATURE, 0)) {
            Slog.i(TAG, "start init SandboxApp ");
            ColorSecurePayManager.getInstance().initSecurePay(this.mContext, this);
        }
        this.mFirstBoot = !this.mSettings.readLPw(sUserManager.getUsers(false));
        for (i = this.mSettings.mPackages.size() - 1; i >= 0; i--) {
            ps = (PackageSetting) this.mSettings.mPackages.valueAt(i);
            if (!isExternal(ps) && ((ps.codePath == null || !ps.codePath.exists()) && this.mSettings.getDisabledSystemPkgLPr(ps.name) != null)) {
                if (isBootFromOTA() && ps != null) {
                    Slog.d(TAG, "enableSystem scannedPkg PKG = " + ps.name + " UID = " + ps.appId);
                    synchronized (ColorPackageManagerHelper.mOppoSystemToDataList) {
                        ColorPackageManagerHelper.mOppoSystemToDataList.add(ps);
                    }
                }
                this.mSettings.mPackages.removeAt(i);
                this.mSettings.enableSystemPackageLPw(ps.name);
            }
        }
        if (this.mFirstBoot) {
            requestCopyPreoptedFiles();
        }
        commonSoftInit();
        if (isCommonSoft()) {
            readFileToArrayList(getSystemAppPkgFileName(), true);
        }
        deleteAppChannel();
        deleteDataReserveApps();
        OppoPackageManagerHelper.IsFirstBoot(isFirstBoot());
        String customResolverActivity = Resources.getSystem().getString(17039457);
        if (!TextUtils.isEmpty(customResolverActivity)) {
            this.mCustomResolverComponentName = ComponentName.unflattenFromString(customResolverActivity);
        }
        long startTime = SystemClock.uptimeMillis();
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START, startTime);
        if (CtaUtils.isCtaSupported()) {
            this.mCtaPermsController = new CtaPermsController(this.mContext);
            LocalServices.addService(CtaPackageManagerInternal.class, new CtaPackageManagerInternalImpl(this.mCtaPermsController));
        }
        addBootEvent("Android:PMS_scan_START");
        String bootClassPath = System.getenv("BOOTCLASSPATH");
        String systemServerClassPath = System.getenv("SYSTEMSERVERCLASSPATH");
        if (bootClassPath == null) {
            Slog.w(TAG, "No BOOTCLASSPATH found!");
        }
        if (systemServerClassPath == null) {
            Slog.w(TAG, "No SYSTEMSERVERCLASSPATH found!");
        }
        List<String> allInstructionSets = InstructionSets.getAllInstructionSets();
        String[] dexCodeInstructionSets = InstructionSets.getDexCodeInstructionSets((String[]) allInstructionSets.toArray(new String[allInstructionSets.size()]));
        if (this.mSharedLibraries.size() > 0) {
            int i2 = 0;
            int length = dexCodeInstructionSets.length;
            while (true) {
                int i3 = i2;
                if (i3 >= length) {
                    break;
                }
                String dexCodeInstructionSet = dexCodeInstructionSets[i3];
                for (SharedLibraryEntry libEntry : this.mSharedLibraries.values()) {
                    String lib = libEntry.path;
                    if (lib != null) {
                        try {
                            int dexoptNeeded = DexFile.getDexOptNeeded(lib, dexCodeInstructionSet, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(6), false);
                            if (dexoptNeeded != 0) {
                                this.mInstaller.dexopt(lib, 1000, dexCodeInstructionSet, dexoptNeeded, 2, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(6), StorageManager.UUID_PRIVATE_INTERNAL, SKIP_SHARED_LIBRARY_CHECK);
                            }
                        } catch (FileNotFoundException e) {
                            Slog.w(TAG, "Library not found: " + lib);
                        } catch (Exception e2) {
                        }
                    }
                }
                i2 = i3 + 1;
            }
        }
        File file = new File(Environment.getRootDirectory(), "framework");
        VersionInfo ver = this.mSettings.getInternalVersion();
        this.mIsUpgrade = !Build.FINGERPRINT.equals(ver.fingerprint);
        boolean z = this.mIsUpgrade && ver.sdkVersion <= 22;
        this.mPromoteSystemApps = z;
        z = this.mIsUpgrade && ver.sdkVersion < 24;
        this.mIsPreNUpgrade = z;
        z = this.mIsUpgrade && ver.sdkVersion < 25;
        this.mIsPreNMR1Upgrade = z;
        if (this.mPromoteSystemApps) {
            for (PackageSetting ps2 : this.mSettings.mPackages.values()) {
                if (isSystemApp(ps2)) {
                    this.mExistingSystemPackages.add(ps2.name);
                }
            }
        }
        scanDirTracedLI(new File(VENDOR_OVERLAY_DIR), ((this.mDefParseFlags | 1) | 64) | 512, 17312, 0);
        if (!SystemProperties.get("ro.mtk_carrierexpress_pack").equals(IElsaManager.EMPTY_PACKAGE)) {
            String overlayOptr = SystemProperties.get("persist.operator.optr");
            if (overlayOptr.length() > 0) {
                scanDirTracedLI(new File("/custom/overlay", overlayOptr), ((this.mDefParseFlags | 1) | 64) | 512, 17312, 0);
            }
        }
        scanDirLI(new File("/custom/framework"), 65, 16802, 0);
        scanDirTracedLI(file, ((this.mDefParseFlags | 1) | 64) | 128, 16802, 0);
        scanDirTracedLI(new File(Environment.getVendorDirectory(), "framework"), 65, 16802, 0);
        file = new File(Environment.getRootDirectory(), "priv-app");
        scanDirTracedLI(file, ((this.mDefParseFlags | 1) | 64) | 128, 16800, 0);
        file = new File(Environment.getRootDirectory(), "app");
        scanDirTracedLI(file, (this.mDefParseFlags | 1) | 64, 16800, 0);
        scanDirLI(new File(Environment.getVendorDirectory(), "priv-app"), HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_PLUS, 16800, 0);
        ResmonFilter rf = new ResmonFilter();
        if (EXP_VERSION) {
            String mOPInstalled = SystemProperties.get("persist.sys.oppo.opinstalled", "false");
            if (mRegion.equals("SG") && mOperator.equals("STARHUB")) {
                if (mOPInstalled.equals("false")) {
                    operatorAppCopy("reserve/data_app_STARHUB");
                    SystemProperties.set("persist.sys.oppo.opinstalled", "true");
                }
            }
        }
        file = new File(Environment.getVendorDirectory(), "app");
        try {
            vendorAppDir = file.getCanonicalFile();
        } catch (IOException e3) {
        }
        scanDirTracedLI(vendorAppDir, (this.mDefParseFlags | 1) | 64, 16800, 0);
        this.mOperatorAppInstallDir = new File(Environment.getVendorDirectory(), "/operator/app");
        scanDirLI(this.mOperatorAppInstallDir, 8192, 16800, 0);
        this.mPluginAppInstallDir = new File(Environment.getRootDirectory(), "plugin");
        scanDirLI(this.mPluginAppInstallDir, 8257, 16800, 0);
        scanDirLI(new File(Environment.getVendorDirectory(), "plugin"), 8257, 16800, 0);
        if (LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get("ro.mtk_carrierexpress_inst_sup"))) {
            String opStr = SystemProperties.get("persist.operator.optr");
            if (opStr == null || opStr.length() <= 0) {
                Slog.d(TAG, "No operater defined.");
            } else {
                String opFileName = "usp-apks-path-" + opStr + ".txt";
                file = new File("/custom/usp");
                if (file != null) {
                    scanCxpApp(file, opFileName, 16800);
                } else {
                    file = new File("/system/usp");
                    if (file != null) {
                        scanCxpApp(file, opFileName, 16800);
                    } else {
                        Slog.d(TAG, "No Carrier Express Pack directory.");
                    }
                }
            }
        } else {
            file = new File("/custom/app");
            file = new File("/custom/plugin");
            scanDirLI(file, 65, 16800, 0);
            scanDirLI(file, 65, 16800, 0);
        }
        file = new File(Environment.getOemDirectory(), "app");
        scanDirTracedLI(file, (this.mDefParseFlags | 1) | 64, 16800, 0);
        List<String> possiblyDeletedUpdatedSystemApps = new ArrayList();
        if (!this.mOnlyCore) {
            Iterator<PackageSetting> psit = this.mSettings.mPackages.values().iterator();
            while (psit.hasNext()) {
                ps2 = (PackageSetting) psit.next();
                if ((ps2.pkgFlags & 1) != 0 || isVendorApp(ps2) || locationIsOperator(ps2.codePath)) {
                    Package scannedPkg = (Package) this.mPackages.get(ps2.name);
                    if (scannedPkg != null) {
                        if (this.mSettings.isDisabledSystemPackageLPr(ps2.name)) {
                            logCriticalInfo(5, "Expecting better updated system app for " + ps2.name + "; removing system app.  Last known codePath=" + ps2.codePathString + ", installStatus=" + ps2.installStatus + ", versionCode=" + ps2.versionCode + "; scanned versionCode=" + scannedPkg.mVersionCode);
                            removePackageLI(scannedPkg, true);
                            this.mExpectingBetter.put(ps2.name, ps2.codePath);
                        }
                    } else if (this.mSettings.isDisabledSystemPackageLPr(ps2.name)) {
                        PackageSetting disabledPs = this.mSettings.getDisabledSystemPkgLPr(ps2.name);
                        if (disabledPs.codePath == null || !disabledPs.codePath.exists()) {
                            possiblyDeletedUpdatedSystemApps.add(ps2.name);
                        }
                    } else {
                        psit.remove();
                        logCriticalInfo(5, "System package " + ps2.name + " no longer exists; it's data will be wiped");
                        if (isBootFromOTA() && ps2 != null) {
                            Slog.d(TAG, "scannedPkg PKG = " + ps2.name + " UID = " + ps2.appId);
                            synchronized (ColorPackageManagerHelper.mOppoSystemToDataList) {
                                ColorPackageManagerHelper.mOppoSystemToDataList.add(ps2);
                            }
                        }
                    }
                }
            }
        }
        OppoPackageManagerHelper.RestorePresetApk(this.mSettings, this.mAppInstallDir);
        if (isCommonSoft() && isFirstBoot()) {
            if (isPackageXmlExists()) {
                resetDataAppForMasterClear();
            } else {
                resetDataAppForFirstBoot();
            }
        }
        ArrayList<PackageSetting> deletePkgsList = this.mSettings.getListOfIncompleteInstallPackagesLPr();
        for (i = 0; i < deletePkgsList.size(); i++) {
            packageName = ((PackageSetting) deletePkgsList.get(i)).name;
            logCriticalInfo(5, "Cleaning up incompletely installed app: " + packageName);
            synchronized (this.mPackages) {
                this.mSettings.removePackageLPw(packageName);
            }
        }
        deleteTempPackageFiles();
        this.mSettings.pruneSharedUsersLPw();
        if (!this.mOnlyCore) {
            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START, SystemClock.uptimeMillis());
            scanDirTracedLI(this.mAppInstallDir, 0, 20896, 0);
            scanDirTracedLI(this.mDrmAppPrivateInstallDir, this.mDefParseFlags | 16, 20896, 0);
            scanDirLI(this.mEphemeralInstallDir, this.mDefParseFlags | 2048, 20896, 0);
            for (String deletedAppName : possiblyDeletedUpdatedSystemApps) {
                String msg;
                Package deletedPkg = (Package) this.mPackages.get(deletedAppName);
                this.mSettings.removeDisabledSystemPackageLPw(deletedAppName);
                if (deletedPkg == null) {
                    msg = "Updated system package " + deletedAppName + " no longer exists; it's data will be wiped";
                } else {
                    msg = "Updated system app + " + deletedAppName + " no longer present; removing system privileges for " + deletedAppName;
                    ApplicationInfo applicationInfo = deletedPkg.applicationInfo;
                    applicationInfo.flags &= -2;
                    applicationInfo = deletedPkg.applicationInfo;
                    applicationInfo.flagsEx &= -2;
                    PackageSetting deletedPs = (PackageSetting) this.mSettings.mPackages.get(deletedAppName);
                    deletedPs.pkgFlags &= -2;
                    deletedPs.pkgFlagsEx &= -2;
                }
                logCriticalInfo(5, msg);
            }
            for (i = 0; i < this.mExpectingBetter.size(); i++) {
                packageName = (String) this.mExpectingBetter.keyAt(i);
                if (!this.mPackages.containsKey(packageName)) {
                    File scanFile = (File) this.mExpectingBetter.valueAt(i);
                    logCriticalInfo(5, "Expected better " + packageName + " but never showed up; reverting to system");
                    int reparseFlags = this.mDefParseFlags;
                    if (FileUtils.contains(file, scanFile)) {
                        reparseFlags = HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_PLUS;
                    } else if (FileUtils.contains(file, scanFile)) {
                        reparseFlags = 65;
                    } else if (FileUtils.contains(vendorAppDir, scanFile)) {
                        reparseFlags = 65;
                    } else if (FileUtils.contains(file, scanFile)) {
                        reparseFlags = 65;
                    } else {
                        Slog.e(TAG, "Ignoring unexpected fallback path " + scanFile);
                    }
                    this.mSettings.enableSystemPackageLPw(packageName);
                    try {
                        scanPackageTracedLI(scanFile, reparseFlags, 16800, 0, null);
                    } catch (PackageManagerException e4) {
                        Slog.e(TAG, "Failed to parse original system package: " + e4.getMessage());
                    }
                }
            }
        }
        this.mExpectingBetter.clear();
        this.mStorageManagerPackage = getStorageManagerPackageName();
        this.mSetupWizardPackage = getSetupWizardPackageName();
        if (this.mProtectedFilters.size() > 0) {
            for (ActivityIntentInfo filter : this.mProtectedFilters) {
                if (!filter.activity.info.packageName.equals(this.mSetupWizardPackage)) {
                    filter.setPriority(0);
                }
            }
        }
        this.mDeferProtectedFilters = false;
        this.mProtectedFilters.clear();
        updateAllSharedLibrariesLPw();
        for (SharedUserSetting setting : this.mSettings.getAllSharedUsersLPw()) {
            adjustCpuAbisForSharedUserLPw(setting.packages, null, false);
        }
        this.mPackageUsage.read(this.mPackages);
        this.mCompilerStats.read();
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END, SystemClock.uptimeMillis());
        addBootEvent("Android:PMS_scan_END");
        Slog.i(TAG, "Time to scan packages: " + (((float) (SystemClock.uptimeMillis() - startTime)) / 1000.0f) + " seconds");
        this.mForcePermReviewPkgs = new HashSet(Arrays.asList(this.mContext.getResources().getStringArray(134479885)));
        for (String pkg : this.mForcePermReviewPkgs) {
            Slog.d(TAG, "mForcePermReviewPkgs pkg = " + pkg);
        }
        this.mBlockPermReviewPkgs = new HashSet(Arrays.asList(this.mContext.getResources().getStringArray(134479884)));
        for (String pkg2 : this.mBlockPermReviewPkgs) {
            Slog.d(TAG, "mBlockPermReviewPkgs pkg = " + pkg2);
        }
        int updateFlags = 1;
        if (ver.sdkVersion != this.mSdkVersion) {
            Slog.i(TAG, "Platform changed from " + ver.sdkVersion + " to " + this.mSdkVersion + "; regranting permissions for internal storage");
            updateFlags = 7;
        }
        updatePermissionsLPw(null, null, StorageManager.UUID_PRIVATE_INTERNAL, updateFlags);
        ver.sdkVersion = this.mSdkVersion;
        if (!onlyCore && (this.mPromoteSystemApps || this.mFirstBoot)) {
            for (UserInfo user : sUserManager.getUsers(true)) {
                this.mSettings.applyDefaultPreferredAppsLPw(this, user.id);
                applyFactoryDefaultBrowserLPw(user.id);
                primeDomainVerificationsLPw(user.id);
            }
        }
        if (StorageManager.isFileEncryptedNativeOrEmulated()) {
            storageFlags = 1;
        } else {
            storageFlags = 3;
        }
        if (isFirstBoot() || isAfterRecoveryClear() || isBootFromOTA() || !SystemProperties.getBoolean("persist.sys.reconcile.finish", false)) {
            Slog.w(TAG, "reconcil after recovery clear " + isAfterRecoveryClear());
            reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL, 0, storageFlags);
            resetRecoveryClearState();
        }
        if (this.mIsUpgrade && !onlyCore) {
            Slog.i(TAG, "Build fingerprint changed; clearing code caches");
            for (i = 0; i < this.mSettings.mPackages.size(); i++) {
                ps2 = (PackageSetting) this.mSettings.mPackages.valueAt(i);
                if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, ps2.volumeUuid)) {
                    clearAppDataLIF(ps2.pkg, -1, 515);
                }
            }
            ver.fingerprint = Build.FINGERPRINT;
        }
        checkDefaultBrowser();
        this.mExistingSystemPackages.clear();
        this.mPromoteSystemApps = false;
        ver.databaseVersion = 3;
        this.mSettings.writeLPr();
        if ((isFirstBoot() || isUpgrade() || VMRuntime.didPruneDalvikCache()) && !onlyCore) {
            long start = System.nanoTime();
            List<Package> coreApps = new ArrayList();
            for (Package pkg3 : this.mPackages.values()) {
                if (pkg3.coreApp) {
                    coreApps.add(pkg3);
                }
            }
            int[] stats = performDexOptUpgrade(coreApps, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(8));
            int elapsedTimeSeconds = (int) TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start);
            MetricsLogger.histogram(this.mContext, "opt_coreapps_time_s", elapsedTimeSeconds);
            if (DEBUG_DEXOPT) {
                Slog.i(TAG, "Dex-opt core apps took : " + elapsedTimeSeconds + " seconds (" + stats[0] + ", " + stats[1] + ", " + stats[2] + ")");
            }
        }
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY, SystemClock.uptimeMillis());
        addBootEvent("Android:PMS_READY");
        if (this.mOnlyCore) {
            this.mRequiredVerifierPackage = null;
            this.mRequiredInstallerPackage = null;
            this.mRequiredUninstallerPackage = null;
            this.mIntentFilterVerifierComponent = null;
            this.mIntentFilterVerifier = null;
            this.mServicesSystemSharedLibraryPackageName = null;
            this.mSharedSystemSharedLibraryPackageName = null;
        } else {
            this.mRequiredVerifierPackage = getRequiredButNotReallyRequiredVerifierLPr();
            this.mRequiredInstallerPackage = getRequiredInstallerLPr();
            this.mRequiredUninstallerPackage = getRequiredUninstallerLPr();
            this.mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();
            this.mIntentFilterVerifier = new IntentVerifierProxy(this.mContext, this.mIntentFilterVerifierComponent);
            this.mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr("android.ext.services");
            this.mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr("android.ext.shared");
        }
        this.mInstallerService = new PackageInstallerService(context, this);
        ComponentName ephemeralResolverComponent = getEphemeralResolverLPr();
        ComponentName ephemeralInstallerComponent = getEphemeralInstallerLPr();
        if (ephemeralInstallerComponent == null || ephemeralResolverComponent == null) {
            if (DEBUG_EPHEMERAL) {
                String missingComponent;
                if (ephemeralResolverComponent != null) {
                    missingComponent = "installer";
                } else if (ephemeralInstallerComponent == null) {
                    missingComponent = "resolver and installer";
                } else {
                    missingComponent = "resolver";
                }
                Slog.i(TAG, "Ephemeral deactivated; missing " + missingComponent);
            }
            this.mEphemeralResolverComponent = null;
            this.mEphemeralInstallerComponent = null;
            this.mEphemeralResolverConnection = null;
        } else {
            if (DEBUG_EPHEMERAL) {
                Slog.i(TAG, "Ephemeral activated; resolver: " + ephemeralResolverComponent + " installer:" + ephemeralInstallerComponent);
            }
            this.mEphemeralResolverComponent = ephemeralResolverComponent;
            this.mEphemeralInstallerComponent = ephemeralInstallerComponent;
            setUpEphemeralInstallerActivityLP(this.mEphemeralInstallerComponent);
            this.mEphemeralResolverConnection = new EphemeralResolverConnection(this.mContext, this.mEphemeralResolverComponent);
        }
        this.mEphemeralApplicationRegistry = new EphemeralApplicationRegistry(this);
        OppoAdbInstallerManager.getInstance().init(this);
        if (this.mOppoScimProtection == null) {
            this.mOppoScimProtection = OppoDcimProtectionService.getInstall(this.mContext);
        }
        Runtime.getRuntime().gc();
        this.mInstaller.setWarnIfHeld(this.mPackages);
        LocalServices.addService(PackageManagerInternal.class, new PackageManagerInternalImpl(this, null));
        this.mCtmFlag = LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get("ro.mtk_ctm_flag", "0"));
        this.mCtmName = SystemProperties.get("ro.ctm_name", "invalid");
    }

    private void resetDataAppForFirstBoot() {
        int i = 0;
        if (EXP_VERSION) {
            if (getNetLockExpAppPathFileName().exists()) {
                readFileToArrayList(getNetLockExpAppPathFileName(), false);
            }
            if (getOperatorExpAppPathFileName().exists()) {
                readFileToArrayList(getOperatorExpAppPathFileName(), false);
            }
            if (getRegionMarkExpAppPathFileName().exists()) {
                readFileToArrayList(getRegionMarkExpAppPathFileName(), false);
            }
        }
        if (getDataAppPathFileName().exists()) {
            readFileToArrayList(getDataAppPathFileName(), false);
        }
        if (this.mDataAppDir.exists() && this.mDataAppArrayList.size() > 0) {
            File[] files = this.mDataAppDir.listFiles();
            if (ArrayUtils.isEmpty(files)) {
                Log.d(TAG, "No files in app dir " + this.mDataAppDir);
                return;
            }
            int length = files.length;
            while (i < length) {
                File apkFile = files[i];
                if (!this.mDataAppArrayList.contains("data/app/" + apkFile.getName())) {
                    deleteFiles(apkFile);
                }
                i++;
            }
        }
    }

    private void resetDataAppForMasterClear() {
        int i = 0;
        if (EXP_VERSION) {
            if (getNetLockExpAppPkgFileName().exists()) {
                readFileToArrayList(getNetLockExpAppPkgFileName(), false);
            }
            if (getOperatorExpAppPkgFileName().exists()) {
                readFileToArrayList(getOperatorExpAppPkgFileName(), false);
            }
            if (getRegionMarkExpAppPkgFileName().exists()) {
                readFileToArrayList(getRegionMarkExpAppPkgFileName(), false);
            }
        }
        if (getDataAppPkgFileName().exists()) {
            readFileToArrayList(getDataAppPkgFileName(), false);
        }
        if (this.mDataAppDir.exists() && this.mDataAppArrayList.size() > 0) {
            File[] files = this.mDataAppDir.listFiles();
            if (ArrayUtils.isEmpty(files)) {
                Log.d(TAG, "No files in app dir " + this.mDataAppDir);
                return;
            }
            int length = files.length;
            while (i < length) {
                File apkFile = files[i];
                String pkgName = getPkgName(apkFile);
                Log.d(TAG, "pkgName : " + pkgName + "  apkFile.getName() = " + apkFile.getName());
                if (pkgName != null) {
                    if (!this.mDataAppArrayList.contains(pkgName)) {
                        Log.d(TAG, "deleteFiles 1 ");
                        deleteFiles(apkFile);
                    }
                } else if (!(apkFile.getName().startsWith("packages.xml") || this.mDataAppArrayList.contains(apkFile.getName()))) {
                    Log.d(TAG, "deleteFiles 2 ");
                    deleteFiles(apkFile);
                }
                i++;
            }
        }
    }

    private String getPkgName(File file) {
        if (file.isDirectory()) {
            for (File apkFile : file.listFiles()) {
                if (apkFile.getName().endsWith(".apk")) {
                    return parsePkg(file);
                }
            }
        } else if (file.getName().endsWith(".apk")) {
            return parsePkg(file);
        }
        return null;
    }

    private String parsePkg(File file) {
        try {
            PackageLite pkg = PackageParser.parsePackageLite(file, 2);
            if (pkg != null) {
                return pkg.packageName;
            }
        } catch (PackageParserException ex) {
            Log.e(TAG, "parser pkg fail !!!" + ex);
        }
        return null;
    }

    private void readFileToArrayList(File apkfile, boolean isSystem) {
        IOException e;
        Throwable th;
        AutoCloseable autoCloseable = null;
        try {
            BufferedReader in = new BufferedReader(new FileReader(apkfile));
            while (true) {
                try {
                    String line = in.readLine();
                    if (line == null) {
                        IoUtils.closeQuietly(in);
                        return;
                    } else if (isSystem) {
                        this.mSystemAppArrayList.add(line);
                    } else {
                        this.mDataAppArrayList.add(line);
                    }
                } catch (IOException e2) {
                    e = e2;
                    autoCloseable = in;
                } catch (Throwable th2) {
                    th = th2;
                    autoCloseable = in;
                }
            }
        } catch (IOException e3) {
            e = e3;
            try {
                Log.e(TAG, "readApkWhiteList IOException " + e);
                IoUtils.closeQuietly(autoCloseable);
            } catch (Throwable th3) {
                th = th3;
                IoUtils.closeQuietly(autoCloseable);
                throw th;
            }
        }
    }

    private void deleteFiles(File file) {
        if (!file.exists()) {
            return;
        }
        if (file.isFile()) {
            Log.d(TAG, "delete file : " + file);
            file.delete();
        } else if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File deleteFiles : files) {
                deleteFiles(deleteFiles);
            }
            Log.d(TAG, "delete dir : " + file);
            file.delete();
        }
    }

    private boolean isCommonSoft() {
        if ((getDataAppPkgFileName() == null || !getDataAppPkgFileName().exists()) && (getSystemAppPkgFileName() == null || !getSystemAppPkgFileName().exists())) {
            return false;
        }
        return true;
    }

    private boolean isPackageXmlExists() {
        if (this.mPackagexmlFile == null || !this.mPackagexmlFile.exists()) {
            return false;
        }
        return true;
    }

    private File getDataAppPkgFileName() {
        return this.mDataAppPkgNameFile;
    }

    private File getDataAppPathFileName() {
        return this.mDataAppPathNameFile;
    }

    private File getSystemAppPkgFileName() {
        return this.mSystemAppPkgFileName;
    }

    private File getNetLockExpAppPkgFileName() {
        return this.mNetLockExpAppPkgNameFile;
    }

    private File getNetLockExpAppPathFileName() {
        return this.mNetLockExpAppPathNameFile;
    }

    private File getOperatorExpAppPkgFileName() {
        return this.mOperatorExpAppPkgNameFile;
    }

    private File getOperatorExpAppPathFileName() {
        return this.mOperatorExpAppPathNameFile;
    }

    private File getRegionMarkExpAppPkgFileName() {
        return this.mRegionMarkExpAppPkgNameFile;
    }

    private File getRegionMarkExpAppPathFileName() {
        return this.mRegionMarkExpAppPathNameFile;
    }

    private void commonSoftInit() {
        File mSysemRootDir = Environment.getRootDirectory();
        File dataDir = Environment.getDataDirectory();
        this.mDeviceType = SystemProperties.get("ro.commonsoft.product", "oppo");
        this.mSystemEtcDir = new File(mSysemRootDir, "etc");
        this.mDataEngineermodeDir = new File(dataDir, "engineermode");
        this.mDataAppPkgNameFile = new File(this.mDataEngineermodeDir, "persistname_" + this.mDeviceType + ".txt");
        this.mDataAppPathNameFile = new File(this.mDataEngineermodeDir, "persistpath_" + this.mDeviceType + ".txt");
        this.mSystemAppPkgFileName = new File(this.mSystemEtcDir, "systemapp_" + this.mDeviceType + ".txt");
        this.mAppChanelFile = new File(this.mDataEngineermodeDir, "appchannel_" + this.mDeviceType + ".txt");
        this.mNetLockExpAppPkgNameFile = new File(this.mDataEngineermodeDir, "persistname_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mNetLock + ".txt");
        this.mNetLockExpAppPathNameFile = new File(this.mDataEngineermodeDir, "persistpath_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mNetLock + ".txt");
        this.mOperatorExpAppPkgNameFile = new File(this.mDataEngineermodeDir, "persistname_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mOperator + ".txt");
        this.mOperatorExpAppPathNameFile = new File(this.mDataEngineermodeDir, "persistpath_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mOperator + ".txt");
        this.mRegionMarkExpAppPkgNameFile = new File(this.mDataEngineermodeDir, "persistname_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mRegionMark + ".txt");
        this.mRegionMarkExpAppPathNameFile = new File(this.mDataEngineermodeDir, "persistpath_" + this.mDeviceType + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mRegionMark + ".txt");
        this.mDataAppDir = new File(dataDir, "app");
        this.mPackagexmlFile = new File(this.mDataAppDir, "packages.xml");
    }

    /* JADX WARNING: Removed duplicated region for block: B:27:0x0089  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0065  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0065  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x0089  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void deleteAppChannel() {
        IOException e;
        File appChannelDir;
        File[] files;
        Throwable th;
        if (this.mAppChanelFile.exists()) {
            AutoCloseable in = null;
            try {
                BufferedReader in2 = new BufferedReader(new FileReader(this.mAppChanelFile));
                while (true) {
                    try {
                        String line = in2.readLine();
                        if (line == null) {
                            break;
                        }
                        this.mAppChannelArrayList.add(line);
                    } catch (IOException e2) {
                        e = e2;
                        in = in2;
                        try {
                            Slog.e(TAG, "read app channel file IOException " + e);
                            IoUtils.closeQuietly(in);
                            appChannelDir = new File("/data/etc", "appchannel");
                            files = appChannelDir.listFiles();
                            if (ArrayUtils.isEmpty(files)) {
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            IoUtils.closeQuietly(in);
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        Object in3 = in2;
                        IoUtils.closeQuietly(in);
                        throw th;
                    }
                }
                IoUtils.closeQuietly(in2);
            } catch (IOException e3) {
                e = e3;
                Slog.e(TAG, "read app channel file IOException " + e);
                IoUtils.closeQuietly(in);
                appChannelDir = new File("/data/etc", "appchannel");
                files = appChannelDir.listFiles();
                if (ArrayUtils.isEmpty(files)) {
                }
            }
        }
        appChannelDir = new File("/data/etc", "appchannel");
        if (appChannelDir.exists() && this.mAppChannelArrayList.size() > 0) {
            files = appChannelDir.listFiles();
            if (ArrayUtils.isEmpty(files)) {
                Slog.d(TAG, "No files in app channel dir " + appChannelDir);
                return;
            }
            for (File channelFile : files) {
                if (!this.mAppChannelArrayList.contains("/data/etc/appchannel/" + channelFile.getName())) {
                    Slog.d(TAG, "deleteFiles channelFile=" + channelFile.getName());
                    deleteFiles(channelFile);
                }
            }
        }
    }

    private boolean isInternetDownload() {
        IOException e;
        Object in;
        Throwable th;
        File file = new File("/proc/oppoCustom/DownloadTime");
        AutoCloseable in2 = null;
        boolean isInternetDownload = false;
        if (!file.exists()) {
            return false;
        }
        try {
            BufferedReader in3 = new BufferedReader(new FileReader(file));
            while (true) {
                try {
                    String line = in3.readLine();
                    if (line == null) {
                        break;
                    } else if (line.contains("Status:internet")) {
                        isInternetDownload = true;
                    }
                } catch (IOException e2) {
                    e = e2;
                    in2 = in3;
                    try {
                        Slog.e(TAG, "read DownloadTime file IOException " + e);
                        IoUtils.closeQuietly(in2);
                        return isInternetDownload;
                    } catch (Throwable th2) {
                        th = th2;
                        IoUtils.closeQuietly(in2);
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    in2 = in3;
                    IoUtils.closeQuietly(in2);
                    throw th;
                }
            }
            IoUtils.closeQuietly(in3);
            BufferedReader bufferedReader = in3;
        } catch (IOException e3) {
            e = e3;
            Slog.e(TAG, "read DownloadTime file IOException " + e);
            IoUtils.closeQuietly(in2);
            return isInternetDownload;
        }
        return isInternetDownload;
    }

    /* JADX WARNING: Removed duplicated region for block: B:40:0x019c  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x010a  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x010a  */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x019c  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void deleteDataReserveApps() {
        IOException e;
        File dataReserveDir;
        File[] files;
        Throwable th;
        boolean isFromAdbClear = SystemProperties.get("persist.sys.oppo.fromadbclear", "false").equalsIgnoreCase("true");
        boolean isInternetDownload = isInternetDownload();
        Slog.d(TAG, "deleteDataReserveApps isFromAdbClear=" + isFromAdbClear + ",isInternetDownload=" + isInternetDownload);
        if (isFromAdbClear || isInternetDownload) {
            String whiteListFileName = "persistname_" + this.mDeviceType;
            if (!IElsaManager.EMPTY_PACKAGE.equals(mOperator)) {
                whiteListFileName = whiteListFileName + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mOperator + ".txt";
            } else if (!IElsaManager.EMPTY_PACKAGE.equals(mNetLock)) {
                whiteListFileName = whiteListFileName + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mNetLock + ".txt";
            } else if (IElsaManager.EMPTY_PACKAGE.equals(mRegionMark)) {
                whiteListFileName = whiteListFileName + ".txt";
            } else {
                whiteListFileName = whiteListFileName + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT + mRegionMark + ".txt";
            }
            File file = new File(this.mDataEngineermodeDir, whiteListFileName);
            List<String> dataReserveAppList = new ArrayList();
            if (file.exists()) {
                AutoCloseable in = null;
                try {
                    BufferedReader in2 = new BufferedReader(new FileReader(file));
                    while (true) {
                        try {
                            String line = in2.readLine();
                            if (line == null) {
                                break;
                            }
                            dataReserveAppList.add(line);
                        } catch (IOException e2) {
                            e = e2;
                            in = in2;
                            try {
                                Slog.e(TAG, "read whiteListFile IOException " + e);
                                IoUtils.closeQuietly(in);
                                dataReserveDir = new File("/data", "reserve");
                                files = dataReserveDir.listFiles();
                                if (ArrayUtils.isEmpty(files)) {
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                IoUtils.closeQuietly(in);
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            Object in3 = in2;
                            IoUtils.closeQuietly(in);
                            throw th;
                        }
                    }
                    IoUtils.closeQuietly(in2);
                } catch (IOException e3) {
                    e = e3;
                    Slog.e(TAG, "read whiteListFile IOException " + e);
                    IoUtils.closeQuietly(in);
                    dataReserveDir = new File("/data", "reserve");
                    files = dataReserveDir.listFiles();
                    if (ArrayUtils.isEmpty(files)) {
                    }
                }
            }
            dataReserveDir = new File("/data", "reserve");
            if (dataReserveDir.exists() && dataReserveAppList.size() > 0) {
                files = dataReserveDir.listFiles();
                if (ArrayUtils.isEmpty(files)) {
                    Slog.d(TAG, "No files in data reserve dir");
                    return;
                }
                for (File file2 : files) {
                    boolean willDeletFile = true;
                    if (EXP_VERSION) {
                        if (file2.isDirectory()) {
                            if (!IElsaManager.EMPTY_PACKAGE.equals(mOperator) && file2.getName().contains("data_app_" + mOperator)) {
                                willDeletFile = false;
                            }
                            if (!IElsaManager.EMPTY_PACKAGE.equals(mNetLock) && file2.getName().contains("data_app_" + mNetLock)) {
                                willDeletFile = false;
                            }
                            if (!IElsaManager.EMPTY_PACKAGE.equals(mRegionMark) && file2.getName().contains("data_app_" + mRegionMark)) {
                                willDeletFile = false;
                            }
                            if (!IElsaManager.EMPTY_PACKAGE.equals(mCrossFlag) && file2.getName().contains("data_app_" + mCrossFlag)) {
                                willDeletFile = false;
                            }
                        } else if (file2.getName().contains("-9.apk")) {
                            willDeletFile = false;
                        }
                    } else if (file2.getName().contains("-0.apk")) {
                        willDeletFile = false;
                    } else if (file2.getName().contains(INSTALL_PACKAGE_SUFFIX)) {
                        String fileName = file2.getName();
                        String packageName = fileName.substring(0, fileName.indexOf(INSTALL_PACKAGE_SUFFIX));
                        String projectFile = fileName.substring(fileName.indexOf(INSTALL_PACKAGE_SUFFIX) + 1, fileName.indexOf(INSTALL_PACKAGE_SUFFIX) + 4);
                        String project = SystemProperties.get("ro.separate.soft", "opposproject").substring(2);
                        if (dataReserveAppList.contains(packageName) && project.equals(projectFile)) {
                            willDeletFile = false;
                        }
                    }
                    if (willDeletFile) {
                        Slog.d(TAG, "will delete /data/reserve/=" + file2);
                        deleteFiles(file2);
                    }
                }
            }
            SystemProperties.set("persist.sys.oppo.fromadbclear", "false");
        }
    }

    public boolean isFirstBoot() {
        return this.mFirstBoot;
    }

    public boolean isOnlyCoreApps() {
        return this.mOnlyCore;
    }

    public boolean isUpgrade() {
        return this.mIsUpgrade;
    }

    private String getRequiredButNotReallyRequiredVerifierLPr() {
        List<ResolveInfo> matches = queryIntentReceiversInternal(new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION"), PACKAGE_MIME_TYPE, 1835008, 0);
        if (matches.size() == 1) {
            return ((ResolveInfo) matches.get(0)).getComponentInfo().packageName;
        }
        if (matches.size() == 0) {
            Log.e(TAG, "There should probably be a verifier, but, none were found");
            return null;
        }
        throw new RuntimeException("There must be exactly one verifier; found " + matches);
    }

    private String getRequiredSharedLibraryLPr(String libraryName) {
        String str;
        synchronized (this.mPackages) {
            SharedLibraryEntry libraryEntry = (SharedLibraryEntry) this.mSharedLibraries.get(libraryName);
            if (libraryEntry == null) {
                throw new IllegalStateException("Missing required shared library:" + libraryName);
            }
            str = libraryEntry.apk;
        }
        return str;
    }

    private String getRequiredInstallerLPr() {
        Intent intent = new Intent("android.intent.action.INSTALL_PACKAGE");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setDataAndType(Uri.fromFile(new File("foo.apk")), PACKAGE_MIME_TYPE);
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, PACKAGE_MIME_TYPE, 1835008, 0);
        if (matches.size() != 1) {
            throw new RuntimeException("There must be exactly one installer; found " + matches);
        } else if (((ResolveInfo) matches.get(0)).activityInfo.applicationInfo.isPrivilegedApp()) {
            return ((ResolveInfo) matches.get(0)).getComponentInfo().packageName;
        } else {
            throw new RuntimeException("The installer must be a privileged app");
        }
    }

    private String getRequiredUninstallerLPr() {
        Intent intent = new Intent("android.intent.action.UNINSTALL_PACKAGE");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setData(Uri.fromParts(PACKAGE_SCHEME, "foo.bar", null));
        ResolveInfo resolveInfo = resolveIntent(intent, null, 1835008, 0);
        if (resolveInfo != null && !this.mResolveActivity.name.equals(resolveInfo.getComponentInfo().name)) {
            return resolveInfo.getComponentInfo().packageName;
        }
        throw new RuntimeException("There must be exactly one uninstaller; found " + resolveInfo);
    }

    private ComponentName getIntentFilterVerifierComponentNameLPr() {
        List<ResolveInfo> matches = queryIntentReceiversInternal(new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION"), PACKAGE_MIME_TYPE, 1835008, 0);
        ResolveInfo best = null;
        int N = matches.size();
        for (int i = 0; i < N; i++) {
            ResolveInfo cur = (ResolveInfo) matches.get(i);
            if (checkPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", cur.getComponentInfo().packageName, 0) == 0 && (best == null || cur.priority > best.priority)) {
                best = cur;
            }
        }
        if (best != null) {
            return best.getComponentInfo().getComponentName();
        }
        Slog.wtf(TAG, "Verifier Package was null!", new Throwable());
        return null;
    }

    private ComponentName getEphemeralResolverLPr() {
        String[] packageArray = this.mContext.getResources().getStringArray(17236015);
        if (packageArray.length != 0 || Build.IS_DEBUGGABLE) {
            int i;
            if (Build.IS_DEBUGGABLE) {
                i = 0;
            } else {
                i = DumpState.DUMP_DEXOPT;
            }
            List<ResolveInfo> resolvers = queryIntentServicesInternal(new Intent("android.intent.action.RESOLVE_EPHEMERAL_PACKAGE"), null, 786432 | i, 0);
            int N = resolvers.size();
            if (N == 0) {
                if (DEBUG_EPHEMERAL) {
                    Slog.d(TAG, "Ephemeral resolver NOT found; no matching intent filters");
                }
                return null;
            }
            Set<String> possiblePackages = new ArraySet(Arrays.asList(packageArray));
            for (int i2 = 0; i2 < N; i2++) {
                ResolveInfo info = (ResolveInfo) resolvers.get(i2);
                if (info.serviceInfo != null) {
                    String packageName = info.serviceInfo.packageName;
                    if (possiblePackages.contains(packageName) || Build.IS_DEBUGGABLE) {
                        if (DEBUG_EPHEMERAL) {
                            Slog.v(TAG, "Ephemeral resolver found; pkg: " + packageName + ", info:" + info);
                        }
                        return new ComponentName(packageName, info.serviceInfo.name);
                    } else if (DEBUG_EPHEMERAL) {
                        Slog.d(TAG, "Ephemeral resolver not in allowed package list; pkg: " + packageName + ", info:" + info);
                    }
                }
            }
            if (DEBUG_EPHEMERAL) {
                Slog.v(TAG, "Ephemeral resolver NOT found");
            }
            return null;
        }
        if (DEBUG_EPHEMERAL) {
            Slog.d(TAG, "Ephemeral resolver NOT found; empty package list");
        }
        return null;
    }

    private ComponentName getEphemeralInstallerLPr() {
        int i;
        Intent intent = new Intent("android.intent.action.INSTALL_EPHEMERAL_PACKAGE");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setDataAndType(Uri.fromFile(new File("foo.apk")), PACKAGE_MIME_TYPE);
        if (Build.IS_DEBUGGABLE) {
            i = 0;
        } else {
            i = DumpState.DUMP_DEXOPT;
        }
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, PACKAGE_MIME_TYPE, 786432 | i, 0);
        if (matches.size() == 0) {
            return null;
        }
        if (matches.size() == 1) {
            return ((ResolveInfo) matches.get(0)).getComponentInfo().getComponentName();
        }
        throw new RuntimeException("There must be at most one ephemeral installer; found " + matches);
    }

    private void primeDomainVerificationsLPw(int userId) {
        if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.d(TAG, "Priming domain verifications in user " + userId);
        }
        ArraySet<String> packages = SystemConfig.getInstance().getLinkedApps();
        ArraySet<String> domains = new ArraySet();
        for (String packageName : packages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                Slog.w(TAG, "Unknown package " + packageName + " in sysconfig <app-link>");
            } else if (pkg.isSystemApp()) {
                domains.clear();
                for (Activity a : pkg.activities) {
                    for (ActivityIntentInfo filter : a.intents) {
                        if (hasValidDomains(filter)) {
                            domains.addAll(filter.getHostsList());
                        }
                    }
                }
                if (domains.size() > 0) {
                    if (DEBUG_DOMAIN_VERIFICATION) {
                        Slog.v(TAG, "      + " + packageName);
                    }
                    this.mSettings.createIntentFilterVerificationIfNeededLPw(packageName, new ArrayList(domains)).setStatus(0);
                    this.mSettings.updateIntentFilterVerificationStatusLPw(packageName, 2, userId);
                } else if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.w(TAG, "Sysconfig <app-link> package '" + packageName + "' does not handle web links");
                }
            } else if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                Slog.w(TAG, "Non-system app '" + packageName + "' in sysconfig <app-link>");
            }
        }
        scheduleWritePackageRestrictionsLocked(userId);
        scheduleWriteSettingsLocked();
    }

    private void applyFactoryDefaultBrowserLPw(int userId) {
        String browserPkg = this.mContext.getResources().getString(17039432);
        if (!TextUtils.isEmpty(browserPkg)) {
            if (((PackageSetting) this.mSettings.mPackages.get(browserPkg)) == null) {
                Slog.e(TAG, "Product default browser app does not exist: " + browserPkg);
                browserPkg = null;
            } else {
                this.mSettings.setDefaultBrowserPackageNameLPw(browserPkg, userId);
            }
        }
        if (browserPkg == null) {
            calculateDefaultBrowserLPw(userId);
        }
    }

    private void calculateDefaultBrowserLPw(int userId) {
        List<String> allBrowsers = resolveAllBrowserApps(userId);
        this.mSettings.setDefaultBrowserPackageNameLPw(allBrowsers.size() == 1 ? (String) allBrowsers.get(0) : null, userId);
    }

    private List<String> resolveAllBrowserApps(int userId) {
        List<ResolveInfo> list = queryIntentActivitiesInternal(sBrowserIntent, null, 131072, userId);
        int count = list.size();
        List<String> result = new ArrayList(count);
        for (int i = 0; i < count; i++) {
            ResolveInfo info = (ResolveInfo) list.get(i);
            if (!(info.activityInfo == null || !info.handleAllWebDataURI || (info.activityInfo.applicationInfo.flags & 1) == 0 || result.contains(info.activityInfo.packageName))) {
                result.add(info.activityInfo.packageName);
            }
        }
        return result;
    }

    private boolean packageIsBrowser(String packageName, int userId) {
        List<ResolveInfo> list = queryIntentActivitiesInternal(sBrowserIntent, null, 131072, userId);
        int N = list.size();
        for (int i = 0; i < N; i++) {
            if (packageName.equals(((ResolveInfo) list.get(i)).activityInfo.packageName)) {
                return true;
            }
        }
        return false;
    }

    private void checkDefaultBrowser() {
        int myUserId = UserHandle.myUserId();
        String packageName = getDefaultBrowserPackageName(myUserId);
        if (packageName != null && getPackageInfo(packageName, 0, myUserId) == null) {
            Slog.w(TAG, "Default browser no longer installed: " + packageName);
            synchronized (this.mPackages) {
                applyFactoryDefaultBrowserLPw(myUserId);
            }
        }
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        try {
            return super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e) {
            if (!((e instanceof SecurityException) || (e instanceof IllegalArgumentException))) {
                Slog.wtf(TAG, "Package Manager Crash", e);
            }
            throw e;
        }
    }

    static int[] appendInts(int[] cur, int[] add) {
        if (add == null) {
            return cur;
        }
        if (cur == null) {
            return add;
        }
        for (int appendInt : add) {
            cur = ArrayUtils.appendInt(cur, appendInt);
        }
        return cur;
    }

    private PackageInfo generatePackageInfo(PackageSetting ps, int flags, int userId) {
        if (!sUserManager.exists(userId) || ps == null) {
            return null;
        }
        Package p = ps.pkg;
        if (p == null) {
            return null;
        }
        PermissionsState permissionsState = ps.getPermissionsState();
        return PackageParser.generatePackageInfo(p, (flags & 256) == 0 ? EMPTY_INT_ARRAY : permissionsState.computeGids(userId), flags, ps.firstInstallTime, ps.lastUpdateTime, ArrayUtils.isEmpty(p.requestedPermissions) ? Collections.emptySet() : permissionsState.getPermissions(userId), ps.readUserState(userId), userId);
    }

    public void checkPackageStartable(String packageName, int userId) {
        boolean userKeyUnlocked = StorageManager.isUserKeyUnlocked(userId);
        synchronized (this.mPackages) {
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                throw new SecurityException("Package " + packageName + " was not found!");
            } else if (!ps.getInstalled(userId)) {
                throw new SecurityException("Package " + packageName + " was not installed for user " + userId + "!");
            } else if (this.mSafeMode && !ps.isSystem()) {
                throw new SecurityException("Package " + packageName + " not a system app!");
            } else if (this.mFrozenPackages.contains(packageName)) {
                throw new SecurityException("Package " + packageName + " is currently frozen!");
            } else if (userKeyUnlocked || ps.pkg.applicationInfo.isDirectBootAware() || ps.pkg.applicationInfo.isPartiallyDirectBootAware()) {
            } else {
                Log.v(TAG, " userKeyUnlocked = " + userKeyUnlocked);
                Log.v(TAG, " isDirectBootAware = " + ps.pkg.applicationInfo.isDirectBootAware());
                Log.v(TAG, " isPartiallyDirectBootAware = " + ps.pkg.applicationInfo.isPartiallyDirectBootAware());
                throw new SecurityException("Package " + packageName + " is not encryption aware!");
            }
        }
    }

    /* JADX WARNING: Missing block: B:16:0x0037, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isPackageAvailable(String packageName, int userId) {
        if (!sUserManager.exists(userId)) {
            return false;
        }
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "is package available");
        synchronized (this.mPackages) {
            Package p = (Package) this.mPackages.get(packageName);
            if (p != null) {
                PackageSetting ps = p.mExtras;
                if (ps != null) {
                    PackageUserState state = ps.readUserState(userId);
                    if (state != null) {
                        boolean isAvailable = PackageParser.isAvailable(state);
                        return isAvailable;
                    }
                }
            }
        }
    }

    /* JADX WARNING: Missing block: B:53:0x00c5, code:
            r8 = getMiniProgramSignature(r13);
     */
    /* JADX WARNING: Missing block: B:54:0x00c9, code:
            if (r8 == null) goto L_0x00d3;
     */
    /* JADX WARNING: Missing block: B:56:0x00cf, code:
            return getMiniProgramPackageInfo(r13, r8);
     */
    /* JADX WARNING: Missing block: B:60:0x00d3, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public PackageInfo getPackageInfo(String packageName, int flags, int userId) {
        if ((flags & 134217728) == 0 && userId == OppoMultiAppManager.USER_ID && packageName != null && !OppoMultiLauncherUtil.getInstance().isMultiApp(packageName)) {
            userId = 0;
        } else if (!((flags & 134217728) == 0 || userId != OppoMultiAppManager.USER_ID || OppoMultiLauncherUtil.getInstance().isMultiApp(packageName))) {
            return null;
        }
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForPackage(flags, userId, packageName);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get package info");
        synchronized (this.mPackages) {
            boolean matchFactoryOnly;
            PackageInfo generatePackageInfo;
            packageName = normalizePackageNameLPr(packageName);
            if ((DumpState.DUMP_COMPILER_STATS & flags) != 0) {
                matchFactoryOnly = true;
            } else {
                matchFactoryOnly = false;
            }
            if (matchFactoryOnly) {
                PackageSetting ps = this.mSettings.getDisabledSystemPkgLPr(packageName);
                if (ps != null) {
                    generatePackageInfo = generatePackageInfo(ps, flags, userId);
                    return generatePackageInfo;
                }
            }
            Package p = (Package) this.mPackages.get(packageName);
            if (!matchFactoryOnly || p == null || isSystemApp(p)) {
                if (DEBUG_PACKAGE_INFO) {
                    Log.v(TAG, "getPackageInfo " + packageName + ": " + p);
                }
                if (p != null) {
                    generatePackageInfo = generatePackageInfo((PackageSetting) p.mExtras, flags, userId);
                    return generatePackageInfo;
                } else if (matchFactoryOnly || (flags & 8192) == 0) {
                } else {
                    generatePackageInfo = generatePackageInfo((PackageSetting) this.mSettings.mPackages.get(packageName), flags, userId);
                    return generatePackageInfo;
                }
            }
            return null;
        }
    }

    public String[] currentToCanonicalPackageNames(String[] names) {
        String[] out = new String[names.length];
        synchronized (this.mPackages) {
            int i = names.length - 1;
            while (i >= 0) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(names[i]);
                String str = (ps == null || ps.realName == null) ? names[i] : ps.realName;
                out[i] = str;
                i--;
            }
        }
        return out;
    }

    public String[] canonicalToCurrentPackageNames(String[] names) {
        String[] out = new String[names.length];
        synchronized (this.mPackages) {
            for (int i = names.length - 1; i >= 0; i--) {
                String cur = (String) this.mSettings.mRenamedPackages.get(names[i]);
                if (cur == null) {
                    cur = names[i];
                }
                out[i] = cur;
            }
        }
        return out;
    }

    /* JADX WARNING: Missing block: B:24:0x0058, code:
            return -1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int getPackageUid(String packageName, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return -1;
        }
        flags = updateFlagsForPackage(flags, userId, packageName);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get package uid");
        synchronized (this.mPackages) {
            Package p = (Package) this.mPackages.get(packageName);
            int uid;
            if (p != null && p.isMatch(flags)) {
                uid = UserHandle.getUid(userId, p.applicationInfo.uid);
                return uid;
            } else if ((flags & 8192) != 0) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps != null && ps.isMatch(flags)) {
                    uid = UserHandle.getUid(userId, ps.appId);
                    return uid;
                }
            }
        }
    }

    /* JADX WARNING: Missing block: B:24:0x005e, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int[] getPackageGids(String packageName, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForPackage(flags, userId, packageName);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "getPackageGids");
        synchronized (this.mPackages) {
            Package p = (Package) this.mPackages.get(packageName);
            int[] computeGids;
            if (p != null && p.isMatch(flags)) {
                computeGids = p.mExtras.getPermissionsState().computeGids(userId);
                return computeGids;
            } else if ((flags & 8192) != 0) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps != null && ps.isMatch(flags)) {
                    computeGids = ps.getPermissionsState().computeGids(userId);
                    return computeGids;
                }
            }
        }
    }

    static PermissionInfo generatePermissionInfo(BasePermission bp, int flags) {
        if (bp.perm != null) {
            return PackageParser.generatePermissionInfo(bp.perm, flags);
        }
        PermissionInfo pi = new PermissionInfo();
        pi.name = bp.name;
        pi.packageName = bp.sourcePackage;
        pi.nonLocalizedLabel = bp.name;
        pi.protectionLevel = bp.protectionLevel;
        return pi;
    }

    public PermissionInfo getPermissionInfo(String name, int flags) {
        synchronized (this.mPackages) {
            BasePermission p = (BasePermission) this.mSettings.mPermissions.get(name);
            if (p != null) {
                PermissionInfo generatePermissionInfo = generatePermissionInfo(p, flags);
                return generatePermissionInfo;
            }
            return null;
        }
    }

    public ParceledListSlice<PermissionInfo> queryPermissionsByGroup(String group, int flags) {
        synchronized (this.mPackages) {
            if (group != null) {
                if (!this.mPermissionGroups.containsKey(group)) {
                    return null;
                }
            }
            ArrayList<PermissionInfo> out = new ArrayList(10);
            for (BasePermission p : this.mSettings.mPermissions.values()) {
                if (group == null) {
                    if (p.perm == null || p.perm.info.group == null) {
                        out.add(generatePermissionInfo(p, flags));
                    }
                } else if (p.perm != null && group.equals(p.perm.info.group)) {
                    out.add(PackageParser.generatePermissionInfo(p.perm, flags));
                }
            }
            ParceledListSlice<PermissionInfo> parceledListSlice = new ParceledListSlice(out);
            return parceledListSlice;
        }
    }

    public PermissionGroupInfo getPermissionGroupInfo(String name, int flags) {
        PermissionGroupInfo generatePermissionGroupInfo;
        synchronized (this.mPackages) {
            generatePermissionGroupInfo = PackageParser.generatePermissionGroupInfo((PermissionGroup) this.mPermissionGroups.get(name), flags);
        }
        return generatePermissionGroupInfo;
    }

    public ParceledListSlice<PermissionGroupInfo> getAllPermissionGroups(int flags) {
        ParceledListSlice<PermissionGroupInfo> parceledListSlice;
        synchronized (this.mPackages) {
            ArrayList<PermissionGroupInfo> out = new ArrayList(this.mPermissionGroups.size());
            for (PermissionGroup pg : this.mPermissionGroups.values()) {
                out.add(PackageParser.generatePermissionGroupInfo(pg, flags));
            }
            parceledListSlice = new ParceledListSlice(out);
        }
        return parceledListSlice;
    }

    private ApplicationInfo generateApplicationInfoFromSettingsLPw(String packageName, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
        if (ps == null) {
            return null;
        }
        if (ps.pkg != null) {
            return PackageParser.generateApplicationInfo(ps.pkg, flags, ps.readUserState(userId), userId);
        }
        PackageInfo pInfo = generatePackageInfo(ps, flags, userId);
        if (pInfo != null) {
            return pInfo.applicationInfo;
        }
        return null;
    }

    public ApplicationInfo getApplicationInfo(String packageName, int flags, int userId) {
        if (((134217728 & flags) != 0 && userId == OppoMultiAppManager.USER_ID && !OppoMultiLauncherUtil.getInstance().isMultiApp(packageName)) || !sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForApplication(flags, userId, packageName);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get application info");
        synchronized (this.mPackages) {
            packageName = normalizePackageNameLPr(packageName);
            Package p = (Package) this.mPackages.get(packageName);
            if (DEBUG_PACKAGE_INFO) {
                Log.v(TAG, "getApplicationInfo " + packageName + ": " + p);
            }
            ApplicationInfo generateApplicationInfo;
            if (p != null) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps == null) {
                    return null;
                }
                generateApplicationInfo = PackageParser.generateApplicationInfo(p, flags, ps.readUserState(userId), userId);
                return generateApplicationInfo;
            } else if (PLATFORM_PACKAGE_NAME.equals(packageName) || "system".equals(packageName)) {
                generateApplicationInfo = this.mAndroidApplication;
                return generateApplicationInfo;
            } else if ((flags & 8192) != 0) {
                generateApplicationInfo = generateApplicationInfoFromSettingsLPw(packageName, flags, userId);
                return generateApplicationInfo;
            } else {
                return null;
            }
        }
    }

    private String normalizePackageNameLPr(String packageName) {
        String normalizedPackageName = (String) this.mSettings.mRenamedPackages.get(packageName);
        return normalizedPackageName != null ? normalizedPackageName : packageName;
    }

    public void freeStorageAndNotify(String volumeUuid, long freeStorageSize, IPackageDataObserver observer) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", null);
        final String str = volumeUuid;
        final long j = freeStorageSize;
        final IPackageDataObserver iPackageDataObserver = observer;
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerService.this.mHandler.removeCallbacks(this);
                boolean success = true;
                synchronized (PackageManagerService.this.mInstallLock) {
                    try {
                        PackageManagerService.this.mInstaller.freeCache(str, j);
                    } catch (InstallerException e) {
                        Slog.w(PackageManagerService.TAG, "Couldn't clear application caches: " + e);
                        success = false;
                    }
                }
                if (iPackageDataObserver != null) {
                    try {
                        iPackageDataObserver.onRemoveCompleted(null, success);
                    } catch (RemoteException e2) {
                        Slog.w(PackageManagerService.TAG, "RemoveException when invoking call back");
                    }
                }
            }
        });
    }

    public void freeStorage(String volumeUuid, long freeStorageSize, IntentSender pi) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", null);
        final String str = volumeUuid;
        final long j = freeStorageSize;
        final IntentSender intentSender = pi;
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerService.this.mHandler.removeCallbacks(this);
                boolean success = true;
                synchronized (PackageManagerService.this.mInstallLock) {
                    try {
                        PackageManagerService.this.mInstaller.freeCache(str, j);
                    } catch (InstallerException e) {
                        Slog.w(PackageManagerService.TAG, "Couldn't clear application caches: " + e);
                        success = false;
                    }
                }
                if (intentSender != null) {
                    try {
                        intentSender.sendIntent(null, success ? 1 : 0, null, null, null);
                    } catch (SendIntentException e2) {
                        Slog.i(PackageManagerService.TAG, "Failed to send pending intent");
                    }
                }
            }
        });
    }

    void freeStorage(String volumeUuid, long freeStorageSize) throws IOException {
        synchronized (this.mInstallLock) {
            try {
                this.mInstaller.freeCache(volumeUuid, freeStorageSize);
            } catch (InstallerException e) {
                throw new IOException("Failed to free enough space", e);
            }
        }
    }

    private int updateFlags(int flags, int userId) {
        if ((flags & 786432) != 0) {
            return flags;
        }
        if (getUserManagerInternal().isUserUnlockingOrUnlocked(userId)) {
            return flags | 786432;
        }
        return flags | DumpState.DUMP_FROZEN;
    }

    private UserManagerInternal getUserManagerInternal() {
        if (this.mUserManagerInternal == null) {
            this.mUserManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
        }
        return this.mUserManagerInternal;
    }

    private int updateFlagsForPackage(int flags, int userId, Object cookie) {
        boolean triaged = true;
        if ((flags & 15) != 0 && (269221888 & flags) == 0) {
            triaged = false;
        }
        if ((269492224 & flags) == 0) {
            triaged = false;
        }
        if (DEBUG_TRIAGED_MISSING && Binder.getCallingUid() == 1000 && !triaged) {
            Log.w(TAG, "Caller hasn't been triaged for missing apps; they asked about " + cookie + " with flags 0x" + Integer.toHexString(flags), new Throwable());
        }
        return updateFlags(flags, userId);
    }

    private int updateFlagsForApplication(int flags, int userId, Object cookie) {
        return updateFlagsForPackage(flags, userId, cookie);
    }

    private int updateFlagsForComponent(int flags, int userId, Object cookie) {
        if ((cookie instanceof Intent) && (((Intent) cookie).getFlags() & 256) != 0) {
            flags |= 268435456;
        }
        boolean triaged = true;
        if ((269221888 & flags) == 0) {
            triaged = false;
        }
        if (DEBUG_TRIAGED_MISSING && Binder.getCallingUid() == 1000 && !triaged) {
            Log.w(TAG, "Caller hasn't been triaged for missing apps; they asked about " + cookie + " with flags 0x" + Integer.toHexString(flags), new Throwable());
        }
        return updateFlags(flags, userId);
    }

    int updateFlagsForResolve(int flags, int userId, Object cookie) {
        if (this.mSafeMode) {
            flags |= DumpState.DUMP_DEXOPT;
        }
        return updateFlagsForComponent(flags, userId, cookie);
    }

    public ActivityInfo getActivityInfo(ComponentName component, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForComponent(flags, userId, component);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get activity info");
        synchronized (this.mPackages) {
            Activity a = (Activity) this.mActivities.mActivities.get(component);
            if (DEBUG_PACKAGE_INFO) {
                Log.v(TAG, "getActivityInfo " + component + ": " + a);
            }
            ActivityInfo generateActivityInfo;
            if (a != null && this.mSettings.isEnabledAndMatchLPr(a.info, flags, userId)) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(component.getPackageName());
                if (ps == null) {
                    return null;
                }
                generateActivityInfo = PackageParser.generateActivityInfo(a, flags, ps.readUserState(userId), userId);
                return generateActivityInfo;
            } else if (this.mResolveComponentName.equals(component)) {
                generateActivityInfo = PackageParser.generateActivityInfo(this.mResolveActivity, flags, new PackageUserState(), userId);
                return generateActivityInfo;
            } else {
                return null;
            }
        }
    }

    public boolean activitySupportsIntent(ComponentName component, Intent intent, String resolvedType) {
        synchronized (this.mPackages) {
            if (component.equals(this.mResolveComponentName)) {
                return true;
            }
            Activity a = (Activity) this.mActivities.mActivities.get(component);
            if (a == null) {
                return false;
            }
            for (int i = 0; i < a.intents.size(); i++) {
                if (((ActivityIntentInfo) a.intents.get(i)).match(intent.getAction(), resolvedType, intent.getScheme(), intent.getData(), intent.getCategories(), TAG) >= 0) {
                    return true;
                }
            }
            return false;
        }
    }

    /* JADX WARNING: Missing block: B:21:0x007d, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public ActivityInfo getReceiverInfo(ComponentName component, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForComponent(flags, userId, component);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get receiver info");
        synchronized (this.mPackages) {
            Activity a = (Activity) this.mReceivers.mActivities.get(component);
            if (DEBUG_PACKAGE_INFO) {
                Log.v(TAG, "getReceiverInfo " + component + ": " + a);
            }
            if (a == null || !this.mSettings.isEnabledAndMatchLPr(a.info, flags, userId)) {
            } else {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(component.getPackageName());
                if (ps == null) {
                    return null;
                }
                ActivityInfo generateActivityInfo = PackageParser.generateActivityInfo(a, flags, ps.readUserState(userId), userId);
                return generateActivityInfo;
            }
        }
    }

    /* JADX WARNING: Missing block: B:21:0x007d, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public ServiceInfo getServiceInfo(ComponentName component, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForComponent(flags, userId, component);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get service info");
        synchronized (this.mPackages) {
            Service s = (Service) this.mServices.mServices.get(component);
            if (DEBUG_PACKAGE_INFO) {
                Log.v(TAG, "getServiceInfo " + component + ": " + s);
            }
            if (s == null || !this.mSettings.isEnabledAndMatchLPr(s.info, flags, userId)) {
            } else {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(component.getPackageName());
                if (ps == null) {
                    return null;
                }
                ServiceInfo generateServiceInfo = PackageParser.generateServiceInfo(s, flags, ps.readUserState(userId), userId);
                return generateServiceInfo;
            }
        }
    }

    /* JADX WARNING: Missing block: B:21:0x007d, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public ProviderInfo getProviderInfo(ComponentName component, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForComponent(flags, userId, component);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get provider info");
        synchronized (this.mPackages) {
            Provider p = (Provider) this.mProviders.mProviders.get(component);
            if (DEBUG_PACKAGE_INFO) {
                Log.v(TAG, "getProviderInfo " + component + ": " + p);
            }
            if (p == null || !this.mSettings.isEnabledAndMatchLPr(p.info, flags, userId)) {
            } else {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(component.getPackageName());
                if (ps == null) {
                    return null;
                }
                ProviderInfo generateProviderInfo = PackageParser.generateProviderInfo(p, flags, ps.readUserState(userId), userId);
                return generateProviderInfo;
            }
        }
    }

    public String[] getSystemSharedLibraryNames() {
        synchronized (this.mPackages) {
            Set<String> libSet = this.mSharedLibraries.keySet();
            int size = libSet.size();
            if (size > 0) {
                String[] libs = new String[size];
                libSet.toArray(libs);
                return libs;
            }
            return null;
        }
    }

    public String getServicesSystemSharedLibraryPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mServicesSystemSharedLibraryPackageName;
        }
        return str;
    }

    public String getSharedSystemSharedLibraryPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mSharedSystemSharedLibraryPackageName;
        }
        return str;
    }

    public ParceledListSlice<FeatureInfo> getSystemAvailableFeatures() {
        ParceledListSlice<FeatureInfo> parceledListSlice;
        synchronized (this.mPackages) {
            ArrayList<FeatureInfo> res = new ArrayList(this.mAvailableFeatures.values());
            FeatureInfo fi = new FeatureInfo();
            fi.reqGlEsVersion = SystemProperties.getInt("ro.opengles.version", 0);
            res.add(fi);
            parceledListSlice = new ParceledListSlice(res);
        }
        return parceledListSlice;
    }

    /* JADX WARNING: Missing block: B:33:0x0093, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean loadRegionFeature(String name) {
        String callerName = getNameForUid(Binder.getCallingUid());
        Slog.d(TAG, "loadRegionFeature callerName = " + callerName);
        if (!(callerName == null || callerName.contains("android.uid.system"))) {
            synchronized (this.mPackages) {
                Package pkg = (Package) this.mPackages.get(callerName);
                if (pkg == null || pkg.applicationInfo.isSystemApp()) {
                } else {
                    Slog.d(TAG, "this is not system app : " + callerName);
                    return false;
                }
            }
        }
        SystemConfig systemConfig = SystemConfig.getInstance();
        synchronized (this.mPackages) {
            ArrayMap<String, FeatureInfo> tmp = systemConfig.loadOppoAvailableFeatures(name);
            if (tmp == null || tmp.size() <= 0) {
            } else {
                clearOppoFeatureMap();
                this.mOppoAvailableFeatures = tmp;
                SystemProperties.set("persist.sys.oppo.region", name);
                if (this.mSystemReady) {
                    this.mHandler.postDelayed(this.mClearSystemApp, 1000);
                }
                return true;
            }
        }
    }

    private void clearOppoFeatureMap() {
        if (this.mOppoAvailableFeatures != null) {
            this.mOppoAvailableFeatures = null;
        }
    }

    public FeatureInfo[] getOppoSystemAvailableFeatures() {
        synchronized (this.mPackages) {
            if (this.mOppoAvailableFeatures == null) {
                return null;
            }
            Collection<FeatureInfo> featSet = this.mOppoAvailableFeatures.values();
            int size = featSet.size();
            if (size > 0) {
                FeatureInfo[] features = new FeatureInfo[(size + 1)];
                featSet.toArray(features);
                FeatureInfo fi = new FeatureInfo();
                fi.reqGlEsVersion = SystemProperties.getInt("ro.opengles.version", 0);
                features[size] = fi;
                return features;
            }
            return null;
        }
    }

    /* JADX WARNING: Missing block: B:18:0x0024, code:
            return r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean hasSystemFeature(String name, int version) {
        boolean z = true;
        synchronized (this.mPackages) {
            if (this.mOppoAvailableFeatures == null || !this.mOppoAvailableFeatures.containsKey(name)) {
                FeatureInfo feat = (FeatureInfo) this.mAvailableFeatures.get(name);
                if (feat == null) {
                    return false;
                } else if (feat.version < version) {
                    z = false;
                }
            } else {
                return true;
            }
        }
    }

    /* JADX WARNING: Missing block: B:24:0x0064, code:
            if (DEBUG_PACKAGE_INFO == false) goto L_0x0092;
     */
    /* JADX WARNING: Missing block: B:25:0x0066, code:
            android.util.Slog.w(TAG, "checkPermission(): " + r8 + " of " + r9 + " is denied.");
     */
    /* JADX WARNING: Missing block: B:26:0x0092, code:
            return -1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int checkPermission(String permName, String pkgName, int userId) {
        if (sUserManager.exists(userId)) {
            synchronized (this.mPackages) {
                Package p = (Package) this.mPackages.get(pkgName);
                if (!(p == null || p.mExtras == null)) {
                    PermissionsState permissionsState = p.mExtras.getPermissionsState();
                    if (permissionsState.hasPermission(permName, userId)) {
                        return 0;
                    } else if ("android.permission.ACCESS_COARSE_LOCATION".equals(permName) && permissionsState.hasPermission(OppoPermissionConstants.PERMISSION_ACCESS, userId)) {
                        return 0;
                    }
                }
            }
        }
        Slog.w(TAG, "checkPermission() for " + pkgName + " failed, user id does not exist.");
        return -1;
    }

    /* JADX WARNING: Missing block: B:70:0x00f4, code:
            if (DEBUG_PACKAGE_INFO == false) goto L_0x0122;
     */
    /* JADX WARNING: Missing block: B:71:0x00f6, code:
            android.util.Slog.w(TAG, "checkUidPermission(): " + r14 + " of " + r15 + " is denied.");
     */
    /* JADX WARNING: Missing block: B:73:0x0123, code:
            return -1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int checkUidPermission(String permName, int uid) {
        Object obj;
        if (OppoManager.isInnerVersion.booleanValue() && this.mContext != null) {
            PackageManager packageManager = this.mContext.getPackageManager();
            if (packageManager != null) {
                String[] packages = packageManager.getPackagesForUid(uid);
                if (packages != null) {
                    for (String packageName : packages) {
                        if (OppoManager.grList.contains(packageName) || packageName.equals("com.android.vending")) {
                            obj = this.mSettings.getUserIdLPr(uid);
                            Signature[] s = null;
                            if (obj != null) {
                                if (obj instanceof SharedUserSetting) {
                                    s = ((SharedUserSetting) obj).signatures.mSignatures;
                                } else if (obj instanceof PackageSetting) {
                                    s = ((PackageSetting) obj).signatures.mSignatures;
                                }
                            }
                            if (compareSignatures(s, OppoManager.grSig) == 0) {
                                return 0;
                            }
                        }
                    }
                }
            }
        }
        int userId = UserHandle.getUserId(uid);
        if (sUserManager.exists(userId)) {
            if (this.mCtaPermsController != null) {
                this.mCtaPermsController.reportPermRequestUsage(permName, uid);
            }
            synchronized (this.mPackages) {
                obj = this.mSettings.getUserIdLPr(UserHandle.getAppId(uid));
                if (obj != null) {
                    PermissionsState permissionsState = ((SettingBase) obj).getPermissionsState();
                    if (permissionsState.hasPermission(permName, userId)) {
                        return 0;
                    } else if ("android.permission.ACCESS_COARSE_LOCATION".equals(permName) && permissionsState.hasPermission(OppoPermissionConstants.PERMISSION_ACCESS, userId)) {
                        return 0;
                    }
                }
                ArraySet<String> perms = (ArraySet) this.mSystemPermissions.get(uid);
                if (perms != null) {
                    if (perms.contains(permName)) {
                        return 0;
                    } else if ("android.permission.ACCESS_COARSE_LOCATION".equals(permName) && perms.contains(OppoPermissionConstants.PERMISSION_ACCESS)) {
                        return 0;
                    }
                }
            }
        }
        Slog.w(TAG, "checkUidPermission() for " + uid + " failed, user id does not exist.");
        return -1;
    }

    public boolean isPermissionRevokedByPolicy(String permission, String packageName, int userId) {
        boolean z = false;
        if (UserHandle.getCallingUserId() != userId) {
            this.mContext.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "isPermissionRevokedByPolicy for user " + userId);
        }
        if (checkPermission(permission, packageName, userId) == 0) {
            return false;
        }
        long identity = Binder.clearCallingIdentity();
        try {
            if ((getPermissionFlags(permission, packageName, userId) & 4) != 0) {
                z = true;
            }
            Binder.restoreCallingIdentity(identity);
            return z;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(identity);
        }
    }

    public String getPermissionControllerPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mRequiredInstallerPackage;
        }
        return str;
    }

    public boolean inCptWhiteList(int type, String verifyStr) {
        return this.mCompatibilityHelper.isInWhiteList(type, verifyStr);
    }

    public boolean inPmsWhiteList(int type, String verifyStr, List<String> defaultList) {
        return ColorPackageManagerHelper.inPmsWhiteList(type, verifyStr, defaultList);
    }

    void enforceCrossUserPermission(int callingUid, int userId, boolean requireFullPermission, boolean checkShell, String message) {
        if (userId < 0) {
            throw new IllegalArgumentException("Invalid userId " + userId);
        }
        if (checkShell) {
            enforceShellRestriction("no_debugging_features", callingUid, userId);
        }
        if (!(userId == UserHandle.getUserId(callingUid) || OppoMultiAppManager.getInstance().enforceCrossUserPermission(callingUid, userId) || callingUid == 1000 || callingUid == 0)) {
            if (requireFullPermission) {
                this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", message);
            } else {
                try {
                    this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", message);
                } catch (SecurityException e) {
                    this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS", message);
                }
            }
        }
    }

    void enforceShellRestriction(String restriction, int callingUid, int userHandle) {
        if (callingUid != SHELL_UID) {
            return;
        }
        if (userHandle >= 0 && sUserManager.hasUserRestriction(restriction, userHandle)) {
            throw new SecurityException("Shell does not have permission to access user " + userHandle);
        } else if (userHandle < 0) {
            Slog.e(TAG, "Unable to check shell permission for user " + userHandle + "\n\t" + Debug.getCallers(3));
        }
    }

    private BasePermission findPermissionTreeLP(String permName) {
        for (BasePermission bp : this.mSettings.mPermissionTrees.values()) {
            if (permName.startsWith(bp.name) && permName.length() > bp.name.length() && permName.charAt(bp.name.length()) == '.') {
                return bp;
            }
        }
        return null;
    }

    private BasePermission checkPermissionTreeLP(String permName) {
        if (permName != null) {
            BasePermission bp = findPermissionTreeLP(permName);
            if (bp != null) {
                if (bp.uid == UserHandle.getAppId(Binder.getCallingUid())) {
                    return bp;
                }
                throw new SecurityException("Calling uid " + Binder.getCallingUid() + " is not allowed to add to permission tree " + bp.name + " owned by uid " + bp.uid);
            }
        }
        throw new SecurityException("No permission tree found for " + permName);
    }

    static boolean compareStrings(CharSequence s1, CharSequence s2) {
        boolean z = false;
        if (s1 == null) {
            if (s2 == null) {
                z = true;
            }
            return z;
        } else if (s2 != null && s1.getClass() == s2.getClass()) {
            return s1.equals(s2);
        } else {
            return false;
        }
    }

    static boolean comparePermissionInfos(PermissionInfo pi1, PermissionInfo pi2) {
        if (pi1.icon == pi2.icon && pi1.logo == pi2.logo && pi1.protectionLevel == pi2.protectionLevel && compareStrings(pi1.name, pi2.name) && compareStrings(pi1.nonLocalizedLabel, pi2.nonLocalizedLabel) && compareStrings(pi1.packageName, pi2.packageName)) {
            return true;
        }
        return false;
    }

    int permissionInfoFootprint(PermissionInfo info) {
        int size = info.name.length();
        if (info.nonLocalizedLabel != null) {
            size += info.nonLocalizedLabel.length();
        }
        if (info.nonLocalizedDescription != null) {
            return size + info.nonLocalizedDescription.length();
        }
        return size;
    }

    int calculateCurrentPermissionFootprintLocked(BasePermission tree) {
        int size = 0;
        for (BasePermission perm : this.mSettings.mPermissions.values()) {
            if (perm.uid == tree.uid) {
                size += perm.name.length() + permissionInfoFootprint(perm.perm.info);
            }
        }
        return size;
    }

    void enforcePermissionCapLocked(PermissionInfo info, BasePermission tree) {
        if (tree.uid != 1000) {
            if (permissionInfoFootprint(info) + calculateCurrentPermissionFootprintLocked(tree) > 32768) {
                throw new SecurityException("Permission tree size cap exceeded");
            }
        }
    }

    boolean addPermissionLocked(PermissionInfo info, boolean async) {
        if (info.labelRes == 0 && info.nonLocalizedLabel == null) {
            throw new SecurityException("Label must be specified in permission");
        }
        BasePermission tree = checkPermissionTreeLP(info.name);
        BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(info.name);
        boolean added = bp == null;
        boolean changed = true;
        int fixedLevel = PermissionInfo.fixProtectionLevel(info.protectionLevel);
        if (added) {
            enforcePermissionCapLocked(info, tree);
            bp = new BasePermission(info.name, tree.sourcePackage, 2);
        } else if (bp.type != 2) {
            throw new SecurityException("Not allowed to modify non-dynamic permission " + info.name);
        } else if (bp.protectionLevel == fixedLevel && bp.perm.owner.equals(tree.perm.owner) && bp.uid == tree.uid && comparePermissionInfos(bp.perm.info, info)) {
            changed = false;
        }
        bp.protectionLevel = fixedLevel;
        PermissionInfo info2 = new PermissionInfo(info);
        info2.protectionLevel = fixedLevel;
        bp.perm = new Permission(tree.perm.owner, info2);
        bp.perm.info.packageName = tree.perm.info.packageName;
        bp.uid = tree.uid;
        if (added) {
            this.mSettings.mPermissions.put(info2.name, bp);
        }
        if (changed) {
            if (async) {
                scheduleWriteSettingsLocked();
            } else {
                this.mSettings.writeLPr();
            }
        }
        return added;
    }

    public boolean addPermission(PermissionInfo info) {
        boolean addPermissionLocked;
        synchronized (this.mPackages) {
            addPermissionLocked = addPermissionLocked(info, false);
        }
        return addPermissionLocked;
    }

    public boolean addPermissionAsync(PermissionInfo info) {
        boolean addPermissionLocked;
        synchronized (this.mPackages) {
            addPermissionLocked = addPermissionLocked(info, true);
        }
        return addPermissionLocked;
    }

    public void removePermission(String name) {
        synchronized (this.mPackages) {
            checkPermissionTreeLP(name);
            BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(name);
            if (bp != null) {
                if (bp.type != 2) {
                    throw new SecurityException("Not allowed to modify non-dynamic permission " + name);
                }
                this.mSettings.mPermissions.remove(name);
                this.mSettings.writeLPr();
            }
        }
    }

    private static void enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(Package pkg, BasePermission bp) {
        if (pkg.requestedPermissions.indexOf(bp.name) == -1) {
            throw new SecurityException("Package " + pkg.packageName + " has not requested permission " + bp.name);
        } else if (!bp.isRuntime() && !bp.isDevelopment()) {
            throw new SecurityException("Permission " + bp.name + " is not a changeable permission type");
        }
    }

    /* JADX WARNING: Missing block: B:49:0x0168, code:
            return;
     */
    /* JADX WARNING: Missing block: B:61:0x019d, code:
            if (r24 == false) goto L_0x01c6;
     */
    /* JADX WARNING: Missing block: B:62:0x019f, code:
            r13 = android.os.Binder.getCallingUid();
     */
    /* JADX WARNING: Missing block: B:63:0x01a5, code:
            if (r13 == 1000) goto L_0x01c6;
     */
    /* JADX WARNING: Missing block: B:64:0x01a7, code:
            r12 = getNameForUid(r13);
     */
    /* JADX WARNING: Missing block: B:65:0x01ad, code:
            if (r12 == null) goto L_0x01c6;
     */
    /* JADX WARNING: Missing block: B:67:0x01b6, code:
            if (r12.equals("com.google.android.packageinstaller") == false) goto L_0x01c6;
     */
    /* JADX WARNING: Missing block: B:70:?, code:
            new android.app.OppoActivityManager().grantOppoPermissionByGroup(r29, r30);
     */
    /* JADX WARNING: Missing block: B:87:0x021e, code:
            android.util.Slog.w(TAG, "failed to grantOppoPermissionByGroup");
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void grantRuntimePermission(String packageName, String name, int userId) {
        int uid;
        if (sUserManager.exists(userId)) {
            try {
                this.mContext.enforceCallingOrSelfPermission("oppo.permission.OPPO_COMPONENT_SAFE", "grantRuntimePermission");
            } catch (SecurityException e) {
                this.mContext.enforceCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS", "grantRuntimePermission");
            }
            enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "grantRuntimePermission");
            boolean supportRuntimeAlert = hasSystemFeature("oppo.runtime.permission.alert.support", 0);
            synchronized (this.mPackages) {
                Package pkg = (Package) this.mPackages.get(packageName);
                if (pkg == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                if (pkg.applicationInfo != null) {
                    boolean isSystem = pkg.applicationInfo.isSystemApp();
                }
                BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(name);
                if (bp == null) {
                    throw new IllegalArgumentException("Unknown permission: " + name);
                }
                enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg, bp);
                if (Build.isPermissionReviewRequired() && pkg.applicationInfo.targetSdkVersion < 23 && bp.isRuntime()) {
                    return;
                }
                uid = UserHandle.getUid(userId, pkg.applicationInfo.uid);
                SettingBase sb = pkg.mExtras;
                if (sb == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                PermissionsState permissionsState = sb.getPermissionsState();
                if ((permissionsState.getPermissionFlags(name, userId) & 16) != 0) {
                    throw new SecurityException("Cannot grant system fixed permission " + name + " for package " + packageName);
                } else if (bp.isDevelopment()) {
                    if (permissionsState.grantInstallPermission(bp) != -1) {
                        scheduleWriteSettingsLocked();
                    }
                } else if (pkg.applicationInfo.targetSdkVersion < 23) {
                    Slog.w(TAG, "Cannot grant runtime permission to a legacy app");
                    return;
                } else {
                    switch (permissionsState.grantRuntimePermission(bp, userId)) {
                        case -1:
                            return;
                        case 1:
                            final int appId = UserHandle.getAppId(pkg.applicationInfo.uid);
                            final int i = userId;
                            this.mHandler.post(new Runnable() {
                                public void run() {
                                    PackageManagerService.this.killUid(appId, i, PackageManagerService.KILL_APP_REASON_GIDS_CHANGED);
                                }
                            });
                            break;
                    }
                    this.mOnPermissionChangeListeners.onPermissionsChanged(uid);
                    this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
                }
            }
        } else {
            Log.e(TAG, "No such user:" + userId);
            return;
        }
        if ("android.permission.READ_EXTERNAL_STORAGE".equals(name) || "android.permission.WRITE_EXTERNAL_STORAGE".equals(name)) {
            long token = Binder.clearCallingIdentity();
            try {
                if (sUserManager.isInitialized(userId)) {
                    ((MountServiceInternal) LocalServices.getService(MountServiceInternal.class)).onExternalStoragePolicyChanged(uid, packageName);
                }
                Binder.restoreCallingIdentity(token);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(token);
            }
        }
    }

    /* JADX WARNING: Missing block: B:50:0x0185, code:
            return;
     */
    /* JADX WARNING: Missing block: B:60:0x01b5, code:
            if (r25 == false) goto L_0x01de;
     */
    /* JADX WARNING: Missing block: B:61:0x01b7, code:
            r14 = android.os.Binder.getCallingUid();
     */
    /* JADX WARNING: Missing block: B:62:0x01bd, code:
            if (r14 == 1000) goto L_0x01de;
     */
    /* JADX WARNING: Missing block: B:63:0x01bf, code:
            r13 = getNameForUid(r14);
     */
    /* JADX WARNING: Missing block: B:64:0x01c5, code:
            if (r13 == null) goto L_0x01de;
     */
    /* JADX WARNING: Missing block: B:66:0x01ce, code:
            if (r13.equals("com.google.android.packageinstaller") == false) goto L_0x01de;
     */
    /* JADX WARNING: Missing block: B:69:?, code:
            new android.app.OppoActivityManager().revokeOppoPermissionByGroup(r27, r28);
     */
    /* JADX WARNING: Missing block: B:80:0x0220, code:
            android.util.Slog.w(TAG, "failed to revokeOppoPermissionByGroup");
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void revokeRuntimePermission(String packageName, String name, int userId) {
        boolean isSystem;
        int appId;
        if (sUserManager.exists(userId)) {
            Slog.w(TAG, "Revoke runtime  permission: " + name + " for package " + packageName);
            try {
                this.mContext.enforceCallingOrSelfPermission("oppo.permission.OPPO_COMPONENT_SAFE", "revokeRuntimePermission");
            } catch (SecurityException e) {
                this.mContext.enforceCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");
            }
            enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "revokeRuntimePermission");
            isSystem = false;
            boolean supportRuntimeAlert = hasSystemFeature("oppo.runtime.permission.alert.support", 0);
            synchronized (this.mPackages) {
                Package pkg = (Package) this.mPackages.get(packageName);
                if (pkg == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                if (pkg.applicationInfo != null) {
                    isSystem = pkg.applicationInfo.isSystemApp();
                }
                BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(name);
                if (bp == null) {
                    throw new IllegalArgumentException("Unknown permission: " + name);
                }
                enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg, bp);
                if (Build.isPermissionReviewRequired() && pkg.applicationInfo.targetSdkVersion < 23 && bp.isRuntime()) {
                    return;
                }
                SettingBase sb = pkg.mExtras;
                if (sb == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                PermissionsState permissionsState = sb.getPermissionsState();
                if ((permissionsState.getPermissionFlags(name, userId) & 16) != 0) {
                    throw new SecurityException("Cannot revoke system fixed permission " + name + " for package " + packageName);
                } else if (bp.isDevelopment()) {
                    if (permissionsState.revokeInstallPermission(bp) != -1) {
                        scheduleWriteSettingsLocked();
                    }
                } else if (permissionsState.revokeRuntimePermission(bp, userId) == -1) {
                    return;
                } else {
                    this.mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
                    this.mSettings.writeRuntimePermissionsForUserLPr(userId, true);
                    appId = UserHandle.getAppId(pkg.applicationInfo.uid);
                }
            }
        } else {
            Log.e(TAG, "No such user:" + userId);
            return;
        }
        long identity;
        Binder.restoreCallingIdentity(identity);
        if (isSystem) {
            Slog.i(TAG, "Force stop " + packageName + ": " + KILL_APP_REASON_PERMISSIONS_REVOKED);
            identity = Binder.clearCallingIdentity();
            try {
                IActivityManager am = ActivityManagerNative.getDefault();
                if (am != null) {
                    try {
                        am.forceStopPackage(packageName, userId);
                    } catch (RemoteException e2) {
                    }
                }
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(identity);
            }
        } else {
            killUid(appId, userId, KILL_APP_REASON_PERMISSIONS_REVOKED);
        }
    }

    private void revokeRuntimePermissionsIfGroupChanged(Package newPackage, Package oldPackage, ArrayList<String> allPackageNames) {
        int numOldPackagePermissions = oldPackage.permissions.size();
        ArrayMap<String, String> oldPermissionNameToGroupName = new ArrayMap(numOldPackagePermissions);
        for (int i = 0; i < numOldPackagePermissions; i++) {
            Permission permission = (Permission) oldPackage.permissions.get(i);
            if (permission.group != null) {
                oldPermissionNameToGroupName.put(permission.info.name, permission.group.info.name);
            }
        }
        int numNewPackagePermissions = newPackage.permissions.size();
        for (int newPermissionNum = 0; newPermissionNum < numNewPackagePermissions; newPermissionNum++) {
            Permission newPermission = (Permission) newPackage.permissions.get(newPermissionNum);
            if ((newPermission.info.protectionLevel & 1) != 0) {
                String permissionName = newPermission.info.name;
                String newPermissionGroupName = newPermission.group == null ? null : newPermission.group.info.name;
                String oldPermissionGroupName = (String) oldPermissionNameToGroupName.get(permissionName);
                if (!(newPermissionGroupName == null || newPermissionGroupName.equals(oldPermissionGroupName))) {
                    List<UserInfo> users = ((UserManager) this.mContext.getSystemService(UserManager.class)).getUsers();
                    int numUsers = users.size();
                    for (int userNum = 0; userNum < numUsers; userNum++) {
                        int userId = ((UserInfo) users.get(userNum)).id;
                        int numPackages = allPackageNames.size();
                        for (int packageNum = 0; packageNum < numPackages; packageNum++) {
                            String packageName = (String) allPackageNames.get(packageNum);
                            if (checkPermission(permissionName, packageName, userId) == 0) {
                                String[] strArr = new Object[10];
                                strArr[0] = "72710897";
                                strArr[1] = Integer.valueOf(newPackage.applicationInfo.uid);
                                strArr[2] = "Revoking permission";
                                strArr[3] = permissionName;
                                strArr[4] = "from package";
                                strArr[5] = packageName;
                                strArr[6] = "as the group changed from";
                                strArr[7] = oldPermissionGroupName;
                                strArr[8] = "to";
                                strArr[9] = newPermissionGroupName;
                                EventLog.writeEvent(1397638484, strArr);
                                try {
                                    revokeRuntimePermission(packageName, permissionName, userId);
                                } catch (IllegalArgumentException e) {
                                    Slog.e(TAG, "Could not revoke " + permissionName + " from " + packageName, e);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void resetRuntimePermissions() {
        this.mContext.enforceCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 1000 || callingUid == 0)) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "resetRuntimePermissions");
        }
        synchronized (this.mPackages) {
            updatePermissionsLPw(null, null, 1);
            for (int userId : UserManagerService.getInstance().getUserIds()) {
                int packageCount = this.mPackages.size();
                for (int i = 0; i < packageCount; i++) {
                    Package pkg = (Package) this.mPackages.valueAt(i);
                    if (pkg.mExtras instanceof PackageSetting) {
                        resetUserChangesToRuntimePermissionsAndFlagsLPw(pkg.mExtras, userId);
                    }
                }
            }
        }
    }

    public int getPermissionFlags(String name, String packageName, int userId) {
        if (!sUserManager.exists(userId)) {
            return 0;
        }
        enforceGrantRevokeRuntimePermissionPermissions("getPermissionFlags");
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getPermissionFlags");
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                return 0;
            } else if (((BasePermission) this.mSettings.mPermissions.get(name)) == null) {
                return 0;
            } else {
                SettingBase sb = pkg.mExtras;
                if (sb == null) {
                    return 0;
                }
                int permissionFlags = sb.getPermissionsState().getPermissionFlags(name, userId);
                return permissionFlags;
            }
        }
    }

    public void updatePermissionFlags(String name, String packageName, int flagMask, int flagValues, int userId) {
        if (sUserManager.exists(userId)) {
            enforceGrantRevokeRuntimePermissionPermissions("updatePermissionFlags");
            enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "updatePermissionFlags");
            if (getCallingUid() != 1000) {
                flagMask = (flagMask & -17) & -33;
                flagValues = ((flagValues & -17) & -33) & -65;
            }
            synchronized (this.mPackages) {
                Package pkg = (Package) this.mPackages.get(packageName);
                if (pkg == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(name);
                if (bp == null) {
                    throw new IllegalArgumentException("Unknown permission: " + name);
                }
                SettingBase sb = pkg.mExtras;
                if (sb == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                }
                PermissionsState permissionsState = sb.getPermissionsState();
                boolean hadState = permissionsState.getRuntimePermissionState(name, userId) != null;
                if (permissionsState.updatePermissionFlags(bp, userId, flagMask, flagValues)) {
                    if (!(!CtaUtils.isCtaSupported() || (flagMask & 64) == 0 || (flagValues & 64) != 0 || pkg.mSharedUserId == null || permissionsState.isPermissionReviewRequired(userId))) {
                        permissionsState.updateReviewRequiredCache(userId);
                    }
                    if (permissionsState.getInstallPermissionState(name) != null) {
                        scheduleWriteSettingsLocked();
                    } else if (permissionsState.getRuntimePermissionState(name, userId) != null || hadState) {
                        this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
                    }
                }
            }
        }
    }

    public void updatePermissionFlagsForAllApps(int flagMask, int flagValues, int userId) {
        if (sUserManager.exists(userId)) {
            enforceGrantRevokeRuntimePermissionPermissions("updatePermissionFlagsForAllApps");
            enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "updatePermissionFlagsForAllApps");
            if (getCallingUid() != 1000) {
                flagMask &= -17;
                flagValues &= -17;
            }
            synchronized (this.mPackages) {
                boolean changed = false;
                int packageCount = this.mPackages.size();
                for (int pkgIndex = 0; pkgIndex < packageCount; pkgIndex++) {
                    SettingBase sb = ((Package) this.mPackages.valueAt(pkgIndex)).mExtras;
                    if (sb != null) {
                        changed |= sb.getPermissionsState().updatePermissionFlagsForAllPermissions(userId, flagMask, flagValues);
                    }
                }
                if (changed) {
                    this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
                }
            }
        }
    }

    private void enforceGrantRevokeRuntimePermissionPermissions(String message) {
        if (this.mContext.checkCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS") != 0 && this.mContext.checkCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS") != 0) {
            throw new SecurityException(message + " requires " + "android.permission.GRANT_RUNTIME_PERMISSIONS" + " or " + "android.permission.REVOKE_RUNTIME_PERMISSIONS");
        }
    }

    public boolean shouldShowRequestPermissionRationale(String permissionName, String packageName, int userId) {
        boolean z = false;
        if (UserHandle.getCallingUserId() != userId) {
            this.mContext.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "canShowRequestPermissionRationale for user " + userId);
        }
        if (UserHandle.getAppId(getCallingUid()) != UserHandle.getAppId(getPackageUid(packageName, 268435456, userId)) || checkPermission(permissionName, packageName, userId) == 0) {
            return false;
        }
        long identity = Binder.clearCallingIdentity();
        try {
            int flags = getPermissionFlags(permissionName, packageName, userId);
            if ((flags & 22) != 0) {
                return false;
            }
            if ((flags & 1) != 0) {
                z = true;
            }
            return z;
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    public void addOnPermissionsChangeListener(IOnPermissionsChangeListener listener) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS", "addOnPermissionsChangeListener");
        synchronized (this.mPackages) {
            this.mOnPermissionChangeListeners.addListenerLocked(listener);
        }
    }

    public void removeOnPermissionsChangeListener(IOnPermissionsChangeListener listener) {
        synchronized (this.mPackages) {
            this.mOnPermissionChangeListeners.removeListenerLocked(listener);
        }
    }

    /* JADX WARNING: Missing block: B:18:0x0035, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:21:0x0038, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isProtectedBroadcast(String actionName) {
        synchronized (this.mPackages) {
            if (this.mProtectedBroadcasts.contains(actionName)) {
                return true;
            } else if (actionName != null) {
                if (actionName.startsWith("android.net.netmon.lingerExpired") || actionName.startsWith("com.android.server.sip.SipWakeupTimer") || actionName.startsWith("com.android.internal.telephony.data-reconnect") || actionName.startsWith("android.net.netmon.launchCaptivePortalApp")) {
                }
            }
        }
    }

    public int checkSignatures(String pkg1, String pkg2) {
        synchronized (this.mPackages) {
            Package p1 = (Package) this.mPackages.get(pkg1);
            Package p2 = (Package) this.mPackages.get(pkg2);
            if (!(p1 == null || p1.mExtras == null || p2 == null)) {
                if (p2.mExtras != null) {
                    int compareSignatures = compareSignatures(p1.mSignatures, p2.mSignatures);
                    return compareSignatures;
                }
            }
            return -4;
        }
    }

    public int checkUidSignatures(int uid1, int uid2) {
        uid1 = UserHandle.getAppId(uid1);
        uid2 = UserHandle.getAppId(uid2);
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(uid1);
            if (obj != null) {
                Signature[] s1;
                if (obj instanceof SharedUserSetting) {
                    s1 = ((SharedUserSetting) obj).signatures.mSignatures;
                } else if (obj instanceof PackageSetting) {
                    s1 = ((PackageSetting) obj).signatures.mSignatures;
                } else {
                    return -4;
                }
                obj = this.mSettings.getUserIdLPr(uid2);
                if (obj != null) {
                    Signature[] s2;
                    if (obj instanceof SharedUserSetting) {
                        s2 = ((SharedUserSetting) obj).signatures.mSignatures;
                    } else if (obj instanceof PackageSetting) {
                        s2 = ((PackageSetting) obj).signatures.mSignatures;
                    } else {
                        return -4;
                    }
                    int compareSignatures = compareSignatures(s1, s2);
                    return compareSignatures;
                }
                return -4;
            }
            return -4;
        }
    }

    private void killUid(int appId, int userId, String reason) {
        long identity = Binder.clearCallingIdentity();
        try {
            IActivityManager am = ActivityManagerNative.getDefault();
            if (am != null) {
                try {
                    am.killUid(appId, userId, reason);
                } catch (RemoteException e) {
                }
            }
            Binder.restoreCallingIdentity(identity);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(identity);
        }
    }

    static int compareSignatures(Signature[] s1, Signature[] s2) {
        int i = 1;
        if (s1 == null) {
            if (s2 != null) {
                i = -1;
            }
            return i;
        } else if (s2 == null) {
            return -2;
        } else {
            if (s1.length != s2.length) {
                return -3;
            }
            if (s1.length == 1) {
                return s1[0].equals(s2[0]) ? 0 : -3;
            }
            ArraySet<Signature> set1 = new ArraySet();
            for (Signature sig : s1) {
                set1.add(sig);
            }
            ArraySet<Signature> set2 = new ArraySet();
            for (Signature sig2 : s2) {
                set2.add(sig2);
            }
            return set1.equals(set2) ? 0 : -3;
        }
    }

    private boolean isCompatSignatureUpdateNeeded(Package scannedPkg) {
        return getSettingsVersionForPackage(scannedPkg).databaseVersion < 2;
    }

    private int compareSignaturesCompat(PackageSignatures existingSigs, Package scannedPkg) {
        if (!isCompatSignatureUpdateNeeded(scannedPkg)) {
            return -3;
        }
        ArraySet<Signature> existingSet = new ArraySet();
        for (Signature sig : existingSigs.mSignatures) {
            existingSet.add(sig);
        }
        ArraySet<Signature> scannedCompatSet = new ArraySet();
        for (Signature sig2 : scannedPkg.mSignatures) {
            try {
                for (Signature chainSig : sig2.getChainSignatures()) {
                    scannedCompatSet.add(chainSig);
                }
            } catch (CertificateEncodingException e) {
                scannedCompatSet.add(sig2);
            }
        }
        if (!scannedCompatSet.equals(existingSet)) {
            return -3;
        }
        existingSigs.assignSignatures(scannedPkg.mSignatures);
        synchronized (this.mPackages) {
            this.mSettings.mKeySetManagerService.removeAppKeySetDataLPw(scannedPkg.packageName);
        }
        return 0;
    }

    private boolean isRecoverSignatureUpdateNeeded(Package scannedPkg) {
        return getSettingsVersionForPackage(scannedPkg).databaseVersion < 3;
    }

    private int compareSignaturesRecover(PackageSignatures existingSigs, Package scannedPkg) {
        if (!isRecoverSignatureUpdateNeeded(scannedPkg)) {
            return -3;
        }
        String msg = null;
        try {
            if (Signature.areEffectiveMatch(existingSigs.mSignatures, scannedPkg.mSignatures)) {
                logCriticalInfo(4, "Recovered effectively matching certificates for " + scannedPkg.packageName);
                return 0;
            }
        } catch (CertificateException e) {
            msg = e.getMessage();
        }
        logCriticalInfo(4, "Failed to recover certificates for " + scannedPkg.packageName + ": " + msg);
        return -3;
    }

    public List<String> getAllPackages() {
        synchronized (this.mPackages) {
            if (Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid")) {
                List arrayList = new ArrayList(this.mPackages.keySet());
                return arrayList;
            }
            ArrayList<String> ret = new ArrayList(this.mPackages.keySet());
            ret.remove(this.mCtmName);
            return ret;
        }
    }

    public String[] getPackagesForUid(int uid) {
        uid = UserHandle.getAppId(uid);
        boolean activateCtm = false;
        if (!(Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid"))) {
            activateCtm = true;
        }
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(uid);
            String[] strArr;
            if (obj instanceof SharedUserSetting) {
                SharedUserSetting sus = (SharedUserSetting) obj;
                int N = sus.packages.size();
                ArrayList<String> list = new ArrayList(N);
                for (int i = 0; i < N; i++) {
                    if (!((PackageSetting) sus.packages.valueAt(i)).name.equals(this.mCtmName) || !activateCtm) {
                        list.add(((PackageSetting) sus.packages.valueAt(i)).name);
                    }
                }
                strArr = (String[]) list.toArray(new String[list.size()]);
                return strArr;
            } else if (obj instanceof PackageSetting) {
                strArr = new String[1];
                strArr[0] = ((PackageSetting) obj).name;
                return strArr;
            } else {
                return null;
            }
        }
    }

    public String getNameForUid(int uid) {
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(UserHandle.getAppId(uid));
            String str;
            if (obj instanceof SharedUserSetting) {
                SharedUserSetting sus = (SharedUserSetting) obj;
                str = sus.name + ":" + sus.userId;
                return str;
            } else if (obj instanceof PackageSetting) {
                str = ((PackageSetting) obj).name;
                return str;
            } else {
                return null;
            }
        }
    }

    public int getUidForSharedUser(String sharedUserName) {
        if (sharedUserName == null) {
            return -1;
        }
        synchronized (this.mPackages) {
            SharedUserSetting suid = this.mSettings.getSharedUserLPw(sharedUserName, 0, 0, false);
            if (suid == null) {
                return -1;
            }
            int i = suid.userId;
            return i;
        }
    }

    public int getFlagsForUid(int uid) {
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(UserHandle.getAppId(uid));
            int i;
            if (obj instanceof SharedUserSetting) {
                i = ((SharedUserSetting) obj).pkgFlags;
                return i;
            } else if (obj instanceof PackageSetting) {
                i = ((PackageSetting) obj).pkgFlags;
                return i;
            } else {
                return 0;
            }
        }
    }

    public int getPrivateFlagsForUid(int uid) {
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(UserHandle.getAppId(uid));
            int i;
            if (obj instanceof SharedUserSetting) {
                i = ((SharedUserSetting) obj).pkgPrivateFlags;
                return i;
            } else if (obj instanceof PackageSetting) {
                i = ((PackageSetting) obj).pkgPrivateFlags;
                return i;
            } else {
                return 0;
            }
        }
    }

    /* JADX WARNING: Missing block: B:21:0x0040, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isUidPrivileged(int uid) {
        uid = UserHandle.getAppId(uid);
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getUserIdLPr(uid);
            if (obj instanceof SharedUserSetting) {
                Iterator<PackageSetting> it = ((SharedUserSetting) obj).packages.iterator();
                while (it.hasNext()) {
                    if (((PackageSetting) it.next()).isPrivileged()) {
                        return true;
                    }
                }
            } else if (obj instanceof PackageSetting) {
                boolean isPrivileged = ((PackageSetting) obj).isPrivileged();
                return isPrivileged;
            }
        }
    }

    public String[] getAppOpPermissionPackages(String permissionName) {
        synchronized (this.mPackages) {
            ArraySet<String> pkgs = (ArraySet) this.mAppOpPermissionPackages.get(permissionName);
            if (pkgs == null) {
                return null;
            }
            if (!(Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid"))) {
                pkgs.remove(this.mCtmName);
            }
            for (String ignoreApp : ColorPackageManagerHelper.getIgnoreAppList()) {
                pkgs.remove(ignoreApp);
            }
            String[] strArr = (String[]) pkgs.toArray(new String[pkgs.size()]);
            return strArr;
        }
    }

    public ResolveInfo resolveIntent(Intent intent, String resolvedType, int flags, int userId) {
        try {
            Trace.traceBegin(1048576, "resolveIntent");
            if (!sUserManager.exists(userId)) {
                return null;
            }
            flags = updateFlagsForResolve(flags, userId, intent);
            enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "resolve intent");
            Trace.traceBegin(1048576, "queryIntentActivities");
            List<ResolveInfo> query = queryIntentActivitiesInternal(intent, resolvedType, flags, userId);
            Trace.traceEnd(1048576);
            ResolveInfo bestChoice = chooseBestActivity(intent, resolvedType, flags, query, userId);
            Trace.traceEnd(1048576);
            return bestChoice;
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    public void setLastChosenActivity(Intent intent, String resolvedType, int flags, IntentFilter filter, int match, ComponentName activity) {
        int userId = UserHandle.getCallingUserId();
        if (DEBUG_PREFERRED) {
            Log.v(TAG, "setLastChosenActivity intent=" + intent + " resolvedType=" + resolvedType + " flags=" + flags + " filter=" + filter + " match=" + match + " activity=" + activity);
            filter.dump(new PrintStreamPrinter(System.out), "    ");
        }
        intent.setComponent(null);
        findPreferredActivity(intent, resolvedType, flags, queryIntentActivitiesInternal(intent, resolvedType, flags, userId), 0, false, true, false, userId);
        addPreferredActivityInternal(filter, match, null, activity, false, userId, "Setting last chosen");
    }

    public ResolveInfo getLastChosenActivity(Intent intent, String resolvedType, int flags) {
        int userId = UserHandle.getCallingUserId();
        if (DEBUG_PREFERRED) {
            Log.v(TAG, "Querying last chosen activity for " + intent);
        }
        return findPreferredActivity(intent, resolvedType, flags, queryIntentActivitiesInternal(intent, resolvedType, flags, userId), 0, false, false, false, userId);
    }

    private boolean isEphemeralDisabled() {
        boolean z = true;
        if (!this.mSystemReady) {
            return true;
        }
        ContentResolver resolver = this.mContext.getContentResolver();
        if (Global.getInt(resolver, "enable_ephemeral_feature", 1) == 0) {
            return true;
        }
        if (Secure.getInt(resolver, "web_action_enabled", 1) != 0) {
            z = false;
        }
        return z;
    }

    private boolean isEphemeralAllowed(Intent intent, List<ResolveInfo> resolvedActivities, int userId, boolean skipPackageCheck) {
        return isEphemeralAllowed(intent, resolvedActivities, userId, skipPackageCheck, true);
    }

    private boolean isEphemeralAllowed(Intent intent, List<ResolveInfo> resolvedActivities, int userId, boolean skipPackageCheck, boolean needJudgeEphemeralDisabled) {
        if (needJudgeEphemeralDisabled && isEphemeralDisabled()) {
            return false;
        }
        if (UserHandle.getCallingUserId() != 0) {
            return false;
        }
        if (this.mEphemeralResolverConnection == null) {
            return false;
        }
        if (intent.getComponent() != null) {
            return false;
        }
        if ((intent.getFlags() & 512) != 0) {
            return false;
        }
        if (!skipPackageCheck && intent.getPackage() != null) {
            return false;
        }
        if (!hasWebURI(intent) || intent.getData().getHost() == null) {
            return false;
        }
        synchronized (this.mPackages) {
            int count = resolvedActivities == null ? 0 : resolvedActivities.size();
            for (int n = 0; n < count; n++) {
                String packageName = ((ResolveInfo) resolvedActivities.get(n)).activityInfo.packageName;
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps != null) {
                    int status = (int) (getDomainVerificationStatusLPr(ps, userId) >> 32);
                    if (status == 2 || status == 4) {
                        if (DEBUG_EPHEMERAL) {
                            Slog.v(TAG, "DENY ephemeral apps; pkg: " + packageName + ", status: " + status);
                        }
                        return false;
                    }
                }
            }
            return true;
        }
    }

    private static EphemeralResolveInfo getEphemeralResolveInfo(Context context, EphemeralResolverConnection resolverConnection, Intent intent, String resolvedType, int userId, String packageName) {
        int ephemeralPrefixMask = Global.getInt(context.getContentResolver(), "ephemeral_hash_prefix_mask", DEFAULT_EPHEMERAL_HASH_PREFIX_MASK);
        EphemeralDigest digest = new EphemeralDigest(intent.getData(), ephemeralPrefixMask, Global.getInt(context.getContentResolver(), "ephemeral_hash_prefix_count", DEFAULT_EPHEMERAL_HASH_PREFIX_COUNT));
        int[] shaPrefix = digest.getDigestPrefix();
        byte[][] digestBytes = digest.getDigestBytes();
        List<EphemeralResolveInfo> ephemeralResolveInfoList = resolverConnection.getEphemeralResolveInfoList(shaPrefix, ephemeralPrefixMask);
        if (ephemeralResolveInfoList == null || ephemeralResolveInfoList.size() == 0) {
            return null;
        }
        for (int i = shaPrefix.length - 1; i >= 0; i--) {
            for (EphemeralResolveInfo ephemeralApplication : ephemeralResolveInfoList) {
                if (Arrays.equals(digestBytes[i], ephemeralApplication.getDigestBytes())) {
                    List<IntentFilter> filters = ephemeralApplication.getFilters();
                    if (!filters.isEmpty() && (packageName == null || packageName.equals(ephemeralApplication.getPackageName()))) {
                        EphemeralIntentResolver ephemeralResolver = new EphemeralIntentResolver(null);
                        for (int j = filters.size() - 1; j >= 0; j--) {
                            ephemeralResolver.addFilter(new EphemeralResolveIntentInfo((IntentFilter) filters.get(j), ephemeralApplication));
                        }
                        List<EphemeralResolveInfo> matchedResolveInfoList = ephemeralResolver.queryIntent(intent, resolvedType, false, userId);
                        if (!matchedResolveInfoList.isEmpty()) {
                            return (EphemeralResolveInfo) matchedResolveInfoList.get(0);
                        }
                    }
                }
            }
        }
        return null;
    }

    private ResolveInfo chooseBestActivity(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, int userId) {
        if (query != null) {
            int N = query.size();
            if (N == 1) {
                return (ResolveInfo) query.get(0);
            }
            if (N > 1) {
                boolean debug = (intent.getFlags() & 8) != 0;
                ResolveInfo r0 = (ResolveInfo) query.get(0);
                ResolveInfo r1 = (ResolveInfo) query.get(1);
                if (DEBUG_INTENT_MATCHING || debug) {
                    Slog.v(TAG, r0.activityInfo.name + "=" + r0.priority + " vs " + r1.activityInfo.name + "=" + r1.priority);
                }
                if (r0.priority != r1.priority || r0.preferredOrder != r1.preferredOrder || r0.isDefault != r1.isDefault) {
                    return (ResolveInfo) query.get(0);
                }
                int p;
                ResolveInfo r;
                ActivityInfo ait;
                String callerName = getNameForUid(Binder.getCallingUid());
                Log.d(TAG, "callerName== " + callerName);
                boolean hasArmyFeatury = hasSystemFeature("oppo.business.custom", 0);
                boolean bChildrenMode = false;
                ResolveInfo resolveInfo = null;
                String PKG_OPPO_LAUNCHER = ActivityManagerService.OPPO_LAUNCHER;
                String PKG_SETTINGS = "com.android.settings";
                String PKG_BOOTREG = "com.coloros.bootreg";
                if (hasSystemFeature("oppo.childspace.support", 0)) {
                    bChildrenMode = Global.getInt(this.mContext.getContentResolver(), "children_mode_on", 0) == 1;
                }
                boolean isDefaultAppEnabled = ColorPackageManagerHelper.isDefaultAppEnabled(callerName, this.mIsCtsAppInstall, intent);
                if (isDefaultAppEnabled) {
                    List<String> mFoundPackageList = new ArrayList();
                    ResolveInfo matchResolve = null;
                    int matchOppoTypeNum = 0;
                    for (p = 0; p < query.size(); p++) {
                        r = (ResolveInfo) query.get(p);
                        ait = r.activityInfo;
                        if (hasArmyFeatury && "com.android.packageinstaller".equals(ait.packageName)) {
                            Log.d(TAG, "Army feature filter app ai.packageName = " + ait.packageName);
                        } else {
                            if (ActivityManagerService.OPPO_LAUNCHER.equals(ait.packageName)) {
                                resolveInfo = r;
                            }
                            if (ColorPackageManagerHelper.IsOppoForceApp(ait.packageName)) {
                                matchResolve = r;
                            }
                            if (ColorPackageManagerHelper.IsOppoDefaultApp(ait.packageName)) {
                                if (!mFoundPackageList.contains(ait.packageName)) {
                                    mFoundPackageList.add(ait.packageName);
                                    matchOppoTypeNum++;
                                }
                            }
                        }
                    }
                    if (matchResolve != null && matchOppoTypeNum == 1) {
                        Log.d(TAG, "Force app ai.packageName = " + matchResolve.activityInfo.packageName + " ai.name = " + matchResolve.activityInfo.name);
                        return matchResolve;
                    }
                }
                ResolveInfo ri = findPreferredActivity(intent, resolvedType, flags, query, r0.priority, true, false, debug, userId);
                if (ri != null) {
                    ait = ri.activityInfo;
                    if (!bChildrenMode || resolveInfo == null || ait == null || ActivityManagerService.OPPO_LAUNCHER.equals(ait.packageName) || "com.coloros.bootreg".equals(ait.packageName) || "com.android.settings".equals(ait.packageName)) {
                        return ri;
                    }
                    return resolveInfo;
                }
                if (isDefaultAppEnabled) {
                    int match = 0;
                    int pos = 0;
                    HashMap<String, Integer> mFoundPackageMap = new HashMap();
                    for (p = 0; p < query.size(); p++) {
                        r = (ResolveInfo) query.get(p);
                        ait = r.activityInfo;
                        if (hasArmyFeatury && "com.android.packageinstaller".equals(ait.packageName)) {
                            Log.d(TAG, "Army feature filter app ai.packageName = " + ait.packageName);
                        } else if (ColorPackageManagerHelper.IsOppoDefaultApp(ait.packageName)) {
                            if (mFoundPackageMap.containsKey(ait.packageName)) {
                                if (((Integer) mFoundPackageMap.get(ait.packageName)).intValue() < r.priority) {
                                    pos = p;
                                }
                            } else {
                                mFoundPackageMap.put(ait.packageName, Integer.valueOf(r.priority));
                                match++;
                                pos = p;
                            }
                        }
                    }
                    if (1 == match) {
                        Log.d(TAG, "oppo select Default app ai.packageName = " + ((ResolveInfo) query.get(pos)).activityInfo.packageName + " ai.name = " + ((ResolveInfo) query.get(pos)).activityInfo.name);
                        return (ResolveInfo) query.get(pos);
                    }
                }
                ResolveInfo resolveInfo2 = new ResolveInfo(this.mResolveInfo);
                resolveInfo2.activityInfo = new ActivityInfo(resolveInfo2.activityInfo);
                resolveInfo2.activityInfo.labelRes = ResolverActivity.getLabelRes(intent.getAction());
                String intentPackage = intent.getPackage();
                if (!TextUtils.isEmpty(intentPackage) && allHavePackage(query, intentPackage)) {
                    ApplicationInfo appi = ((ResolveInfo) query.get(0)).activityInfo.applicationInfo;
                    resolveInfo2.resolvePackageName = intentPackage;
                    if (userNeedsBadging(userId)) {
                        resolveInfo2.noResourceId = true;
                    } else {
                        resolveInfo2.icon = appi.icon;
                    }
                    resolveInfo2.iconResourceId = appi.icon;
                    resolveInfo2.labelRes = appi.labelRes;
                }
                resolveInfo2.activityInfo.applicationInfo = new ApplicationInfo(resolveInfo2.activityInfo.applicationInfo);
                if (userId != 0) {
                    resolveInfo2.activityInfo.applicationInfo.uid = UserHandle.getUid(userId, UserHandle.getAppId(resolveInfo2.activityInfo.applicationInfo.uid));
                }
                if (resolveInfo2.activityInfo.metaData == null) {
                    resolveInfo2.activityInfo.metaData = new Bundle();
                }
                resolveInfo2.activityInfo.metaData.putBoolean("android.dock_home", true);
                return resolveInfo2;
            }
        }
        return null;
    }

    private boolean allHavePackage(List<ResolveInfo> list, String packageName) {
        if (ArrayUtils.isEmpty(list)) {
            return false;
        }
        int N = list.size();
        for (int i = 0; i < N; i++) {
            ActivityInfo ai;
            ResolveInfo ri = (ResolveInfo) list.get(i);
            if (ri != null) {
                ai = ri.activityInfo;
            } else {
                ai = null;
            }
            if (ai == null || !packageName.equals(ai.packageName)) {
                return false;
            }
        }
        return true;
    }

    private ResolveInfo findPersistentPreferredActivityLP(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, boolean debug, int userId) {
        List<PersistentPreferredActivity> pprefs;
        int N = query.size();
        PersistentPreferredIntentResolver ppir = (PersistentPreferredIntentResolver) this.mSettings.mPersistentPreferredActivities.get(userId);
        if (DEBUG_PREFERRED || debug) {
            Slog.v(TAG, "Looking for presistent preferred activities...");
        }
        if (ppir != null) {
            pprefs = ppir.queryIntent(intent, resolvedType, (65536 & flags) != 0, userId);
        } else {
            pprefs = null;
        }
        if (pprefs != null && pprefs.size() > 0) {
            int M = pprefs.size();
            for (int i = 0; i < M; i++) {
                PersistentPreferredActivity ppa = (PersistentPreferredActivity) pprefs.get(i);
                if (DEBUG_PREFERRED || debug) {
                    Slog.v(TAG, "Checking PersistentPreferredActivity ds=" + (ppa.countDataSchemes() > 0 ? ppa.getDataScheme(0) : "<none>") + "\n  component=" + ppa.mComponent);
                    ppa.dump(new LogPrinter(2, TAG, 3), "  ");
                }
                ActivityInfo ai = getActivityInfo(ppa.mComponent, flags | 512, userId);
                if (DEBUG_PREFERRED || debug) {
                    Slog.v(TAG, "Found persistent preferred activity:");
                    if (ai != null) {
                        ai.dump(new LogPrinter(2, TAG, 3), "  ");
                    } else {
                        Slog.v(TAG, "  null");
                    }
                }
                if (ai != null) {
                    for (int j = 0; j < N; j++) {
                        ResolveInfo ri = (ResolveInfo) query.get(j);
                        if (ri.activityInfo.applicationInfo.packageName.equals(ai.applicationInfo.packageName) && ri.activityInfo.name.equals(ai.name)) {
                            if (DEBUG_PREFERRED || debug) {
                                Slog.v(TAG, "Returning persistent preferred activity: " + ri.activityInfo.packageName + "/" + ri.activityInfo.name);
                            }
                            return ri;
                        }
                    }
                    continue;
                }
            }
        }
        return null;
    }

    /* JADX WARNING: Missing block: B:127:0x0326, code:
            return r24;
     */
    /* JADX WARNING: Missing block: B:157:0x03f4, code:
            if (DEBUG_PREFERRED != false) goto L_0x03f8;
     */
    /* JADX WARNING: Missing block: B:158:0x03f6, code:
            if (r34 == false) goto L_0x0401;
     */
    /* JADX WARNING: Missing block: B:159:0x03f8, code:
            android.util.Slog.v(TAG, "No preferred activity to return");
     */
    /* JADX WARNING: Missing block: B:161:0x0402, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    ResolveInfo findPreferredActivity(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, int priority, boolean always, boolean removeMatches, boolean debug, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForResolve(flags, userId, intent);
        synchronized (this.mPackages) {
            if (intent.getSelector() != null) {
                intent = intent.getSelector();
            }
            if (DEBUG_PREFERRED) {
                intent.addFlags(8);
            }
            ResolveInfo pri = findPersistentPreferredActivityLP(intent, resolvedType, flags, query, debug, userId);
            if (pri != null) {
                return pri;
            }
            List<PreferredActivity> prefs;
            int k = -1;
            PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.get(userId);
            if (DEBUG_PREFERRED || debug) {
                Slog.v(TAG, "Looking for preferred activities...");
            }
            if (pir != null) {
                prefs = pir.queryIntent(intent, resolvedType, (65536 & flags) != 0, userId);
            } else {
                prefs = null;
            }
            if (prefs != null && prefs.size() > 0) {
                boolean changed = false;
                int match = 0;
                try {
                    int j;
                    ResolveInfo ri;
                    if (DEBUG_PREFERRED || debug) {
                        Slog.v(TAG, "Figuring out best match...");
                    }
                    int N = query.size();
                    for (j = 0; j < N; j++) {
                        ri = (ResolveInfo) query.get(j);
                        if (DEBUG_PREFERRED || debug) {
                            Slog.v(TAG, "Match for " + ri.activityInfo + ": 0x" + Integer.toHexString(match));
                        }
                        if (ri.match > match) {
                            match = ri.match;
                        }
                    }
                    if (DEBUG_PREFERRED || debug) {
                        Slog.v(TAG, "Best match: 0x" + Integer.toHexString(match));
                    }
                    match &= 268369920;
                    boolean containsOppoDefaultPkg = ColorPackageManagerHelper.isQueryListContainsOppoDefaultPkg(query);
                    int M = prefs.size();
                    for (int i = 0; i < M; i++) {
                        IntentFilter pa = (PreferredActivity) prefs.get(i);
                        if (DEBUG_PREFERRED || debug) {
                            Slog.v(TAG, "Checking PreferredActivity ds=" + (pa.countDataSchemes() > 0 ? pa.getDataScheme(0) : "<none>") + "\n  component=" + pa.mPref.mComponent);
                            pa.dump(new LogPrinter(2, TAG, 3), "  ");
                        }
                        if (containsOppoDefaultPkg || pa.mPref.mMatch == match) {
                            if (!always || pa.mPref.mAlways) {
                                ActivityInfo ai = getActivityInfo(pa.mPref.mComponent, ((flags | 512) | DumpState.DUMP_FROZEN) | 262144, userId);
                                if (DEBUG_PREFERRED || debug) {
                                    Slog.v(TAG, "Found preferred activity:");
                                    if (ai != null) {
                                        ai.dump(new LogPrinter(2, TAG, 3), "  ");
                                    } else {
                                        Slog.v(TAG, "  null");
                                    }
                                }
                                if (ai == null) {
                                    Slog.w(TAG, "Removing dangling preferred activity: " + pa.mPref.mComponent);
                                    pir.removeFilter(pa);
                                    changed = true;
                                } else {
                                    j = 0;
                                    while (j < N) {
                                        ri = (ResolveInfo) query.get(j);
                                        if (!ri.activityInfo.applicationInfo.packageName.equals(ai.applicationInfo.packageName) || !ri.activityInfo.name.equals(ai.name)) {
                                            j++;
                                        } else if (removeMatches) {
                                            pir.removeFilter(pa);
                                            changed = true;
                                            if (DEBUG_PREFERRED) {
                                                Slog.v(TAG, "Removing match " + pa.mPref.mComponent);
                                            }
                                        } else if (!always || pa.mPref.sameSet((List) query)) {
                                            if (DEBUG_PREFERRED || debug) {
                                                Slog.v(TAG, "Returning preferred activity: " + ri.activityInfo.packageName + "/" + ri.activityInfo.name);
                                            }
                                            if (changed) {
                                                if (DEBUG_PREFERRED) {
                                                    Slog.v(TAG, "Preferred activity bookkeeping changed; writing restrictions");
                                                }
                                                scheduleWritePackageRestrictionsLocked(userId);
                                            }
                                        } else if (k == -1) {
                                            k = i;
                                            Slog.i(TAG, "remove pa k = " + k);
                                        }
                                    }
                                    continue;
                                }
                            } else if (DEBUG_PREFERRED || debug) {
                                Slog.v(TAG, "Skipping mAlways=false entry");
                            }
                        } else if (DEBUG_PREFERRED || debug) {
                            Slog.v(TAG, "Skipping bad match " + Integer.toHexString(pa.mPref.mMatch));
                        }
                    }
                    if (k != -1) {
                        PreferredActivity rpa = (PreferredActivity) prefs.get(k);
                        Slog.i(TAG, "Result set changed, dropping preferred activity for " + intent + " type " + resolvedType);
                        if (DEBUG_PREFERRED) {
                            Slog.v(TAG, "Removing preferred activity since set changed " + rpa.mPref.mComponent);
                        }
                        pir.removeFilter(rpa);
                        pir.addFilter(new PreferredActivity(rpa, rpa.mPref.mMatch, null, rpa.mPref.mComponent, false));
                        if (true) {
                            if (DEBUG_PREFERRED) {
                                Slog.v(TAG, "Preferred activity bookkeeping changed; writing restrictions");
                            }
                            scheduleWritePackageRestrictionsLocked(userId);
                        }
                        return null;
                    } else if (changed) {
                        if (DEBUG_PREFERRED) {
                            Slog.v(TAG, "Preferred activity bookkeeping changed; writing restrictions");
                        }
                        scheduleWritePackageRestrictionsLocked(userId);
                    }
                } catch (Throwable th) {
                    if (changed) {
                        if (DEBUG_PREFERRED) {
                            Slog.v(TAG, "Preferred activity bookkeeping changed; writing restrictions");
                        }
                        scheduleWritePackageRestrictionsLocked(userId);
                    }
                }
            }
        }
    }

    public boolean canForwardTo(Intent intent, String resolvedType, int sourceUserId, int targetUserId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
        List<CrossProfileIntentFilter> matches = getMatchingCrossProfileIntentFilters(intent, resolvedType, sourceUserId);
        if (matches != null) {
            int size = matches.size();
            for (int i = 0; i < size; i++) {
                if (((CrossProfileIntentFilter) matches.get(i)).getTargetUserId() == targetUserId) {
                    return true;
                }
            }
        }
        if (!hasWebURI(intent)) {
            return false;
        }
        boolean z;
        UserInfo parent = getProfileParent(sourceUserId);
        synchronized (this.mPackages) {
            z = getCrossProfileDomainPreferredLpr(intent, resolvedType, updateFlagsForResolve(0, parent.id, intent), sourceUserId, parent.id) != null;
        }
        return z;
    }

    private UserInfo getProfileParent(int userId) {
        long identity = Binder.clearCallingIdentity();
        try {
            UserInfo profileParent = sUserManager.getProfileParent(userId);
            return profileParent;
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    private List<CrossProfileIntentFilter> getMatchingCrossProfileIntentFilters(Intent intent, String resolvedType, int userId) {
        CrossProfileIntentResolver resolver = (CrossProfileIntentResolver) this.mSettings.mCrossProfileIntentResolvers.get(userId);
        if (resolver != null) {
            return resolver.queryIntent(intent, resolvedType, false, userId);
        }
        return null;
    }

    public ParceledListSlice<ResolveInfo> queryIntentActivities(Intent intent, String resolvedType, int flags, int userId) {
        try {
            Trace.traceBegin(1048576, "queryIntentActivities");
            ParceledListSlice<ResolveInfo> parceledListSlice = new ParceledListSlice(queryIntentActivitiesInternal(intent, resolvedType, flags, userId));
            return parceledListSlice;
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    /* JADX WARNING: Missing block: B:53:0x0161, code:
            if (r22 == false) goto L_0x01da;
     */
    /* JADX WARNING: Missing block: B:54:0x0163, code:
            android.os.Trace.traceBegin(1048576, "resolveEphemeral");
            r16 = r39.mContext;
            r17 = r39.mEphemeralResolverConnection;
     */
    /* JADX WARNING: Missing block: B:55:0x0178, code:
            if (r30 == false) goto L_0x0258;
     */
    /* JADX WARNING: Missing block: B:56:0x017a, code:
            r21 = r33;
     */
    /* JADX WARNING: Missing block: B:57:0x017c, code:
            r24 = getEphemeralResolveInfo(r16, r17, r40, r41, r43, r21);
     */
    /* JADX WARNING: Missing block: B:58:0x0186, code:
            if (r24 == null) goto L_0x01d4;
     */
    /* JADX WARNING: Missing block: B:60:0x018a, code:
            if (DEBUG_EPHEMERAL == false) goto L_0x0195;
     */
    /* JADX WARNING: Missing block: B:61:0x018c, code:
            android.util.Slog.v(TAG, "Adding ephemeral installer to the ResolveInfo list");
     */
    /* JADX WARNING: Missing block: B:62:0x0195, code:
            r0 = new android.content.pm.ResolveInfo(r39.mEphemeralInstallerInfo);
            r0.ephemeralResolveInfo = r24;
            r0.isDefault = true;
            r0.match = 5799936;
            r0.filter = new android.content.IntentFilter(r40.getAction());
            r0.filter.addDataPath(r40.getData().getPath(), 0);
            r8.add(r0);
     */
    /* JADX WARNING: Missing block: B:63:0x01d4, code:
            android.os.Trace.traceEnd(1048576);
     */
    /* JADX WARNING: Missing block: B:64:0x01da, code:
            if (r35 == false) goto L_0x01e1;
     */
    /* JADX WARNING: Missing block: B:65:0x01dc, code:
            java.util.Collections.sort(r8, mResolvePrioritySorter);
     */
    /* JADX WARNING: Missing block: B:67:0x01e6, code:
            if (r8.size() <= 1) goto L_0x01ed;
     */
    /* JADX WARNING: Missing block: B:68:0x01e8, code:
            java.util.Collections.sort(r8, mSystemAppPrioritySorter);
     */
    /* JADX WARNING: Missing block: B:69:0x01ed, code:
            return r8;
     */
    /* JADX WARNING: Missing block: B:88:0x0258, code:
            r21 = null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private List<ResolveInfo> queryIntentActivitiesInternal(Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        flags = updateFlagsForResolve(flags, userId, intent);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "query intent activities");
        ComponentName comp = intent.getComponent();
        if (comp == null && intent.getSelector() != null) {
            intent = intent.getSelector();
            comp = intent.getComponent();
        }
        List<ResolveInfo> arrayList;
        if (comp != null) {
            arrayList = new ArrayList(1);
            ActivityInfo ai = getActivityInfo(comp, flags, userId);
            if (ai != null) {
                ResolveInfo ri = new ResolveInfo();
                ri.activityInfo = ai;
                arrayList.add(ri);
            }
            return arrayList;
        }
        boolean sortResult = false;
        boolean addEphemeral = false;
        boolean matchEphemeralPackage = false;
        String pkgName = intent.getPackage();
        boolean isEphemeralDisabled = isEphemeralDisabled();
        synchronized (this.mPackages) {
            List<ResolveInfo> result;
            if (pkgName == null) {
                List<CrossProfileIntentFilter> matchingFilters = getMatchingCrossProfileIntentFilters(intent, resolvedType, userId);
                ResolveInfo xpResolveInfo = querySkipCurrentProfileIntents(matchingFilters, intent, resolvedType, flags, userId);
                if (xpResolveInfo != null) {
                    arrayList = new ArrayList(1);
                    arrayList.add(xpResolveInfo);
                    List<ResolveInfo> filterIfNotSystemUser = filterIfNotSystemUser(arrayList, userId);
                    return filterIfNotSystemUser;
                }
                result = filterIfNotSystemUser(this.mActivities.queryIntent(intent, resolvedType, flags, userId), userId);
                if (isEphemeralDisabled) {
                    addEphemeral = false;
                } else {
                    addEphemeral = isEphemeralAllowed(intent, result, userId, false, false);
                }
                xpResolveInfo = queryCrossProfileIntents(matchingFilters, intent, resolvedType, flags, userId, hasNonNegativePriority(result));
                if (xpResolveInfo != null) {
                    if (isUserEnabled(xpResolveInfo.targetUserId)) {
                        if (filterIfNotSystemUser(Collections.singletonList(xpResolveInfo), userId).size() > 0) {
                            result.add(xpResolveInfo);
                            sortResult = true;
                        }
                    }
                }
                if (hasWebURI(intent)) {
                    CrossProfileDomainInfo crossProfileDomainInfo = null;
                    UserInfo parent = getProfileParent(userId);
                    if (parent != null) {
                        crossProfileDomainInfo = getCrossProfileDomainPreferredLpr(intent, resolvedType, flags, userId, parent.id);
                    }
                    if (crossProfileDomainInfo != null) {
                        if (xpResolveInfo != null) {
                            result.remove(xpResolveInfo);
                        }
                        if (result.size() == 0 && !addEphemeral) {
                            result.add(crossProfileDomainInfo.resolveInfo);
                            return result;
                        }
                    }
                    if (result.size() > 1 || addEphemeral) {
                        result = filterCandidatesWithDomainPreferredActivitiesLPr(intent, flags, result, crossProfileDomainInfo, userId);
                        sortResult = true;
                    }
                }
            } else {
                Package pkg = (Package) this.mPackages.get(pkgName);
                if (pkg != null) {
                    result = filterIfNotSystemUser(this.mActivities.queryIntentForPackage(intent, resolvedType, flags, pkg.activities, userId), userId);
                } else {
                    if (isEphemeralDisabled) {
                        addEphemeral = false;
                    } else {
                        addEphemeral = isEphemeralAllowed(intent, null, userId, true, false);
                    }
                    matchEphemeralPackage = true;
                    result = new ArrayList();
                }
            }
        }
    }

    private CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(Intent intent, String resolvedType, int flags, int sourceUserId, int parentUserId) {
        if (!sUserManager.hasUserRestriction("allow_parent_profile_app_linking", sourceUserId)) {
            return null;
        }
        List<ResolveInfo> resultTargetUser = this.mActivities.queryIntent(intent, resolvedType, flags, parentUserId);
        if (resultTargetUser == null || resultTargetUser.isEmpty()) {
            return null;
        }
        CrossProfileDomainInfo result = null;
        int size = resultTargetUser.size();
        for (int i = 0; i < size; i++) {
            ResolveInfo riTargetUser = (ResolveInfo) resultTargetUser.get(i);
            if (!riTargetUser.handleAllWebDataURI) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(riTargetUser.activityInfo.packageName);
                if (ps != null) {
                    int status = (int) (getDomainVerificationStatusLPr(ps, parentUserId) >> 32);
                    if (result == null) {
                        result = new CrossProfileDomainInfo();
                        result.resolveInfo = createForwardingResolveInfoUnchecked(new IntentFilter(), sourceUserId, parentUserId);
                        result.bestDomainVerificationStatus = status;
                    } else {
                        result.bestDomainVerificationStatus = bestDomainVerificationStatus(status, result.bestDomainVerificationStatus);
                    }
                }
            }
        }
        if (result == null || result.bestDomainVerificationStatus != 3) {
            return result;
        }
        return null;
    }

    private int bestDomainVerificationStatus(int status1, int status2) {
        if (status1 == 3) {
            return status2;
        }
        if (status2 == 3) {
            return status1;
        }
        return (int) MathUtils.max(status1, status2);
    }

    private boolean isUserEnabled(int userId) {
        long callingId = Binder.clearCallingIdentity();
        try {
            UserInfo userInfo = sUserManager.getUserInfo(userId);
            boolean isEnabled = userInfo != null ? userInfo.isEnabled() : false;
            Binder.restoreCallingIdentity(callingId);
            return isEnabled;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private List<ResolveInfo> filterIfNotSystemUser(List<ResolveInfo> resolveInfos, int userId) {
        if (userId == 0) {
            return resolveInfos;
        }
        for (int i = resolveInfos.size() - 1; i >= 0; i--) {
            if ((((ResolveInfo) resolveInfos.get(i)).activityInfo.flags & 536870912) != 0) {
                resolveInfos.remove(i);
            }
        }
        return resolveInfos;
    }

    private boolean hasNonNegativePriority(List<ResolveInfo> resolveInfos) {
        return resolveInfos.size() > 0 && ((ResolveInfo) resolveInfos.get(0)).priority >= 0;
    }

    private static boolean hasWebURI(Intent intent) {
        if (intent.getData() == null) {
            return false;
        }
        String scheme = intent.getScheme();
        if (TextUtils.isEmpty(scheme)) {
            return false;
        }
        return !scheme.equals("http") ? scheme.equals("https") : true;
    }

    private List<ResolveInfo> filterCandidatesWithDomainPreferredActivitiesLPr(Intent intent, int matchFlags, List<ResolveInfo> candidates, CrossProfileDomainInfo xpDomainInfo, int userId) {
        ResolveInfo info;
        boolean debug = (intent.getFlags() & 8) != 0;
        if (DEBUG_PREFERRED || DEBUG_DOMAIN_VERIFICATION) {
            Slog.v(TAG, "Filtering results with preferred activities. Candidates count: " + candidates.size());
        }
        ArrayList<ResolveInfo> result = new ArrayList();
        ArrayList<ResolveInfo> alwaysList = new ArrayList();
        ArrayList<ResolveInfo> undefinedList = new ArrayList();
        ArrayList<ResolveInfo> alwaysAskList = new ArrayList();
        ArrayList<ResolveInfo> neverList = new ArrayList();
        ArrayList<ResolveInfo> matchAllList = new ArrayList();
        synchronized (this.mPackages) {
            int n;
            int count = candidates.size();
            for (n = 0; n < count; n++) {
                info = (ResolveInfo) candidates.get(n);
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(info.activityInfo.packageName);
                if (ps != null) {
                    if (info.handleAllWebDataURI) {
                        matchAllList.add(info);
                    } else {
                        long packedStatus = getDomainVerificationStatusLPr(ps, userId);
                        int status = (int) (packedStatus >> 32);
                        int linkGeneration = (int) (-1 & packedStatus);
                        if (status == 2) {
                            if (DEBUG_DOMAIN_VERIFICATION) {
                                Slog.i(TAG, "  + always: " + info.activityInfo.packageName + " : linkgen=" + linkGeneration);
                            }
                            info.preferredOrder = linkGeneration;
                            alwaysList.add(info);
                        } else if (status == 3) {
                            if (DEBUG_DOMAIN_VERIFICATION) {
                                Slog.i(TAG, "  + never: " + info.activityInfo.packageName);
                            }
                            neverList.add(info);
                        } else if (status == 4) {
                            if (DEBUG_DOMAIN_VERIFICATION) {
                                Slog.i(TAG, "  + always-ask: " + info.activityInfo.packageName);
                            }
                            alwaysAskList.add(info);
                        } else if (status == 0 || status == 1) {
                            if (DEBUG_DOMAIN_VERIFICATION) {
                                Slog.i(TAG, "  + ask: " + info.activityInfo.packageName);
                            }
                            undefinedList.add(info);
                        }
                    }
                }
            }
            boolean includeBrowser = false;
            if (alwaysList.size() > 0) {
                result.addAll(alwaysList);
            } else {
                result.addAll(undefinedList);
                if (!(xpDomainInfo == null || xpDomainInfo.bestDomainVerificationStatus == 3)) {
                    result.add(xpDomainInfo.resolveInfo);
                }
                includeBrowser = true;
            }
            if (alwaysAskList.size() > 0) {
                for (ResolveInfo i : result) {
                    i.preferredOrder = 0;
                }
                result.addAll(alwaysAskList);
                includeBrowser = true;
            }
            if (includeBrowser) {
                if (DEBUG_DOMAIN_VERIFICATION) {
                    Slog.v(TAG, "   ...including browsers in candidate set");
                }
                if ((131072 & matchFlags) != 0) {
                    result.addAll(matchAllList);
                } else {
                    String defaultBrowserPackageName = getDefaultBrowserPackageName(userId);
                    int maxMatchPrio = 0;
                    ResolveInfo defaultBrowserMatch = null;
                    int numCandidates = matchAllList.size();
                    for (n = 0; n < numCandidates; n++) {
                        info = (ResolveInfo) matchAllList.get(n);
                        if (info.priority > maxMatchPrio) {
                            maxMatchPrio = info.priority;
                        }
                        if (info.activityInfo.packageName.equals(defaultBrowserPackageName) && (defaultBrowserMatch == null || defaultBrowserMatch.priority < info.priority)) {
                            if (debug) {
                                Slog.v(TAG, "Considering default browser match " + info);
                            }
                            defaultBrowserMatch = info;
                        }
                    }
                    if (defaultBrowserMatch == null || defaultBrowserMatch.priority < maxMatchPrio || TextUtils.isEmpty(defaultBrowserPackageName)) {
                        result.addAll(matchAllList);
                    } else {
                        if (debug) {
                            Slog.v(TAG, "Default browser match " + defaultBrowserMatch);
                        }
                        result.add(defaultBrowserMatch);
                    }
                }
                if (result.size() == 0) {
                    result.addAll(candidates);
                    result.removeAll(neverList);
                }
            }
        }
        if (DEBUG_PREFERRED || DEBUG_DOMAIN_VERIFICATION) {
            Slog.v(TAG, "Filtered results with preferred activities. New candidates count: " + result.size());
            for (ResolveInfo info2 : result) {
                Slog.v(TAG, "  + " + info2.activityInfo);
            }
        }
        return result;
    }

    private long getDomainVerificationStatusLPr(PackageSetting ps, int userId) {
        long result = ps.getDomainVerificationStatusForUser(userId);
        if ((result >> 32) != 0 || ps.getIntentFilterVerificationInfo() == null) {
            return result;
        }
        return ((long) ps.getIntentFilterVerificationInfo().getStatus()) << 32;
    }

    private ResolveInfo querySkipCurrentProfileIntents(List<CrossProfileIntentFilter> matchingFilters, Intent intent, String resolvedType, int flags, int sourceUserId) {
        if (matchingFilters != null) {
            int size = matchingFilters.size();
            for (int i = 0; i < size; i++) {
                CrossProfileIntentFilter filter = (CrossProfileIntentFilter) matchingFilters.get(i);
                if ((filter.getFlags() & 2) != 0) {
                    ResolveInfo resolveInfo = createForwardingResolveInfo(filter, intent, resolvedType, flags, sourceUserId);
                    if (resolveInfo != null) {
                        return resolveInfo;
                    }
                }
            }
        }
        return null;
    }

    private ResolveInfo queryCrossProfileIntents(List<CrossProfileIntentFilter> matchingFilters, Intent intent, String resolvedType, int flags, int sourceUserId, boolean matchInCurrentProfile) {
        if (matchingFilters != null) {
            SparseBooleanArray alreadyTriedUserIds = new SparseBooleanArray();
            int size = matchingFilters.size();
            for (int i = 0; i < size; i++) {
                CrossProfileIntentFilter filter = (CrossProfileIntentFilter) matchingFilters.get(i);
                int targetUserId = filter.getTargetUserId();
                boolean skipCurrentProfile = (filter.getFlags() & 2) != 0;
                boolean skipCurrentProfileIfNoMatchFound = (filter.getFlags() & 4) != 0;
                if (!(skipCurrentProfile || alreadyTriedUserIds.get(targetUserId) || (skipCurrentProfileIfNoMatchFound && matchInCurrentProfile))) {
                    ResolveInfo resolveInfo = createForwardingResolveInfo(filter, intent, resolvedType, flags, sourceUserId);
                    if (resolveInfo != null) {
                        return resolveInfo;
                    }
                    alreadyTriedUserIds.put(targetUserId, true);
                }
            }
        }
        return null;
    }

    private ResolveInfo createForwardingResolveInfo(CrossProfileIntentFilter filter, Intent intent, String resolvedType, int flags, int sourceUserId) {
        int targetUserId = filter.getTargetUserId();
        List<ResolveInfo> resultTargetUser = this.mActivities.queryIntent(intent, resolvedType, flags, targetUserId);
        if (resultTargetUser != null && isUserEnabled(targetUserId)) {
            for (int i = resultTargetUser.size() - 1; i >= 0; i--) {
                if ((((ResolveInfo) resultTargetUser.get(i)).activityInfo.applicationInfo.flags & 1073741824) == 0) {
                    return createForwardingResolveInfoUnchecked(filter, sourceUserId, targetUserId);
                }
            }
        }
        return null;
    }

    private ResolveInfo createForwardingResolveInfoUnchecked(IntentFilter filter, int sourceUserId, int targetUserId) {
        ResolveInfo forwardingResolveInfo = new ResolveInfo();
        long ident = Binder.clearCallingIdentity();
        try {
            String className;
            boolean targetIsProfile = sUserManager.getUserInfo(targetUserId).isManagedProfile();
            if (targetIsProfile) {
                className = IntentForwarderActivity.FORWARD_INTENT_TO_MANAGED_PROFILE;
            } else {
                className = IntentForwarderActivity.FORWARD_INTENT_TO_PARENT;
            }
            ActivityInfo forwardingActivityInfo = getActivityInfo(new ComponentName(this.mAndroidApplication.packageName, className), 0, sourceUserId);
            if (!targetIsProfile) {
                forwardingActivityInfo.showUserIcon = targetUserId;
                forwardingResolveInfo.noResourceId = true;
            }
            forwardingResolveInfo.activityInfo = forwardingActivityInfo;
            forwardingResolveInfo.priority = 0;
            forwardingResolveInfo.preferredOrder = 0;
            forwardingResolveInfo.match = 0;
            forwardingResolveInfo.isDefault = true;
            forwardingResolveInfo.filter = filter;
            forwardingResolveInfo.targetUserId = targetUserId;
            return forwardingResolveInfo;
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public ParceledListSlice<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, String[] specificTypes, Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice(queryIntentActivityOptionsInternal(caller, specifics, specificTypes, intent, resolvedType, flags, userId));
    }

    private List<ResolveInfo> queryIntentActivityOptionsInternal(ComponentName caller, Intent[] specifics, String[] specificTypes, Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        int i;
        String action;
        int N;
        int j;
        flags = updateFlagsForResolve(flags, userId, intent);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "query intent activity options");
        String resultsAction = intent.getAction();
        List<ResolveInfo> results = queryIntentActivitiesInternal(intent, resolvedType, flags | 64, userId);
        if (DEBUG_INTENT_MATCHING) {
            Log.v(TAG, "Query " + intent + ": " + results);
        }
        int specificsPos = 0;
        if (specifics != null) {
            i = 0;
            while (i < specifics.length) {
                Intent sintent = specifics[i];
                if (sintent != null) {
                    ActivityInfo ai;
                    if (DEBUG_INTENT_MATCHING) {
                        Log.v(TAG, "Specific #" + i + ": " + sintent);
                    }
                    action = sintent.getAction();
                    if (resultsAction != null && resultsAction.equals(action)) {
                        action = null;
                    }
                    ResolveInfo ri = null;
                    ComponentName comp = sintent.getComponent();
                    if (comp == null) {
                        ri = resolveIntent(sintent, specificTypes != null ? specificTypes[i] : null, flags, userId);
                        if (ri != null) {
                            if (ri == this.mResolveInfo) {
                            }
                            ai = ri.activityInfo;
                            comp = new ComponentName(ai.applicationInfo.packageName, ai.name);
                        }
                    } else {
                        ai = getActivityInfo(comp, flags, userId);
                        if (ai == null) {
                        }
                    }
                    if (DEBUG_INTENT_MATCHING) {
                        Log.v(TAG, "Specific #" + i + ": " + ai);
                    }
                    N = results.size();
                    j = specificsPos;
                    while (j < N) {
                        ResolveInfo sri = (ResolveInfo) results.get(j);
                        if ((sri.activityInfo.name.equals(comp.getClassName()) && sri.activityInfo.applicationInfo.packageName.equals(comp.getPackageName())) || (action != null && sri.filter.matchAction(action))) {
                            results.remove(j);
                            if (DEBUG_INTENT_MATCHING) {
                                Log.v(TAG, "Removing duplicate item from " + j + " due to specific " + specificsPos);
                            }
                            if (ri == null) {
                                ri = sri;
                            }
                            j--;
                            N--;
                        }
                        j++;
                    }
                    if (ri == null) {
                        ri = new ResolveInfo();
                        ri.activityInfo = ai;
                    }
                    results.add(specificsPos, ri);
                    ri.specificIndex = i;
                    specificsPos++;
                }
                i++;
            }
        }
        N = results.size();
        for (i = specificsPos; i < N - 1; i++) {
            ResolveInfo rii = (ResolveInfo) results.get(i);
            if (rii.filter != null) {
                Iterator<String> it = rii.filter.actionsIterator();
                if (it != null) {
                    while (it.hasNext()) {
                        action = (String) it.next();
                        if (resultsAction == null || !resultsAction.equals(action)) {
                            j = i + 1;
                            while (j < N) {
                                ResolveInfo rij = (ResolveInfo) results.get(j);
                                if (rij.filter != null && rij.filter.hasAction(action)) {
                                    results.remove(j);
                                    if (DEBUG_INTENT_MATCHING) {
                                        Log.v(TAG, "Removing duplicate item from " + j + " due to action " + action + " at " + i);
                                    }
                                    j--;
                                    N--;
                                }
                                j++;
                            }
                        }
                    }
                    if ((flags & 64) == 0) {
                        rii.filter = null;
                    }
                }
            }
        }
        if (caller != null) {
            N = results.size();
            for (i = 0; i < N; i++) {
                ActivityInfo ainfo = ((ResolveInfo) results.get(i)).activityInfo;
                if (caller.getPackageName().equals(ainfo.applicationInfo.packageName) && caller.getClassName().equals(ainfo.name)) {
                    results.remove(i);
                    break;
                }
            }
        }
        if ((flags & 64) == 0) {
            N = results.size();
            for (i = 0; i < N; i++) {
                ((ResolveInfo) results.get(i)).filter = null;
            }
        }
        if (DEBUG_INTENT_MATCHING) {
            Log.v(TAG, "Result: " + results);
        }
        return results;
    }

    public ParceledListSlice<ResolveInfo> queryIntentReceivers(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice(queryIntentReceiversInternal(intent, resolvedType, flags, userId));
    }

    public List<ResolveInfo> queryIntentReceiversInternal(Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        flags = updateFlagsForResolve(flags, userId, intent);
        ComponentName comp = intent.getComponent();
        if (comp == null && intent.getSelector() != null) {
            intent = intent.getSelector();
            comp = intent.getComponent();
        }
        if (comp != null) {
            List<ResolveInfo> list = new ArrayList(1);
            ActivityInfo ai = getReceiverInfo(comp, flags, userId);
            if (ai != null) {
                ResolveInfo ri = new ResolveInfo();
                ri.activityInfo = ai;
                list.add(ri);
            }
            return list;
        }
        synchronized (this.mPackages) {
            String pkgName = intent.getPackage();
            List<ResolveInfo> queryIntent;
            if (pkgName == null) {
                queryIntent = this.mReceivers.queryIntent(intent, resolvedType, flags, userId);
                return queryIntent;
            }
            Package pkg = (Package) this.mPackages.get(pkgName);
            if (pkg != null) {
                queryIntent = this.mReceivers.queryIntentForPackage(intent, resolvedType, flags, pkg.receivers, userId);
                return queryIntent;
            }
            queryIntent = Collections.emptyList();
            return queryIntent;
        }
    }

    public ResolveInfo resolveService(Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        List<ResolveInfo> query = queryIntentServicesInternal(intent, resolvedType, updateFlagsForResolve(flags, userId, intent), userId);
        if (query == null || query.size() < 1) {
            return null;
        }
        return (ResolveInfo) query.get(0);
    }

    public ParceledListSlice<ResolveInfo> queryIntentServices(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice(queryIntentServicesInternal(intent, resolvedType, flags, userId));
    }

    private List<ResolveInfo> queryIntentServicesInternal(Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        flags = updateFlagsForResolve(flags, userId, intent);
        ComponentName comp = intent.getComponent();
        if (comp == null && intent.getSelector() != null) {
            intent = intent.getSelector();
            comp = intent.getComponent();
        }
        if (comp != null) {
            List<ResolveInfo> list = new ArrayList(1);
            ServiceInfo si = getServiceInfo(comp, flags, userId);
            if (si != null) {
                ResolveInfo ri = new ResolveInfo();
                ri.serviceInfo = si;
                list.add(ri);
            }
            return list;
        }
        synchronized (this.mPackages) {
            String pkgName = intent.getPackage();
            List<ResolveInfo> queryIntent;
            if (pkgName == null) {
                queryIntent = this.mServices.queryIntent(intent, resolvedType, flags, userId);
                return queryIntent;
            }
            Package pkg = (Package) this.mPackages.get(pkgName);
            if (pkg != null) {
                queryIntent = this.mServices.queryIntentForPackage(intent, resolvedType, flags, pkg.services, userId);
                return queryIntent;
            }
            queryIntent = Collections.emptyList();
            return queryIntent;
        }
    }

    public ParceledListSlice<ResolveInfo> queryIntentContentProviders(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice(queryIntentContentProvidersInternal(intent, resolvedType, flags, userId));
    }

    private List<ResolveInfo> queryIntentContentProvidersInternal(Intent intent, String resolvedType, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        flags = updateFlagsForResolve(flags, userId, intent);
        ComponentName comp = intent.getComponent();
        if (comp == null && intent.getSelector() != null) {
            intent = intent.getSelector();
            comp = intent.getComponent();
        }
        if (comp != null) {
            List<ResolveInfo> list = new ArrayList(1);
            ProviderInfo pi = getProviderInfo(comp, flags, userId);
            if (pi != null) {
                ResolveInfo ri = new ResolveInfo();
                ri.providerInfo = pi;
                list.add(ri);
            }
            return list;
        }
        synchronized (this.mPackages) {
            String pkgName = intent.getPackage();
            List<ResolveInfo> queryIntent;
            if (pkgName == null) {
                queryIntent = this.mProviders.queryIntent(intent, resolvedType, flags, userId);
                return queryIntent;
            }
            Package pkg = (Package) this.mPackages.get(pkgName);
            if (pkg != null) {
                queryIntent = this.mProviders.queryIntentForPackage(intent, resolvedType, flags, pkg.providers, userId);
                return queryIntent;
            }
            queryIntent = Collections.emptyList();
            return queryIntent;
        }
    }

    public ParceledListSlice<PackageInfo> getInstalledPackages(int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        ParceledListSlice<PackageInfo> parceledListSlice;
        flags = updateFlagsForPackage(flags, userId, null);
        boolean listUninstalled = (flags & 8192) != 0;
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "get installed packages");
        String callerName = getNameForUid(Binder.getCallingUid());
        boolean activateCtm = false;
        if (!(Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid"))) {
            activateCtm = true;
        }
        boolean isSystemCaller = isSystemAppCall();
        synchronized (this.mPackages) {
            ArrayList<PackageInfo> list;
            PackageInfo pi;
            if (listUninstalled) {
                list = new ArrayList(this.mSettings.mPackages.size());
                for (PackageSetting ps : this.mSettings.mPackages.values()) {
                    if (ps.pkg != null) {
                        pi = generatePackageInfo(ps, flags, userId);
                    } else {
                        pi = generatePackageInfo(ps, flags, userId);
                    }
                    if (pi != null) {
                        if (callerName != null && ((callerName.equals("com.google.android.xts.permission") || callerName.equals("com.google.android.permission.gts")) && (pi.applicationInfo.flags & 1) != 0 && pi.applicationInfo.targetSdkVersion < 23)) {
                            pi.applicationInfo.targetSdkVersion = 23;
                        }
                        if (!activateCtm || !pi.packageName.equals(this.mCtmName)) {
                            if (!isSystemCaller) {
                                if (isSecurePayApp(pi.packageName) && !ColorPackageManagerHelper.isSpecialSecureApp(pi.packageName)) {
                                    if (DEBUG_INSTALL) {
                                        Slog.d(TAG, "oppo filter SecurepayApp for get install package33 : " + pi.packageName);
                                    }
                                }
                            }
                            if (!ColorPackageManagerHelper.isPrivilegedHideApp(pi.packageName) && (isSystemCaller || !ColorPackageManagerHelper.isSafeCenterApp(pi.packageName))) {
                                list.add(pi);
                            }
                        }
                    }
                }
            } else {
                list = new ArrayList(this.mPackages.size());
                for (Package p : this.mPackages.values()) {
                    pi = generatePackageInfo((PackageSetting) p.mExtras, flags, userId);
                    if (pi != null) {
                        if (callerName != null && ((callerName.equals("com.google.android.xts.permission") || callerName.equals("com.google.android.permission.gts")) && (pi.applicationInfo.flags & 1) != 0 && pi.applicationInfo.targetSdkVersion < 23)) {
                            pi.applicationInfo.targetSdkVersion = 23;
                        }
                        if (!activateCtm || !pi.packageName.equals(this.mCtmName)) {
                            if (!isSystemCaller) {
                                if (isSecurePayApp(pi.packageName) && !ColorPackageManagerHelper.isSpecialSecureApp(pi.packageName)) {
                                    if (DEBUG_INSTALL) {
                                        Slog.d(TAG, "oppo filter SecurepayApp for get install package33 : " + pi.packageName);
                                    }
                                }
                            }
                            if (!ColorPackageManagerHelper.isPrivilegedHideApp(pi.packageName) && (isSystemCaller || !ColorPackageManagerHelper.isSafeCenterApp(pi.packageName))) {
                                list.add(pi);
                            }
                        }
                    }
                }
            }
            OppoPackageManagerHelper.filterThirdMarket(this.mContext, this, flags, list, this.mHandler);
            parceledListSlice = new ParceledListSlice(list);
        }
        return parceledListSlice;
    }

    private void addPackageHoldingPermissions(ArrayList<PackageInfo> list, PackageSetting ps, String[] permissions, boolean[] tmp, int flags, int userId) {
        int i;
        int numMatch = 0;
        PermissionsState permissionsState = ps.getPermissionsState();
        for (i = 0; i < permissions.length; i++) {
            if (permissionsState.hasPermission(permissions[i], userId)) {
                tmp[i] = true;
                numMatch++;
            } else {
                tmp[i] = false;
            }
        }
        if (numMatch != 0) {
            PackageInfo pi;
            if (ps.pkg != null) {
                pi = generatePackageInfo(ps, flags, userId);
            } else {
                pi = generatePackageInfo(ps, flags, userId);
            }
            if (pi != null) {
                if ((flags & 4096) == 0) {
                    if (numMatch == permissions.length) {
                        pi.requestedPermissions = permissions;
                    } else {
                        pi.requestedPermissions = new String[numMatch];
                        numMatch = 0;
                        for (i = 0; i < permissions.length; i++) {
                            if (tmp[i]) {
                                pi.requestedPermissions[numMatch] = permissions[i];
                                numMatch++;
                            }
                        }
                    }
                }
                list.add(pi);
            }
        }
    }

    public ParceledListSlice<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags, int userId) {
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        ParceledListSlice<PackageInfo> parceledListSlice;
        flags = updateFlagsForPackage(flags, userId, permissions);
        boolean listUninstalled = (flags & 8192) != 0;
        synchronized (this.mPackages) {
            ArrayList<PackageInfo> list = new ArrayList();
            boolean[] tmpBools = new boolean[permissions.length];
            PackageSetting ps;
            if (listUninstalled) {
                for (PackageSetting ps2 : this.mSettings.mPackages.values()) {
                    addPackageHoldingPermissions(list, ps2, permissions, tmpBools, flags, userId);
                }
            } else {
                for (Package pkg : this.mPackages.values()) {
                    ps2 = (PackageSetting) pkg.mExtras;
                    if (ps2 != null) {
                        addPackageHoldingPermissions(list, ps2, permissions, tmpBools, flags, userId);
                    }
                }
            }
            parceledListSlice = new ParceledListSlice(list);
        }
        return parceledListSlice;
    }

    public ParceledListSlice<ApplicationInfo> getInstalledApplications(int flags, int userId) {
        boolean activateCtm = false;
        if (!(Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid"))) {
            activateCtm = true;
        }
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        ParceledListSlice<ApplicationInfo> parceledListSlice;
        flags = updateFlagsForApplication(flags, userId, null);
        boolean listUninstalled = (flags & 8192) != 0;
        boolean isSystemCaller = isSystemAppCall();
        synchronized (this.mPackages) {
            ArrayList<ApplicationInfo> list;
            ApplicationInfo ai;
            if (listUninstalled) {
                list = new ArrayList(this.mSettings.mPackages.size());
                for (PackageSetting ps : this.mSettings.mPackages.values()) {
                    if (ps.pkg != null) {
                        ai = PackageParser.generateApplicationInfo(ps.pkg, flags, ps.readUserState(userId), userId);
                    } else {
                        ai = generateApplicationInfoFromSettingsLPw(ps.name, flags, userId);
                    }
                    if (ai != null && ((!isVendorApp(ai) || ps.getInstalled(userId)) && !(activateCtm && ai.packageName.equals(this.mCtmName)))) {
                        if (isSystemCaller || !isSecurePayApp(ai.packageName) || ColorPackageManagerHelper.isSpecialSecureApp(ai.packageName)) {
                            if (!ColorPackageManagerHelper.isPrivilegedHideApp(ai.packageName) && (isSystemCaller || !ColorPackageManagerHelper.isSafeCenterApp(ai.packageName))) {
                                list.add(ai);
                            }
                        } else if (DEBUG_INSTALL) {
                            Slog.d(TAG, "oppo filter SecurepayApp for get install package22 : " + ai.packageName);
                        }
                    }
                }
            } else {
                list = new ArrayList(this.mPackages.size());
                for (Package p : this.mPackages.values()) {
                    if (p.mExtras != null) {
                        ai = PackageParser.generateApplicationInfo(p, flags, ((PackageSetting) p.mExtras).readUserState(userId), userId);
                        if (!(ai == null || (activateCtm && ai.packageName.equals(this.mCtmName)))) {
                            if (isSystemCaller || !isSecurePayApp(ai.packageName) || ColorPackageManagerHelper.isSpecialSecureApp(ai.packageName)) {
                                if (!ColorPackageManagerHelper.isPrivilegedHideApp(ai.packageName) && (isSystemCaller || !ColorPackageManagerHelper.isSafeCenterApp(ai.packageName))) {
                                    list.add(ai);
                                }
                            } else if (DEBUG_INSTALL) {
                                Slog.d(TAG, "oppo filter SecurepayApp for get install package22 : " + ai.packageName);
                            }
                        }
                    }
                }
            }
            parceledListSlice = new ParceledListSlice(list);
        }
        return parceledListSlice;
    }

    public ParceledListSlice<EphemeralApplicationInfo> getEphemeralApplications(int userId) {
        return null;
    }

    public boolean isEphemeralApplication(String packageName, int userId) {
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "isEphemeral");
        return false;
    }

    public byte[] getEphemeralApplicationCookie(String packageName, int userId) {
        return null;
    }

    public boolean setEphemeralApplicationCookie(String packageName, byte[] cookie, int userId) {
        return true;
    }

    public Bitmap getEphemeralApplicationIcon(String packageName, int userId) {
        return null;
    }

    private boolean isCallerSameApp(String packageName) {
        Package pkg = (Package) this.mPackages.get(packageName);
        if (pkg == null || UserHandle.getAppId(Binder.getCallingUid()) != pkg.applicationInfo.uid) {
            return false;
        }
        return true;
    }

    public ParceledListSlice<ApplicationInfo> getPersistentApplications(int flags) {
        return new ParceledListSlice(getPersistentApplicationsInternal(flags));
    }

    private List<ApplicationInfo> getPersistentApplicationsInternal(int flags) {
        ArrayList<ApplicationInfo> finalList = new ArrayList();
        boolean activateCtm = false;
        if (!(Binder.getCallingPid() == Process.myPid() || !this.mCtmFlag || this.mCtmName.equals("invalid"))) {
            activateCtm = true;
        }
        synchronized (this.mPackages) {
            int userId = UserHandle.getCallingUserId();
            for (Package p : this.mPackages.values()) {
                if (p.applicationInfo != null) {
                    boolean matchesUnaware = (262144 & flags) != 0 ? !p.applicationInfo.isDirectBootAware() : false;
                    boolean matchesAware;
                    if ((DumpState.DUMP_FROZEN & flags) != 0) {
                        matchesAware = p.applicationInfo.isDirectBootAware();
                    } else {
                        matchesAware = false;
                    }
                    if ((p.applicationInfo.flags & 8) != 0 && ((!this.mSafeMode || isSystemApp(p)) && (matchesUnaware || matchesAware))) {
                        PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(p.packageName);
                        if (ps != null) {
                            ApplicationInfo ai = PackageParser.generateApplicationInfo(p, flags, ps.readUserState(userId), userId);
                            if (ai == null) {
                                continue;
                            } else if (p.packageName.equals("com.android.phone")) {
                                finalList.add(0, ai);
                            } else {
                                if (activateCtm) {
                                    if (ai.packageName.equals(this.mCtmName)) {
                                    }
                                }
                                finalList.add(ai);
                            }
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
        return finalList;
    }

    public ProviderInfo resolveContentProvider(String name, int flags, int userId) {
        ProviderInfo providerInfo = null;
        if (!sUserManager.exists(userId)) {
            return null;
        }
        flags = updateFlagsForComponent(flags, userId, name);
        synchronized (this.mPackages) {
            PackageSetting ps;
            Provider provider = (Provider) this.mProvidersByAuthority.get(name);
            if (provider != null) {
                ps = (PackageSetting) this.mSettings.mPackages.get(provider.owner.packageName);
            } else {
                ps = null;
            }
            if (ps != null && this.mSettings.isEnabledAndMatchLPr(provider.info, flags, userId)) {
                providerInfo = PackageParser.generateProviderInfo(provider, flags, ps.readUserState(userId), userId);
            }
        }
        return providerInfo;
    }

    @Deprecated
    public void querySyncProviders(List<String> outNames, List<ProviderInfo> outInfo) {
        synchronized (this.mPackages) {
            int userId = UserHandle.getCallingUserId();
            for (Entry<String, Provider> entry : this.mProvidersByAuthority.entrySet()) {
                Provider p = (Provider) entry.getValue();
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(p.owner.packageName);
                if (ps != null && p.syncable) {
                    if (!this.mSafeMode || (p.info.applicationInfo.flags & 1) != 0) {
                        ProviderInfo info = PackageParser.generateProviderInfo(p, 0, ps.readUserState(userId), userId);
                        if (info != null) {
                            outNames.add((String) entry.getKey());
                            outInfo.add(info);
                        }
                    }
                }
            }
        }
    }

    /* JADX WARNING: Missing block: B:34:0x008d, code:
            if (r1 == null) goto L_0x009d;
     */
    /* JADX WARNING: Missing block: B:35:0x008f, code:
            java.util.Collections.sort(r1, mProviderInitOrderSorter);
     */
    /* JADX WARNING: Missing block: B:36:0x0099, code:
            return new android.content.pm.ParceledListSlice(r1);
     */
    /* JADX WARNING: Missing block: B:41:0x00a1, code:
            return android.content.pm.ParceledListSlice.emptyList();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public ParceledListSlice<ProviderInfo> queryContentProviders(String processName, int uid, int flags) {
        int userId;
        Throwable th;
        if (processName != null) {
            userId = UserHandle.getUserId(uid);
        } else {
            userId = UserHandle.getCallingUserId();
        }
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        flags = updateFlagsForComponent(flags, userId, processName);
        ArrayList<ProviderInfo> finalList = null;
        synchronized (this.mPackages) {
            try {
                Iterator<Provider> i = this.mProviders.mProviders.values().iterator();
                while (true) {
                    ArrayList<ProviderInfo> finalList2;
                    try {
                        finalList2 = finalList;
                        if (!i.hasNext()) {
                            break;
                        }
                        Provider p = (Provider) i.next();
                        PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(p.owner.packageName);
                        if (ps == null || p.info.authority == null || !(processName == null || (p.info.processName.equals(processName) && UserHandle.isSameApp(p.info.applicationInfo.uid, uid)))) {
                            finalList = finalList2;
                        } else if (this.mSettings.isEnabledAndMatchLPr(p.info, flags, userId)) {
                            if (finalList2 == null) {
                                finalList = new ArrayList(3);
                            } else {
                                finalList = finalList2;
                            }
                            ProviderInfo info = PackageParser.generateProviderInfo(p, flags, ps.readUserState(userId), userId);
                            if (info != null) {
                                finalList.add(info);
                            }
                        } else {
                            finalList = finalList2;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        finalList = finalList2;
                        throw th;
                    }
                }
            } catch (Throwable th3) {
                th = th3;
            }
        }
    }

    public InstrumentationInfo getInstrumentationInfo(ComponentName name, int flags) {
        InstrumentationInfo generateInstrumentationInfo;
        synchronized (this.mPackages) {
            generateInstrumentationInfo = PackageParser.generateInstrumentationInfo((Instrumentation) this.mInstrumentation.get(name), flags);
        }
        return generateInstrumentationInfo;
    }

    public ParceledListSlice<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags) {
        return new ParceledListSlice(queryInstrumentationInternal(targetPackage, flags));
    }

    private List<InstrumentationInfo> queryInstrumentationInternal(String targetPackage, int flags) {
        ArrayList<InstrumentationInfo> finalList = new ArrayList();
        synchronized (this.mPackages) {
            for (Instrumentation p : this.mInstrumentation.values()) {
                if (targetPackage == null || targetPackage.equals(p.info.targetPackage)) {
                    InstrumentationInfo ii = PackageParser.generateInstrumentationInfo(p, flags);
                    if (ii != null) {
                        finalList.add(ii);
                    }
                }
            }
        }
        return finalList;
    }

    private void createIdmapsForPackageLI(Package pkg) {
        ArrayMap<String, Package> overlays = (ArrayMap) this.mOverlays.get(pkg.packageName);
        if (overlays == null) {
            Slog.w(TAG, "Unable to create idmap for " + pkg.packageName + ": no overlay packages");
            return;
        }
        for (Package opkg : overlays.values()) {
            createIdmapForPackagePairLI(pkg, opkg);
        }
    }

    private boolean createIdmapForPackagePairLI(Package pkg, Package opkg) {
        int i = 0;
        if (opkg.mTrustedOverlay) {
            ArrayMap<String, Package> overlaySet = (ArrayMap) this.mOverlays.get(pkg.packageName);
            if (overlaySet == null) {
                Slog.e(TAG, "was about to create idmap for " + pkg.baseCodePath + " and " + opkg.baseCodePath + " but target package has no known overlays");
                return false;
            }
            try {
                this.mInstaller.idmap(pkg.baseCodePath, opkg.baseCodePath, UserHandle.getSharedAppGid(pkg.applicationInfo.uid));
                Package[] overlayArray = (Package[]) overlaySet.values().toArray(new Package[0]);
                Arrays.sort(overlayArray, new Comparator<Package>() {
                    public int compare(Package p1, Package p2) {
                        return p1.mOverlayPriority - p2.mOverlayPriority;
                    }
                });
                pkg.applicationInfo.resourceDirs = new String[overlayArray.length];
                int length = overlayArray.length;
                int i2 = 0;
                while (i < length) {
                    int i3 = i2 + 1;
                    pkg.applicationInfo.resourceDirs[i2] = overlayArray[i].baseCodePath;
                    i++;
                    i2 = i3;
                }
                return true;
            } catch (InstallerException e) {
                Slog.e(TAG, "Failed to generate idmap for " + pkg.baseCodePath + " and " + opkg.baseCodePath);
                return false;
            }
        }
        Slog.w(TAG, "Skipping target and overlay pair " + pkg.baseCodePath + " and " + opkg.baseCodePath + ": overlay not trusted");
        return false;
    }

    private void scanDirTracedLI(File dir, int parseFlags, int scanFlags, long currentTime) {
        Trace.traceBegin(1048576, "scanDir");
        try {
            scanDirLI(dir, parseFlags, scanFlags, currentTime);
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    private void scanDirLI(File dir, int parseFlags, int scanFlags, long currentTime) {
        File[] files = dir.listFiles();
        if (ArrayUtils.isEmpty(files)) {
            Log.d(TAG, "No files in app dir " + dir);
            return;
        }
        addBootEvent("Android:PMS_scan_data:" + dir.getPath().toString());
        if (DEBUG_PACKAGE_SCANNING) {
            Log.d(TAG, "Scanning app dir " + dir + " scanFlags=" + scanFlags + " flags=0x" + Integer.toHexString(parseFlags));
        }
        Log.d(TAG, "start scanDirLI:" + dir);
        int iMultitaskNum = SystemProperties.getInt("persist.pm.multitask", 6);
        boolean bMultitask = iMultitaskNum > 1;
        Log.d(TAG, "bMultitask:" + bMultitask + " max thread:" + iMultitaskNum);
        MultiTaskDealer dealer = bMultitask ? MultiTaskDealer.startDealer(MultiTaskDealer.PACKAGEMANAGER_SCANER, iMultitaskNum) : null;
        int i = 0;
        int length = files.length;
        while (true) {
            int i2 = i;
            if (i2 >= length) {
                break;
            }
            final File file = files[i2];
            boolean isPackage = (PackageParser.isApkFile(file) || file.isDirectory()) ? !PackageInstallerService.isStageName(file.getName()) : false;
            if (isPackage && !(EXP_VERSION && file.getName().startsWith("EXPOP_") && (mOperator == null || mOperator.equals(IElsaManager.EMPTY_PACKAGE) || !file.getName().startsWith("EXPOP_" + mOperator + LocationManagerService.OPPO_FAKE_LOCATION_SPLIT)))) {
                if (EXP_VERSION) {
                    if (hasSystemFeature(OPPO_DEFAULT_BROWSER_FEATURE, 0) && !REGION_INDIA.equals(mNetLock) && file.getName().equals("Browser")) {
                    }
                }
                long startScanTime = SystemClock.uptimeMillis();
                if (DBG_ENG || DBG_IS_LOGGABLE) {
                    Slog.d(TAG, "scan package: " + file.toString() + " , start at: " + startScanTime + "ms.");
                }
                File ref_file = file;
                int ref_parseFlags = parseFlags;
                int ref_scanFlags = scanFlags;
                long ref_currentTime = currentTime;
                final int i3 = parseFlags;
                final int i4 = scanFlags;
                final long j = currentTime;
                final File file2 = file;
                Runnable scanTask = new Runnable() {
                    public void run() {
                        try {
                            Log.d(PackageManagerService.TAG, "multitask scan ref_file=" + file);
                            PackageManagerService.this.scanPackageTracedLI(file, i3 | 4, i4, j, null);
                        } catch (PackageManagerException e) {
                            Slog.w(PackageManagerService.TAG, "Failed to parse " + file + ": " + e.getMessage());
                            if ((i3 & 1) == 0 && e.error == -2) {
                                PackageManagerService.logCriticalInfo(5, "Deleting invalid package at " + file);
                                PackageManagerService.this.removeCodePathLI(file2);
                            }
                        }
                    }
                };
                if (dealer != null) {
                    dealer.addTask(scanTask);
                } else {
                    scanTask.run();
                }
                long endScanTime = SystemClock.uptimeMillis();
                if (DBG_ENG || DBG_IS_LOGGABLE) {
                    Slog.d(TAG, "scan package: " + file.toString() + " , end at: " + endScanTime + "ms. elapsed time = " + (endScanTime - startScanTime) + "ms.");
                }
            }
            i = i2 + 1;
        }
        if (dealer != null) {
            dealer.waitAll();
        }
        Log.d(TAG, "end scanDirLI:" + dir);
    }

    private static File getSettingsProblemFile() {
        return new File(new File(Environment.getDataDirectory(), "system"), "uiderrors.txt");
    }

    static void reportSettingsProblem(int priority, String msg) {
        logCriticalInfo(priority, msg);
    }

    static synchronized void logCriticalInfo(int priority, String msg) {
        synchronized (PackageManagerService.class) {
            Slog.println(priority, TAG, msg);
            EventLogTags.writePmCriticalInfo(msg);
            try {
                File fname = getSettingsProblemFile();
                PrintWriter pw = new FastPrintWriter(new FileOutputStream(fname, true));
                pw.println(new SimpleDateFormat().format(new Date(System.currentTimeMillis())) + ": " + msg);
                pw.close();
                FileUtils.setPermissions(fname.toString(), 508, -1, -1);
            } catch (IOException e) {
            }
        }
    }

    private long getLastModifiedTime(Package pkg, File srcFile) {
        if (!srcFile.isDirectory()) {
            return srcFile.lastModified();
        }
        long maxModifiedTime = new File(pkg.baseCodePath).lastModified();
        if (pkg.splitCodePaths != null) {
            for (int i = pkg.splitCodePaths.length - 1; i >= 0; i--) {
                maxModifiedTime = Math.max(maxModifiedTime, new File(pkg.splitCodePaths[i]).lastModified());
            }
        }
        return maxModifiedTime;
    }

    private void collectCertificatesLI(PackageSetting ps, Package pkg, File srcFile, int policyFlags) throws PackageManagerException {
        long lastModifiedTime = this.mIsPreNMR1Upgrade ? new File(pkg.codePath).lastModified() : getLastModifiedTime(pkg, srcFile);
        if (ps != null && ps.codePath.equals(srcFile) && ps.timeStamp == lastModifiedTime && !isCompatSignatureUpdateNeeded(pkg) && !isRecoverSignatureUpdateNeeded(pkg)) {
            ArraySet<PublicKey> signingKs;
            long mSigningKeySetId = ps.keySetData.getProperSigningKeySet();
            KeySetManagerService ksms = this.mSettings.mKeySetManagerService;
            synchronized (this.mPackages) {
                signingKs = ksms.getPublicKeysFromKeySetLPr(mSigningKeySetId);
            }
            if (ps.signatures.mSignatures == null || ps.signatures.mSignatures.length == 0 || signingKs == null) {
                Slog.w(TAG, "PackageSetting for " + ps.name + " is missing signatures.  Collecting certs again to recover them.");
            } else {
                pkg.mSignatures = ps.signatures.mSignatures;
                pkg.mSigningKeys = signingKs;
                return;
            }
        } else if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
            Slog.i(TAG, srcFile.toString() + " changed; collecting certs");
        }
        try {
            PackageParser.collectCertificates(pkg, policyFlags);
        } catch (PackageParserException e) {
            throw PackageManagerException.from(e);
        }
    }

    private Package scanPackageTracedLI(File scanFile, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        Trace.traceBegin(1048576, "scanPackage");
        try {
            Package scanPackageLI = scanPackageLI(scanFile, parseFlags, scanFlags, currentTime, user);
            return scanPackageLI;
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    private Package scanPackageLI(File scanFile, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "Parsing: " + scanFile);
        }
        PackageParser pp = new PackageParser();
        pp.setSeparateProcesses(this.mSeparateProcesses);
        pp.setOnlyCoreApps(this.mOnlyCore);
        pp.setDisplayMetrics(this.mMetrics);
        if ((scanFlags & 512) != 0) {
            parseFlags |= 512;
        }
        Trace.traceBegin(1048576, "parsePackage");
        try {
            Package pkg = pp.parsePackage(scanFile, parseFlags);
            Trace.traceEnd(1048576);
            this.mCompatibilityHelper.customizePackageIfNeeded(pkg);
            if (EXP_VERSION && scanFile.toString().contains("/data/app/") && pkg.packageName.startsWith("com.facebook.", 0) && isBootFromOTA()) {
                ExpPackageManagerHelper.appNeedDelDeps(pkg.packageName, pkg.mVersionName);
            }
            return scanPackageLI(pkg, scanFile, parseFlags, scanFlags, currentTime, user);
        } catch (PackageParserException e) {
            throw PackageManagerException.from(e);
        } catch (Throwable th) {
            Trace.traceEnd(1048576);
        }
    }

    private Package scanPackageLI(Package pkg, File scanFile, int policyFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        boolean isSystemApp;
        if ((32768 & scanFlags) != 0) {
            scanFlags &= -32769;
        } else if (pkg.childPackages != null && pkg.childPackages.size() > 0) {
            scanFlags |= 32768;
        }
        boolean isOppoApp = ColorPackageManagerHelper.IsOppoApkList(pkg.packageName);
        if (scanFile.toString().contains("/system/app") || scanFile.toString().contains("/system/priv-app") || scanFile.toString().contains("/oem/app") || scanFile.toString().contains("/vendor/app")) {
            isSystemApp = true;
        } else {
            isSystemApp = scanFile.toString().contains(VENDOR_OVERLAY_DIR);
        }
        if (!isOppoApp && isSystemApp) {
            Slog.d(TAG, "This is not oppo app, so skip it :" + scanFile.toString());
            throw new PackageManagerException(-2, "this is not oppo app");
        } else if (isSystemApp && this.mCustomizeSystemAppBlacklist.contains(pkg.packageName)) {
            Slog.d(TAG, "This app is excluded, so skip it :" + scanFile.toString());
            throw new PackageManagerException(-2, "this app is excluded for customize!");
        } else if (isSystemApp && this.mSystemAppArrayList.contains(pkg.packageName)) {
            Slog.d(TAG, "This is common soft, so skip it :" + scanFile.toString());
            throw new PackageManagerException(-2, "this is not current devices app");
        } else if (isSystemApp && scanFile.getName().startsWith("SystemHelper") && !scanFile.getName().endsWith(this.mDeviceType)) {
            Slog.d(TAG, "This is SystemHelper, so skip it :" + scanFile.toString());
            throw new PackageManagerException(-2, "this is not current devices app");
        } else {
            Package scannedPkg = scanPackageInternalLI(pkg, scanFile, policyFlags, scanFlags, currentTime, user);
            int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                scanPackageInternalLI((Package) pkg.childPackages.get(i), scanFile, policyFlags, scanFlags, currentTime, user);
            }
            if ((32768 & scanFlags) != 0) {
                return scanPackageLI(pkg, scanFile, policyFlags, scanFlags, currentTime, user);
            }
            return scannedPkg;
        }
    }

    /* JADX WARNING: Missing block: B:65:0x0171, code:
            r35 = false;
     */
    /* JADX WARNING: Missing block: B:66:0x0173, code:
            if (r34 == null) goto L_0x019d;
     */
    /* JADX WARNING: Missing block: B:68:0x0177, code:
            if ((r42 & 1) != 0) goto L_0x017f;
     */
    /* JADX WARNING: Missing block: B:70:0x017d, code:
            if ((r42 & 8192) == 0) goto L_0x019d;
     */
    /* JADX WARNING: Missing block: B:72:0x0183, code:
            if (locationIsPrivileged(r41) == false) goto L_0x027f;
     */
    /* JADX WARNING: Missing block: B:73:0x0185, code:
            r34.pkgPrivateFlags |= 8;
     */
    /* JADX WARNING: Missing block: B:74:0x018f, code:
            if (r28 == null) goto L_0x019d;
     */
    /* JADX WARNING: Missing block: B:76:0x019b, code:
            if (r28.codePath.equals(r41) == false) goto L_0x028b;
     */
    /* JADX WARNING: Missing block: B:77:0x019d, code:
            if (r34 == null) goto L_0x01d5;
     */
    /* JADX WARNING: Missing block: B:79:0x01a3, code:
            if (isSystemApp(r34) == false) goto L_0x01a7;
     */
    /* JADX WARNING: Missing block: B:80:0x01a5, code:
            r42 = r42 | 1;
     */
    /* JADX WARNING: Missing block: B:82:0x01ab, code:
            if (isVendorApp(r34) != false) goto L_0x01b7;
     */
    /* JADX WARNING: Missing block: B:84:0x01b5, code:
            if (locationIsOperator(r34.codePath) == false) goto L_0x01c7;
     */
    /* JADX WARNING: Missing block: B:86:0x01bf, code:
            if (locationIsOperator(r28.codePath) == false) goto L_0x01c7;
     */
    /* JADX WARNING: Missing block: B:87:0x01c1, code:
            r42 = r42 | 8192;
     */
    /* JADX WARNING: Missing block: B:89:0x01cd, code:
            if ((r34.pkgPrivateFlags & 8) == 0) goto L_0x01d5;
     */
    /* JADX WARNING: Missing block: B:90:0x01cf, code:
            r42 = r42 | 128;
     */
    /* JADX WARNING: Missing block: B:91:0x01d5, code:
            collectCertificatesLI(r28, r40, r41, r42);
            r32 = false;
     */
    /* JADX WARNING: Missing block: B:92:0x01e4, code:
            if (r34 != null) goto L_0x01f2;
     */
    /* JADX WARNING: Missing block: B:93:0x01e6, code:
            if (r28 == null) goto L_0x01f2;
     */
    /* JADX WARNING: Missing block: B:95:0x01ea, code:
            if ((r42 & 64) == 0) goto L_0x01f2;
     */
    /* JADX WARNING: Missing block: B:97:0x01f0, code:
            if (isSystemApp(r28) == false) goto L_0x04ae;
     */
    /* JADX WARNING: Missing block: B:118:0x027f, code:
            r34.pkgPrivateFlags &= -9;
     */
    /* JADX WARNING: Missing block: B:120:0x028d, code:
            if (DEBUG_INSTALL == false) goto L_0x02ad;
     */
    /* JADX WARNING: Missing block: B:121:0x028f, code:
            android.util.Slog.d(TAG, "Path changing from " + r28.codePath);
     */
    /* JADX WARNING: Missing block: B:123:0x02b5, code:
            if (r40.mVersionCode < r28.versionCode) goto L_0x02bd;
     */
    /* JADX WARNING: Missing block: B:125:0x02bb, code:
            if ((r42 & 8192) == 0) goto L_0x0406;
     */
    /* JADX WARNING: Missing block: B:127:0x02bf, code:
            if (DEBUG_INSTALL == false) goto L_0x030a;
     */
    /* JADX WARNING: Missing block: B:128:0x02c1, code:
            android.util.Slog.i(TAG, "Package " + r28.name + " at " + r41 + " ignored: updated version " + r28.versionCode + " better than this " + r40.mVersionCode);
     */
    /* JADX WARNING: Missing block: B:130:0x0314, code:
            if (r34.codePath.equals(r41) != false) goto L_0x036c;
     */
    /* JADX WARNING: Missing block: B:131:0x0316, code:
            android.util.Slog.w(TAG, "Code path for hidden system pkg " + r28.name + " changing from " + r34.codePathString + " to " + r41);
            r34.codePath = r41;
            r34.codePathString = r41.toString();
            r34.resourcePath = r41;
            r34.resourcePathString = r41.toString();
     */
    /* JADX WARNING: Missing block: B:132:0x036c, code:
            r34.pkg = r40;
            r34.versionCode = r40.mVersionCode;
     */
    /* JADX WARNING: Missing block: B:133:0x037e, code:
            if (r34.childPackageNames == null) goto L_0x03b9;
     */
    /* JADX WARNING: Missing block: B:134:0x0380, code:
            r17 = r34.childPackageNames.size();
     */
    /* JADX WARNING: Missing block: B:135:0x0388, code:
            r25 = 0;
     */
    /* JADX WARNING: Missing block: B:137:0x038e, code:
            if (r25 >= r17) goto L_0x03bc;
     */
    /* JADX WARNING: Missing block: B:138:0x0390, code:
            r33 = r39.mSettings.getDisabledSystemPkgLPr((java.lang.String) r34.childPackageNames.get(r25));
     */
    /* JADX WARNING: Missing block: B:139:0x03a6, code:
            if (r33 == null) goto L_0x03b6;
     */
    /* JADX WARNING: Missing block: B:140:0x03a8, code:
            r33.pkg = r40;
            r33.versionCode = r40.mVersionCode;
     */
    /* JADX WARNING: Missing block: B:141:0x03b6, code:
            r25 = r25 + 1;
     */
    /* JADX WARNING: Missing block: B:142:0x03b9, code:
            r17 = 0;
     */
    /* JADX WARNING: Missing block: B:144:0x0405, code:
            throw new com.android.server.pm.PackageManagerException(5, "Package " + r28.name + " at " + r41 + " ignored: updated version " + r28.versionCode + " better than this " + r40.mVersionCode);
     */
    /* JADX WARNING: Missing block: B:145:0x0406, code:
            r7 = r39.mPackages;
     */
    /* JADX WARNING: Missing block: B:146:0x040a, code:
            monitor-enter(r7);
     */
    /* JADX WARNING: Missing block: B:148:?, code:
            r39.mPackages.remove(r28.name);
     */
    /* JADX WARNING: Missing block: B:149:0x0416, code:
            monitor-exit(r7);
     */
    /* JADX WARNING: Missing block: B:150:0x0417, code:
            logCriticalInfo(5, "Package " + r28.name + " at " + r41 + " reverting from " + r28.codePathString + ": new version " + r40.mVersionCode + " better than installed " + r28.versionCode);
            r15 = createInstallArgsForExisting(packageFlagsToInstallFlags(r28), r28.codePathString, r28.resourcePathString, com.android.server.pm.InstructionSets.getAppDexInstructionSets(r28));
            r6 = r39.mInstallLock;
     */
    /* JADX WARNING: Missing block: B:151:0x048b, code:
            monitor-enter(r6);
     */
    /* JADX WARNING: Missing block: B:153:?, code:
            r15.cleanUpResourcesLI();
     */
    /* JADX WARNING: Missing block: B:154:0x048f, code:
            monitor-exit(r6);
     */
    /* JADX WARNING: Missing block: B:155:0x0490, code:
            r7 = r39.mPackages;
     */
    /* JADX WARNING: Missing block: B:156:0x0494, code:
            monitor-enter(r7);
     */
    /* JADX WARNING: Missing block: B:158:?, code:
            r39.mSettings.enableSystemPackageLPw(r28.name);
     */
    /* JADX WARNING: Missing block: B:159:0x04a0, code:
            monitor-exit(r7);
     */
    /* JADX WARNING: Missing block: B:160:0x04a1, code:
            r35 = true;
     */
    /* JADX WARNING: Missing block: B:171:0x04bc, code:
            if (compareSignatures(r28.signatures.mSignatures, r40.mSignatures) == 0) goto L_0x0533;
     */
    /* JADX WARNING: Missing block: B:172:0x04be, code:
            logCriticalInfo(5, "Package " + r28.name + " appeared on system, but" + " signatures don't match existing userdata copy; removing");
            r36 = null;
            r24 = null;
     */
    /* JADX WARNING: Missing block: B:174:?, code:
            r24 = freezePackage(r40.packageName, "scanPackageInternalLI");
            deletePackageLIF(r40.packageName, null, true, null, 0, null, false, null);
     */
    /* JADX WARNING: Missing block: B:175:0x0509, code:
            if (r24 == null) goto L_0x050e;
     */
    /* JADX WARNING: Missing block: B:177:?, code:
            r24.close();
     */
    /* JADX WARNING: Missing block: B:180:0x0511, code:
            r36 = th;
     */
    /* JADX WARNING: Missing block: B:184:0x0515, code:
            r7 = move-exception;
     */
    /* JADX WARNING: Missing block: B:185:0x0516, code:
            r37 = r7;
            r7 = r6;
            r6 = r37;
     */
    /* JADX WARNING: Missing block: B:199:0x053b, code:
            if (r40.mVersionCode > r28.versionCode) goto L_0x058f;
     */
    /* JADX WARNING: Missing block: B:200:0x053d, code:
            r32 = true;
            logCriticalInfo(4, "Package " + r28.name + " appeared at " + r41 + " but new version " + r40.mVersionCode + " better than installed " + r28.versionCode + "; hiding system");
     */
    /* JADX WARNING: Missing block: B:201:0x058f, code:
            logCriticalInfo(5, "Package " + r28.name + " at " + r41 + " reverting from " + r28.codePathString + ": new version " + r40.mVersionCode + " better than installed " + r28.versionCode);
            r15 = createInstallArgsForExisting(packageFlagsToInstallFlags(r28), r28.codePathString, r28.resourcePathString, com.android.server.pm.InstructionSets.getAppDexInstructionSets(r28));
            r6 = r39.mInstallLock;
     */
    /* JADX WARNING: Missing block: B:202:0x0603, code:
            monitor-enter(r6);
     */
    /* JADX WARNING: Missing block: B:204:?, code:
            r15.cleanUpResourcesLI();
     */
    /* JADX WARNING: Missing block: B:205:0x0607, code:
            monitor-exit(r6);
     */
    /* JADX WARNING: Missing block: B:218:0x064a, code:
            r6 = th;
     */
    /* JADX WARNING: Missing block: B:219:0x064b, code:
            r7 = null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private Package scanPackageInternalLI(Package pkg, File scanFile, int policyFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        Throwable th;
        PackageSetting ps = null;
        synchronized (this.mPackages) {
            String oldName = (String) this.mSettings.mRenamedPackages.get(pkg.packageName);
            if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(oldName)) {
                ps = this.mSettings.peekPackageLPr(oldName);
            }
            if (ps == null) {
                ps = this.mSettings.peekPackageLPr(pkg.packageName);
            }
            PackageSetting updatedPkg = this.mSettings.getDisabledSystemPkgLPr(ps != null ? ps.name : pkg.packageName);
            if (DEBUG_INSTALL && updatedPkg != null) {
                Slog.d(TAG, "updatedPkg = " + updatedPkg);
            }
            if (!isFirstBoot() && ((isVendorApp(pkg) || isSystemApp(pkg)) && (updatedPkg != null || ps.getInstallStatus() == 0))) {
                Slog.d(TAG, "Skip scanning " + scanFile.toString() + ", pacakge " + updatedPkg + ", install status:  " + ps.getInstallStatus());
                return null;
            } else if (ps == null && updatedPkg != null) {
                Slog.d(TAG, "Skip scanning uninstalled package: " + pkg.packageName);
                return null;
            } else if ((policyFlags & 1) != 0) {
                PackageSetting disabledPs = this.mSettings.getDisabledSystemPkgLPr(pkg.packageName);
                if (disabledPs != null) {
                    int scannedChildCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
                    int disabledChildCount = disabledPs.childPackageNames != null ? disabledPs.childPackageNames.size() : 0;
                    for (int i = 0; i < disabledChildCount; i++) {
                        String disabledChildPackageName = (String) disabledPs.childPackageNames.get(i);
                        boolean disabledPackageAvailable = false;
                        for (int j = 0; j < scannedChildCount; j++) {
                            if (((Package) pkg.childPackages.get(j)).packageName.equals(disabledChildPackageName)) {
                                disabledPackageAvailable = true;
                                break;
                            }
                        }
                        if (!disabledPackageAvailable) {
                            this.mSettings.removeDisabledSystemPackageLPw(disabledChildPackageName);
                        }
                    }
                }
            }
        }
        if (r24 != null) {
            try {
                r24.close();
            } catch (Throwable th2) {
                if (th == null) {
                    th = th2;
                } else if (th != th2) {
                    th.addSuppressed(th2);
                }
            }
        }
        if (th != null) {
            throw th;
        }
        throw th;
        if (th != null) {
            throw th;
        }
        ps = null;
        if (!((policyFlags & 64) != 0 || ps == null || ps.codePath.equals(ps.resourcePath))) {
            policyFlags |= 16;
        }
        String resourcePath = null;
        String baseResourcePath = null;
        if ((policyFlags & 16) == 0 || updatedPkgBetter) {
            resourcePath = pkg.codePath;
            baseResourcePath = pkg.baseCodePath;
        } else if (ps == null || ps.resourcePathString == null) {
            Slog.e(TAG, "Resource path not set for package " + pkg.packageName);
        } else {
            resourcePath = ps.resourcePathString;
            baseResourcePath = ps.resourcePathString;
        }
        pkg.setApplicationVolumeUuid(pkg.volumeUuid);
        pkg.setApplicationInfoCodePath(pkg.codePath);
        pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
        pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
        pkg.setApplicationInfoResourcePath(resourcePath);
        pkg.setApplicationInfoBaseResourcePath(baseResourcePath);
        pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
        Package scannedPkg = scanPackageLI(pkg, policyFlags, scanFlags | 8, currentTime, user);
        if (shouldHideSystemApp) {
            synchronized (this.mPackages) {
                this.mSettings.disableSystemPackageLPw(pkg.packageName, true);
            }
        }
        return scannedPkg;
    }

    private static String fixProcessName(String defProcessName, String processName, int uid) {
        if (processName == null) {
            return defProcessName;
        }
        return processName;
    }

    private void verifySignaturesLP(PackageSetting pkgSetting, Package pkg) throws PackageManagerException {
        boolean match;
        if (pkgSetting.signatures.mSignatures != null) {
            match = compareSignatures(pkgSetting.signatures.mSignatures, pkg.mSignatures) == 0;
            if (!match) {
                match = compareSignaturesCompat(pkgSetting.signatures, pkg) == 0;
                if (DEBUG_SETTINGS) {
                    Log.i(TAG, "pkgSetting.sig  = " + pkgSetting.sharedUser.signatures.mSignatures[0].toCharsString());
                    Log.i(TAG, "pkg.mSignatures = " + pkg.mSignatures[0].toCharsString());
                }
            }
            if (!match) {
                match = compareSignaturesRecover(pkgSetting.signatures, pkg) == 0;
            }
            if (!match) {
                throw new PackageManagerException(-7, "Package " + pkg.packageName + " signatures do not match the " + "previously installed version; ignoring!");
            }
        }
        if (pkgSetting.sharedUser != null && pkgSetting.sharedUser.signatures.mSignatures != null) {
            match = compareSignatures(pkgSetting.sharedUser.signatures.mSignatures, pkg.mSignatures) == 0;
            if (!match) {
                match = compareSignaturesCompat(pkgSetting.sharedUser.signatures, pkg) == 0;
                if (DEBUG_SETTINGS) {
                    Log.i(TAG, "pkgSetting.sig  = " + pkgSetting.sharedUser.signatures.mSignatures[0].toCharsString());
                    Log.i(TAG, "pkg.mSignatures = " + pkg.mSignatures[0].toCharsString());
                }
            }
            if (!match) {
                match = compareSignaturesRecover(pkgSetting.sharedUser.signatures, pkg) == 0;
            }
            if (!match) {
                throw new PackageManagerException(-8, "Package " + pkg.packageName + " has no signatures that match those in shared user " + pkgSetting.sharedUser.name + "; ignoring!");
            }
        }
    }

    private static final void enforceSystemOrRoot(String message) {
        int uid = Binder.getCallingUid();
        if (uid != 1000 && uid != 0) {
            throw new SecurityException(message);
        }
    }

    private Map<String, String> getDeviceInfo() {
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(DEVICE_INFO_PATH), 256);
            Map<String, String> results = new HashMap();
            while (true) {
                String str = bufferedReader.readLine();
                if (str == null) {
                    bufferedReader.close();
                    Log.e(TAG, "getDeviceInfo,map=" + results.toString());
                    return results;
                } else if (str.contains(DEVICE_MANUFACTURE)) {
                    results.put(DEVICE_MANUFACTURE, str.split("\\s+")[2]);
                } else if (str.contains("version")) {
                    results.put("version", str.split("\\s+")[2]);
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e2) {
            e2.printStackTrace();
            return null;
        }
    }

    private boolean isMicronMcp() {
        String deviceVersion = null;
        String deviceManufacture = null;
        for (Entry<String, String> entry : getDeviceInfo().entrySet()) {
            String key = (String) entry.getKey();
            if (key.equals(DEVICE_MANUFACTURE)) {
                deviceManufacture = (String) entry.getValue();
            } else if (key.equals("version")) {
                deviceVersion = (String) entry.getValue();
            }
        }
        if (!(deviceVersion == null || deviceManufacture == null)) {
            Log.e(TAG, "isMicronMcp,deviceVersion=" + deviceVersion + ",deviceManufacture=" + deviceManufacture);
            if (deviceVersion.equalsIgnoreCase(DEVICE_VERSION_MICRON) && deviceManufacture.equalsIgnoreCase(DEVICE_MANUFACTURE_MICRON)) {
                return true;
            }
        }
        return false;
    }

    public void performFstrimIfNeeded() {
        enforceSystemOrRoot("Only the system can request fstrim");
        try {
            IMountService ms = PackageHelper.getMountService();
            if (ms != null) {
                long interval;
                boolean doTrim = false;
                if (isMicronMcp()) {
                    Log.e(TAG, "isMicronMcp,true!");
                    interval = Global.getLong(this.mContext.getContentResolver(), "fstrim_mandatory_interval", 86400000);
                } else {
                    interval = Global.getLong(this.mContext.getContentResolver(), "fstrim_mandatory_interval", DEFAULT_MANDATORY_FSTRIM_INTERVAL);
                }
                if (interval > 0) {
                    long timeSinceLast = System.currentTimeMillis() - ms.lastMaintenance();
                    if (timeSinceLast > interval) {
                        doTrim = true;
                        Slog.w(TAG, "No disk maintenance in " + timeSinceLast + "; running immediately");
                    }
                }
                if (doTrim) {
                    synchronized (this.mPackages) {
                        boolean dexOptDialogShown = this.mDexOptDialogShown;
                    }
                    if (!isFirstBoot() && dexOptDialogShown) {
                        try {
                            ActivityManagerNative.getDefault().showBootMessage(this.mContext.getResources().getString(17040312), false);
                        } catch (RemoteException e) {
                        }
                    }
                    ms.runMaintenance();
                    return;
                }
                return;
            }
            Slog.e(TAG, "Mount service unavailable!");
        } catch (RemoteException e2) {
        }
    }

    public void updatePackagesIfNeeded() {
        enforceSystemOrRoot("Only the system can request package update");
        boolean causeUpgrade = isUpgrade();
        boolean causeFirstBoot = !isFirstBoot() ? this.mIsPreNUpgrade : true;
        boolean causePrunedCache = VMRuntime.didPruneDalvikCache();
        if (causeUpgrade || causeFirstBoot || causePrunedCache) {
            List<Package> pkgs;
            int i;
            if (isBootFromOTA()) {
                List<Package> persistkgs;
                synchronized (this.mPackages) {
                    persistkgs = PackageManagerServiceUtils.getPersistPackagesForDexopt(this.mPackages.values(), this);
                }
                performDexOptUpgrade(persistkgs, this.mIsPreNUpgrade, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(0));
            }
            synchronized (this.mPackages) {
                pkgs = PackageManagerServiceUtils.getPackagesForDexopt(this.mPackages.values(), this);
            }
            long startTime = System.nanoTime();
            boolean z = this.mIsPreNUpgrade;
            if (causeFirstBoot) {
                i = 0;
            } else {
                i = 1;
            }
            int[] stats = performDexOptUpgrade(pkgs, z, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(i));
            int elapsedTimeSeconds = (int) TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - startTime);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_dexopted", stats[0]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_skipped", stats[1]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_failed", stats[2]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_total", getOptimizablePackages().size());
            MetricsLogger.histogram(this.mContext, "opt_dialog_time_s", elapsedTimeSeconds);
        }
    }

    private int[] performDexOptUpgrade(List<Package> pkgs, boolean showDialog, String compilerFilter) {
        int numberOfPackagesVisited = 0;
        int numberOfPackagesOptimized = 0;
        int numberOfPackagesSkipped = 0;
        int numberOfPackagesFailed = 0;
        int numberOfPackagesToDexopt = pkgs.size();
        for (Package pkg : pkgs) {
            numberOfPackagesVisited++;
            if (PackageDexOptimizer.canOptimizePackage(pkg)) {
                if (DEBUG_DEXOPT) {
                    Log.i(TAG, "Updating app " + numberOfPackagesVisited + " of " + numberOfPackagesToDexopt + ": " + pkg.packageName);
                }
                if (showDialog) {
                    try {
                        IActivityManager iActivityManager = ActivityManagerNative.getDefault();
                        Resources resources = this.mContext.getResources();
                        Object[] objArr = new Object[2];
                        objArr[0] = Integer.valueOf(numberOfPackagesVisited);
                        objArr[1] = Integer.valueOf(numberOfPackagesToDexopt);
                        iActivityManager.showBootMessage(resources.getString(17040316, objArr), true);
                    } catch (RemoteException e) {
                    }
                    synchronized (this.mPackages) {
                        this.mDexOptDialogShown = true;
                    }
                }
                if (isSystemApp(pkg) && DexFile.isProfileGuidedCompilerFilter(compilerFilter) && !Environment.getReferenceProfile(pkg.packageName).exists()) {
                    compilerFilter = PackageManagerServiceCompilerMapping.getNonProfileGuidedCompilerFilter(compilerFilter);
                }
                int dexOptStatus = performDexOptTraced(pkg.packageName, false, compilerFilter, false);
                switch (dexOptStatus) {
                    case -1:
                        numberOfPackagesFailed++;
                        break;
                    case 0:
                        numberOfPackagesSkipped++;
                        break;
                    case 1:
                        numberOfPackagesOptimized++;
                        break;
                    default:
                        Log.e(TAG, "Unexpected dexopt return code " + dexOptStatus);
                        break;
                }
            }
            if (DEBUG_DEXOPT) {
                Log.i(TAG, "Skipping update of of non-optimizable app " + pkg.packageName);
            }
            numberOfPackagesSkipped++;
        }
        int[] iArr = new int[3];
        iArr[0] = numberOfPackagesOptimized;
        iArr[1] = numberOfPackagesSkipped;
        iArr[2] = numberOfPackagesFailed;
        return iArr;
    }

    public void notifyPackageUse(String packageName, int reason) {
        synchronized (this.mPackages) {
            Package p = (Package) this.mPackages.get(packageName);
            if (p == null) {
                return;
            }
            p.mLastPackageUsageTimeInMills[reason] = System.currentTimeMillis();
        }
    }

    public boolean performDexOptIfNeeded(String packageName) {
        if (performDexOptTraced(packageName, false, PackageManagerServiceCompilerMapping.getFullCompilerFilter(), false) != -1) {
            return true;
        }
        return false;
    }

    public boolean performDexOpt(String packageName, boolean checkProfiles, int compileReason, boolean force) {
        return performDexOptTraced(packageName, checkProfiles, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(compileReason), force) != -1;
    }

    public boolean performDexOptMode(String packageName, boolean checkProfiles, String targetCompilerFilter, boolean force) {
        return performDexOptTraced(packageName, checkProfiles, targetCompilerFilter, force) != -1;
    }

    private int performDexOptTraced(String packageName, boolean checkProfiles, String targetCompilerFilter, boolean force) {
        addBootEvent("PMS:performDexOpt:" + packageName);
        Trace.traceBegin(1048576, "dexopt");
        try {
            int performDexOptInternal = performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force);
            return performDexOptInternal;
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    /* JADX WARNING: Missing block: B:11:0x001d, code:
            r0 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Missing block: B:13:?, code:
            r3 = r6.mInstallLock;
     */
    /* JADX WARNING: Missing block: B:14:0x0023, code:
            monitor-enter(r3);
     */
    /* JADX WARNING: Missing block: B:16:?, code:
            r4 = performDexOptInternalWithDependenciesLI(r2, r8, r9, r10);
     */
    /* JADX WARNING: Missing block: B:18:?, code:
            monitor-exit(r3);
     */
    /* JADX WARNING: Missing block: B:28:0x0034, code:
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private int performDexOptInternal(String packageName, boolean checkProfiles, String targetCompilerFilter, boolean force) {
        int i = this.mPackages;
        synchronized (i) {
            Package p = (Package) this.mPackages.get(packageName);
            if (p == null) {
                return -1;
            }
            this.mPackageUsage.maybeWriteAsync(this.mPackages);
            this.mCompilerStats.maybeWriteAsync();
        }
        return i;
    }

    public ArraySet<String> getOptimizablePackages() {
        ArraySet<String> pkgs = new ArraySet();
        synchronized (this.mPackages) {
            for (Package p : this.mPackages.values()) {
                if (PackageDexOptimizer.canOptimizePackage(p)) {
                    pkgs.add(p.packageName);
                }
            }
        }
        return pkgs;
    }

    private int performDexOptInternalWithDependenciesLI(Package p, boolean checkProfiles, String targetCompilerFilter, boolean force) {
        PackageDexOptimizer pdo;
        if (force) {
            pdo = new ForcedUpdatePackageDexOptimizer(this.mPackageDexOptimizer);
        } else {
            pdo = this.mPackageDexOptimizer;
        }
        Collection<Package> deps = findSharedNonSystemLibraries(p);
        String[] instructionSets = InstructionSets.getAppDexInstructionSets(p.applicationInfo);
        if (!deps.isEmpty()) {
            for (Package depPackage : deps) {
                pdo.performDexOpt(depPackage, null, instructionSets, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(5), getOrCreateCompilerPackageStats(depPackage));
            }
        }
        return pdo.performDexOpt(p, p.usesLibraryFiles, instructionSets, checkProfiles, targetCompilerFilter, getOrCreateCompilerPackageStats(p));
    }

    Collection<Package> findSharedNonSystemLibraries(Package p) {
        if (p.usesLibraries == null && p.usesOptionalLibraries == null) {
            return Collections.emptyList();
        }
        Collection retValue = new ArrayList();
        findSharedNonSystemLibrariesRecursive(p, retValue, new HashSet());
        retValue.remove(p);
        return retValue;
    }

    private void findSharedNonSystemLibrariesRecursive(Package p, Collection<Package> collected, Set<String> collectedNames) {
        if (!collectedNames.contains(p.packageName)) {
            collectedNames.add(p.packageName);
            collected.add(p);
            if (p.usesLibraries != null) {
                findSharedNonSystemLibrariesRecursive(p.usesLibraries, (Collection) collected, (Set) collectedNames);
            }
            if (p.usesOptionalLibraries != null) {
                findSharedNonSystemLibrariesRecursive(p.usesOptionalLibraries, (Collection) collected, (Set) collectedNames);
            }
        }
    }

    private void findSharedNonSystemLibrariesRecursive(Collection<String> libs, Collection<Package> collected, Set<String> collectedNames) {
        for (String libName : libs) {
            Package libPkg = findSharedNonSystemLibrary(libName);
            if (libPkg != null) {
                findSharedNonSystemLibrariesRecursive(libPkg, (Collection) collected, (Set) collectedNames);
            }
        }
    }

    /* JADX WARNING: Missing block: B:11:0x001f, code:
            return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private Package findSharedNonSystemLibrary(String libName) {
        synchronized (this.mPackages) {
            SharedLibraryEntry lib = (SharedLibraryEntry) this.mSharedLibraries.get(libName);
            if (lib == null || lib.apk == null) {
            } else {
                Package packageR = (Package) this.mPackages.get(lib.apk);
                return packageR;
            }
        }
    }

    public void shutdown() {
        this.mPackageUsage.writeNow(this.mPackages);
        this.mCompilerStats.writeNow();
        if (this.mCtaPermsController != null) {
            this.mCtaPermsController.shutdown();
        }
    }

    public void dumpProfiles(String packageName) {
        Package pkg;
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        int callingUid = Binder.getCallingUid();
        if (callingUid == SHELL_UID || callingUid == 0 || callingUid == pkg.applicationInfo.uid) {
            synchronized (this.mInstallLock) {
                Trace.traceBegin(1048576, "dump profiles");
                int sharedGid = UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
                try {
                    List<String> allCodePaths = pkg.getAllCodePathsExcludingResourceOnly();
                    this.mInstaller.dumpProfiles(Integer.toString(sharedGid), packageName, TextUtils.join(";", allCodePaths));
                } catch (InstallerException e) {
                    Slog.w(TAG, "Failed to dump profiles", e);
                }
                Trace.traceEnd(1048576);
            }
            return;
        }
        throw new SecurityException("dumpProfiles");
    }

    public void forceDexOpt(String packageName) {
        Package pkg;
        enforceSystemOrRoot("forceDexOpt");
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        synchronized (this.mInstallLock) {
            Trace.traceBegin(1048576, "dexopt");
            int res = performDexOptInternalWithDependenciesLI(pkg, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(7), true);
            Trace.traceEnd(1048576);
            if (res != 1) {
                throw new IllegalStateException("Failed to dexopt: " + res);
            }
        }
    }

    private boolean verifyPackageUpdateLPr(PackageSetting oldPkg, Package newPkg) {
        if ((oldPkg.pkgFlags & 1) == 0) {
            Slog.w(TAG, "Unable to update from " + oldPkg.name + " to " + newPkg.packageName + ": old package not in system partition");
            return false;
        } else if (this.mPackages.get(oldPkg.name) == null) {
            return true;
        } else {
            Slog.w(TAG, "Unable to update from " + oldPkg.name + " to " + newPkg.packageName + ": old package still exists");
            return false;
        }
    }

    void removeCodePathLI(File codePath) {
        if (codePath.isDirectory()) {
            try {
                this.mInstaller.rmPackageDir(codePath.getAbsolutePath());
                return;
            } catch (InstallerException e) {
                Slog.w(TAG, "Failed to remove code path", e);
                return;
            }
        }
        codePath.delete();
    }

    private int[] resolveUserIds(int userId) {
        if (userId == -1) {
            return sUserManager.getUserIds();
        }
        int[] iArr = new int[1];
        iArr[0] = userId;
        return iArr;
    }

    private void clearAppDataLIF(Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        clearAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            clearAppDataLeafLIF((Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void clearAppDataLeafLIF(Package pkg, int userId, int flags) {
        PackageSetting ps;
        synchronized (this.mPackages) {
            ps = (PackageSetting) this.mSettings.mPackages.get(pkg.packageName);
        }
        for (int realUserId : resolveUserIds(userId)) {
            try {
                this.mInstaller.clearAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags, ps != null ? ps.getCeDataInode(realUserId) : 0);
            } catch (InstallerException e) {
                Slog.w(TAG, String.valueOf(e));
            }
        }
    }

    private void destroyAppDataLIF(Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        destroyAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            destroyAppDataLeafLIF((Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void destroyAppDataLeafLIF(Package pkg, int userId, int flags) {
        PackageSetting ps;
        synchronized (this.mPackages) {
            ps = (PackageSetting) this.mSettings.mPackages.get(pkg.packageName);
        }
        for (int realUserId : resolveUserIds(userId)) {
            try {
                this.mInstaller.destroyAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags, ps != null ? ps.getCeDataInode(realUserId) : 0);
            } catch (InstallerException e) {
                Slog.w(TAG, String.valueOf(e));
            }
        }
    }

    private void destroyAppProfilesLIF(Package pkg, int userId) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        destroyAppProfilesLeafLIF(pkg);
        destroyAppReferenceProfileLeafLIF(pkg, userId, true);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            destroyAppProfilesLeafLIF((Package) pkg.childPackages.get(i));
            destroyAppReferenceProfileLeafLIF((Package) pkg.childPackages.get(i), userId, true);
        }
    }

    private void destroyAppReferenceProfileLeafLIF(Package pkg, int userId, boolean removeBaseMarker) {
        if (!pkg.isForwardLocked()) {
            for (String path : pkg.getAllCodePathsExcludingResourceOnly()) {
                try {
                    String useMarker = PackageManagerServiceUtils.realpath(new File(path)).replace('/', '@');
                    for (int realUserId : resolveUserIds(userId)) {
                        File profileDir = Environment.getDataProfilesDeForeignDexDirectory(realUserId);
                        if (removeBaseMarker) {
                            File foreignUseMark = new File(profileDir, useMarker);
                            if (foreignUseMark.exists() && !foreignUseMark.delete()) {
                                Slog.w(TAG, "Unable to delete foreign user mark for package: " + pkg.packageName);
                            }
                        }
                        File[] markers = profileDir.listFiles();
                        if (markers != null) {
                            String searchString = "@" + pkg.packageName + "@";
                            for (File marker : markers) {
                                if (marker.getName().indexOf(searchString) > 0 && !marker.delete()) {
                                    Slog.w(TAG, "Unable to delete foreign user mark for package: " + pkg.packageName);
                                }
                            }
                        }
                    }
                } catch (IOException e) {
                    Slog.w(TAG, "Failed to get canonical path", e);
                }
            }
        }
    }

    private void destroyAppProfilesLeafLIF(Package pkg) {
        try {
            this.mInstaller.destroyAppProfiles(pkg.packageName);
        } catch (InstallerException e) {
            Slog.w(TAG, String.valueOf(e));
        }
    }

    private void clearAppProfilesLIF(Package pkg, int userId) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        clearAppProfilesLeafLIF(pkg);
        destroyAppReferenceProfileLeafLIF(pkg, userId, false);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            clearAppProfilesLeafLIF((Package) pkg.childPackages.get(i));
        }
    }

    private void clearAppProfilesLeafLIF(Package pkg) {
        try {
            this.mInstaller.clearAppProfiles(pkg.packageName);
        } catch (InstallerException e) {
            Slog.w(TAG, String.valueOf(e));
        }
    }

    private void setInstallAndUpdateTime(Package pkg, long firstInstallTime, long lastUpdateTime) {
        PackageSetting ps = pkg.mExtras;
        if (ps != null) {
            ps.firstInstallTime = firstInstallTime;
            ps.lastUpdateTime = lastUpdateTime;
        }
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            ps = ((Package) pkg.childPackages.get(i)).mExtras;
            if (ps != null) {
                ps.firstInstallTime = firstInstallTime;
                ps.lastUpdateTime = lastUpdateTime;
            }
        }
    }

    private void addSharedLibraryLPw(ArraySet<String> usesLibraryFiles, SharedLibraryEntry file, Package changingLib) {
        if (file.path != null) {
            usesLibraryFiles.add(file.path);
            return;
        }
        Package p = (Package) this.mPackages.get(file.apk);
        if (changingLib != null && changingLib.packageName.equals(file.apk) && (p == null || p.packageName.equals(changingLib.packageName))) {
            p = changingLib;
        }
        if (p != null) {
            usesLibraryFiles.addAll(p.getAllCodePaths());
        }
    }

    private void updateSharedLibrariesLPw(Package pkg, Package changingLib) throws PackageManagerException {
        if (pkg.usesLibraries != null || pkg.usesOptionalLibraries != null) {
            int i;
            SharedLibraryEntry file;
            ArraySet<String> usesLibraryFiles = new ArraySet();
            int N = pkg.usesLibraries != null ? pkg.usesLibraries.size() : 0;
            for (i = 0; i < N; i++) {
                file = (SharedLibraryEntry) this.mSharedLibraries.get(pkg.usesLibraries.get(i));
                if (file == null) {
                    throw new PackageManagerException(-9, "Package " + pkg.packageName + " requires unavailable shared library " + ((String) pkg.usesLibraries.get(i)) + "; failing!");
                }
                addSharedLibraryLPw(usesLibraryFiles, file, changingLib);
            }
            N = pkg.usesOptionalLibraries != null ? pkg.usesOptionalLibraries.size() : 0;
            for (i = 0; i < N; i++) {
                file = (SharedLibraryEntry) this.mSharedLibraries.get(pkg.usesOptionalLibraries.get(i));
                if (file != null) {
                    addSharedLibraryLPw(usesLibraryFiles, file, changingLib);
                } else if (DEBUG_PACKAGE_SCANNING || DEBUG_INSTALL) {
                    Slog.w(TAG, "Package " + pkg.packageName + " desires unavailable shared library " + ((String) pkg.usesOptionalLibraries.get(i)) + "; ignoring!");
                }
            }
            N = usesLibraryFiles.size();
            if (N > 0) {
                pkg.usesLibraryFiles = (String[]) usesLibraryFiles.toArray(new String[N]);
            } else {
                pkg.usesLibraryFiles = null;
            }
        }
    }

    private static boolean hasString(List<String> list, List<String> which) {
        if (list == null) {
            return false;
        }
        for (int i = list.size() - 1; i >= 0; i--) {
            for (int j = which.size() - 1; j >= 0; j--) {
                if (((String) which.get(j)).equals(list.get(i))) {
                    return true;
                }
            }
        }
        return false;
    }

    private void updateAllSharedLibrariesLPw() {
        for (Package pkg : this.mPackages.values()) {
            try {
                updateSharedLibrariesLPw(pkg, null);
            } catch (PackageManagerException e) {
                Slog.e(TAG, "updateAllSharedLibrariesLPw failed: " + e.getMessage());
            }
        }
    }

    private ArrayList<Package> updateAllSharedLibrariesLPw(Package changingPkg) {
        ArrayList<Package> res = null;
        for (Package pkg : this.mPackages.values()) {
            if (hasString(pkg.usesLibraries, changingPkg.libraryNames) || hasString(pkg.usesOptionalLibraries, changingPkg.libraryNames)) {
                if (res == null) {
                    res = new ArrayList();
                }
                res.add(pkg);
                try {
                    updateSharedLibrariesLPw(pkg, changingPkg);
                } catch (PackageManagerException e) {
                    Slog.e(TAG, "updateAllSharedLibrariesLPw failed: " + e.getMessage());
                }
            }
        }
        return res;
    }

    private static String deriveAbiOverride(String abiOverride, PackageSetting settings) {
        if (INSTALL_PACKAGE_SUFFIX.equals(abiOverride)) {
            return null;
        }
        if (abiOverride != null) {
            return abiOverride;
        }
        if (settings != null) {
            return settings.cpuAbiOverrideString;
        }
        return null;
    }

    private Package scanPackageTracedLI(Package pkg, int policyFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        Trace.traceBegin(1048576, "scanPackage");
        if ((32768 & scanFlags) != 0) {
            scanFlags &= -32769;
        } else if (pkg.childPackages != null && pkg.childPackages.size() > 0) {
            scanFlags |= 32768;
        }
        try {
            Package scannedPkg = scanPackageLI(pkg, policyFlags, scanFlags, currentTime, user);
            int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                scanPackageLI((Package) pkg.childPackages.get(i), policyFlags, scanFlags, currentTime, user);
            }
            if ((32768 & scanFlags) != 0) {
                return scanPackageTracedLI(pkg, policyFlags, scanFlags, currentTime, user);
            }
            return scannedPkg;
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    private Package scanPackageLI(Package pkg, int policyFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        boolean success = false;
        try {
            Package res = scanPackageDirtyLI(pkg, policyFlags, scanFlags, currentTime, user);
            success = true;
            return res;
        } finally {
            if (!(success || (scanFlags & 1024) == 0)) {
                destroyAppDataLIF(pkg, -1, 3);
                destroyAppProfilesLIF(pkg, -1);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:20:0x0027 A:{SYNTHETIC, Splitter: B:20:0x0027} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static boolean apkHasCode(String fileName) {
        Throwable th;
        boolean z = false;
        StrictJarFile jarFile = null;
        try {
            StrictJarFile jarFile2 = new StrictJarFile(fileName, false, false);
            try {
                if (jarFile2.findEntry("classes.dex") != null) {
                    z = true;
                }
                if (jarFile2 != null) {
                    try {
                        jarFile2.close();
                    } catch (IOException e) {
                    }
                }
                return z;
            } catch (IOException e2) {
                jarFile = jarFile2;
            } catch (Throwable th2) {
                th = th2;
                jarFile = jarFile2;
                if (jarFile != null) {
                }
                throw th;
            }
        } catch (IOException e3) {
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (IOException e4) {
                }
            }
            return false;
        } catch (Throwable th3) {
            th = th3;
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (IOException e5) {
                }
            }
            throw th;
        }
    }

    private static void enforceCodePolicy(Package pkg) throws PackageManagerException {
        boolean shouldHaveCode;
        if ((pkg.applicationInfo.flags & 4) != 0) {
            shouldHaveCode = true;
        } else {
            shouldHaveCode = false;
        }
        if (shouldHaveCode && !apkHasCode(pkg.baseCodePath)) {
            throw new PackageManagerException(-2, "Package " + pkg.baseCodePath + " code is missing");
        } else if (!ArrayUtils.isEmpty(pkg.splitCodePaths)) {
            int i = 0;
            while (i < pkg.splitCodePaths.length) {
                boolean splitShouldHaveCode;
                if ((pkg.splitFlags[i] & 4) != 0) {
                    splitShouldHaveCode = true;
                } else {
                    splitShouldHaveCode = false;
                }
                if (!splitShouldHaveCode || apkHasCode(pkg.splitCodePaths[i])) {
                    i++;
                } else {
                    throw new PackageManagerException(-2, "Package " + pkg.splitCodePaths[i] + " code is missing");
                }
            }
        }
    }

    private Package scanPackageDirtyLI(Package pkg, int policyFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        File file = new File(pkg.codePath);
        if (pkg.applicationInfo.getCodePath() == null || pkg.applicationInfo.getResourcePath() == null) {
            throw new PackageManagerException(-2, "Code and resource paths haven't been set correctly");
        }
        ApplicationInfo applicationInfo;
        Service s;
        Provider p;
        Activity a;
        Package oldPkg;
        int i;
        PackageSettingBase pkgSetting;
        int N;
        String[] names;
        int j;
        Provider other;
        String str;
        if ((policyFlags & 1) != 0) {
            applicationInfo = pkg.applicationInfo;
            applicationInfo.flags |= 1;
            if (pkg.applicationInfo.isDirectBootAware()) {
                ActivityInfo activityInfo;
                for (Service s2 : pkg.services) {
                    ServiceInfo serviceInfo = s2.info;
                    s2.info.directBootAware = true;
                    serviceInfo.encryptionAware = true;
                }
                for (Provider p2 : pkg.providers) {
                    ProviderInfo providerInfo = p2.info;
                    p2.info.directBootAware = true;
                    providerInfo.encryptionAware = true;
                }
                for (Activity a2 : pkg.activities) {
                    activityInfo = a2.info;
                    a2.info.directBootAware = true;
                    activityInfo.encryptionAware = true;
                }
                for (Activity r : pkg.receivers) {
                    activityInfo = r.info;
                    r.info.directBootAware = true;
                    activityInfo.encryptionAware = true;
                }
            }
        } else {
            pkg.coreApp = false;
            applicationInfo = pkg.applicationInfo;
            applicationInfo.privateFlags &= -33;
            applicationInfo = pkg.applicationInfo;
            applicationInfo.privateFlags &= -65;
        }
        pkg.mTrustedOverlay = (policyFlags & 512) != 0;
        if ((policyFlags & 128) != 0) {
            applicationInfo = pkg.applicationInfo;
            applicationInfo.privateFlags |= 8;
        }
        if ((policyFlags & 8192) != 0) {
            applicationInfo = pkg.applicationInfo;
            applicationInfo.flagsEx |= 1;
        }
        if ((policyFlags & 1024) != 0) {
            enforceCodePolicy(pkg);
        }
        if (this.mCustomResolverComponentName != null && this.mCustomResolverComponentName.getPackageName().equals(pkg.packageName)) {
            setUpCustomResolverActivity(pkg);
        }
        if (pkg.packageName.equals(PLATFORM_PACKAGE_NAME)) {
            synchronized (this.mPackages) {
                if (this.mAndroidApplication != null) {
                    Slog.w(TAG, "*************************************************");
                    Slog.w(TAG, "Core android package being redefined.  Skipping.");
                    Slog.w(TAG, " file=" + file);
                    Slog.w(TAG, "*************************************************");
                    throw new PackageManagerException(-5, "Core android package being redefined.  Skipping.");
                }
                if ((32768 & scanFlags) == 0) {
                    this.mPlatformPackage = pkg;
                    pkg.mVersionCode = this.mSdkVersion;
                    this.mAndroidApplication = pkg.applicationInfo;
                    if (!this.mResolverReplaced) {
                        this.mResolveActivity.applicationInfo = this.mAndroidApplication;
                        this.mResolveActivity.name = ResolverActivity.class.getName();
                        this.mResolveActivity.packageName = this.mAndroidApplication.packageName;
                        this.mResolveActivity.processName = "system:ui";
                        this.mResolveActivity.launchMode = 0;
                        this.mResolveActivity.documentLaunchMode = 3;
                        this.mResolveActivity.flags = 32;
                        this.mResolveActivity.theme = 16974374;
                        this.mResolveActivity.exported = true;
                        this.mResolveActivity.enabled = true;
                        this.mResolveActivity.resizeMode = 2;
                        this.mResolveActivity.configChanges = 3504;
                        this.mResolveInfo.activityInfo = this.mResolveActivity;
                        this.mResolveInfo.priority = 0;
                        this.mResolveInfo.preferredOrder = 0;
                        this.mResolveInfo.match = 0;
                        this.mResolveComponentName = new ComponentName(this.mAndroidApplication.packageName, this.mResolveActivity.name);
                    }
                }
            }
        }
        if (pkg.packageName.equals("com.mediatek")) {
            synchronized (this.mPackages) {
                if (this.mMediatekApplication != null) {
                    Slog.w(TAG, "*************************************************");
                    Slog.w(TAG, "Core mediatek package being redefined.  Skipping.");
                    Slog.w(TAG, " file=" + file);
                    Slog.w(TAG, "*************************************************");
                    throw new PackageManagerException(-5, "Core android package being redefined.  Skipping.");
                }
                this.mMediatekApplication = pkg.applicationInfo;
            }
        }
        if (DEBUG_PACKAGE_SCANNING && (policyFlags & 2) != 0) {
            Log.d(TAG, "Scanning package " + pkg.packageName);
        }
        synchronized (this.mPackages) {
            if (this.mPackages.containsKey(pkg.packageName) || this.mSharedLibraries.containsKey(pkg.packageName)) {
                throw new PackageManagerException(-5, "Application package " + pkg.packageName + " already installed.  Skipping duplicate.");
            }
            PackageSetting oldPkgSetting = this.mSettings.peekPackageLPr(pkg.packageName);
            if (oldPkgSetting == null) {
                oldPkg = null;
            } else {
                oldPkg = oldPkgSetting.pkg;
            }
            if ((scanFlags & 4096) != 0) {
                if (this.mExpectingBetter.containsKey(pkg.packageName)) {
                    logCriticalInfo(5, "Relax SCAN_REQUIRE_KNOWN requirement for package " + pkg.packageName);
                } else {
                    PackageSetting known = this.mSettings.peekPackageLPr(pkg.packageName);
                    if (known != null) {
                        if (DEBUG_PACKAGE_SCANNING) {
                            Log.d(TAG, "Examining " + pkg.codePath + " and requiring known paths " + known.codePathString + " & " + known.resourcePathString);
                        }
                        if (!(pkg.applicationInfo.getCodePath().equals(known.codePathString) && pkg.applicationInfo.getResourcePath().equals(known.resourcePathString))) {
                            throw new PackageManagerException(-23, "Application package " + pkg.packageName + " found at " + pkg.applicationInfo.getCodePath() + " but expected at " + known.codePathString + "; ignoring.");
                        }
                    }
                }
            }
        }
        File destCodeFile = new File(pkg.applicationInfo.getCodePath());
        File destResourceFile = new File(pkg.applicationInfo.getResourcePath());
        SharedUserSetting suid = null;
        if (!isSystemApp(pkg)) {
            pkg.mOriginalPackages = null;
            pkg.mRealPackage = null;
            pkg.mAdoptPermissions = null;
        }
        PackageSetting nonMutatedPs = null;
        synchronized (this.mPackages) {
            if (pkg.mSharedUserId != null) {
                suid = this.mSettings.getSharedUserLPw(pkg.mSharedUserId, 0, 0, true);
                if (suid == null) {
                    throw new PackageManagerException(-4, "Creating application package " + pkg.packageName + " for shared user failed");
                } else if (DEBUG_PACKAGE_SCANNING && (policyFlags & 2) != 0) {
                    Log.d(TAG, "Shared UserID " + pkg.mSharedUserId + " (uid=" + suid.userId + "): packages=" + suid.packages);
                }
            }
            PackageSetting origPackage = null;
            String realName = null;
            if (pkg.mOriginalPackages != null) {
                String renamed = (String) this.mSettings.mRenamedPackages.get(pkg.mRealPackage);
                if (pkg.mOriginalPackages.contains(renamed)) {
                    realName = pkg.mRealPackage;
                    if (!pkg.packageName.equals(renamed)) {
                        pkg.setPackageName(renamed);
                    }
                } else {
                    for (i = pkg.mOriginalPackages.size() - 1; i >= 0; i--) {
                        origPackage = this.mSettings.peekPackageLPr((String) pkg.mOriginalPackages.get(i));
                        if (origPackage != null) {
                            if (!verifyPackageUpdateLPr(origPackage, pkg)) {
                                origPackage = null;
                            } else if (origPackage.sharedUser != null) {
                                if (origPackage.sharedUser.name.equals(pkg.mSharedUserId)) {
                                    break;
                                }
                                Slog.w(TAG, "Unable to migrate data from " + origPackage.name + " to " + pkg.packageName + ": old uid " + origPackage.sharedUser.name + " differs from " + pkg.mSharedUserId);
                                origPackage = null;
                            } else if (DEBUG_UPGRADE) {
                                Log.v(TAG, "Renaming new package " + pkg.packageName + " to old name " + origPackage.name);
                            }
                        }
                    }
                }
            }
            if (this.mTransferedPackages.contains(pkg.packageName)) {
                Slog.w(TAG, "Package " + pkg.packageName + " was transferred to another, but its .apk remains");
            }
            if ((32768 & scanFlags) != 0) {
                PackageSetting foundPs = this.mSettings.peekPackageLPr(pkg.packageName);
                if (foundPs != null) {
                    nonMutatedPs = new PackageSetting(foundPs);
                }
            }
            pkgSetting = this.mSettings.getPackageLPw(pkg, origPackage, realName, suid, destCodeFile, destResourceFile, pkg.applicationInfo.nativeLibraryRootDir, pkg.applicationInfo.primaryCpuAbi, pkg.applicationInfo.secondaryCpuAbi, pkg.applicationInfo.flags, pkg.applicationInfo.privateFlags, pkg.applicationInfo.flagsEx, user, false);
            if (pkgSetting == null) {
                throw new PackageManagerException(-4, "Creating application package " + pkg.packageName + " failed");
            }
            if (pkgSetting.origPackage != null) {
                pkg.setPackageName(origPackage.name);
                reportSettingsProblem(5, "New package " + pkgSetting.realName + " renamed to replace old package " + pkgSetting.name);
                if ((32768 & scanFlags) == 0) {
                    this.mTransferedPackages.add(origPackage.name);
                }
                pkgSetting.origPackage = null;
            }
            if ((32768 & scanFlags) == 0 && realName != null) {
                this.mTransferedPackages.add(pkg.packageName);
            }
            if (this.mSettings.isDisabledSystemPackageLPr(pkg.packageName)) {
                PackageSetting oldPs = this.mSettings.getDisabledSystemPkgLPr(pkg.packageName);
                if (!(oldPs == null || isVendorApp(oldPs))) {
                    applicationInfo = pkg.applicationInfo;
                    applicationInfo.flags |= 128;
                }
            }
            if ((policyFlags & 64) == 0) {
                updateSharedLibrariesLPw(pkg, null);
            }
            if (this.mFoundPolicyFile) {
                SELinuxMMAC.assignSeinfoValue(pkg);
                boolean isSafeSpaceApp = pkg.applicationInfo.seinfo != null ? "safespace".equals(pkg.applicationInfo.seinfo) : false;
                if (isSafeSpaceApp) {
                    boolean isSecurePayApp = ColorSecurePayManager.getInstance().isSecurePayApp(pkg.packageName);
                    boolean isSandboxClose = SystemProperties.getInt("persist.sys.coloros.sandbox", -1) == 0;
                    if (DEBUG_INSTALL) {
                        Slog.d(TAG, "pkgName = " + pkg.packageName + "isSafeSpaceApp = " + isSafeSpaceApp + " isSecurePayApp = " + isSecurePayApp + "isSandboxClose =" + isSandboxClose);
                    }
                    if (!(isSecurePayApp || this.mSystemReady) || isSandboxClose) {
                        pkg.applicationInfo.seinfo = "default";
                    }
                }
            }
            pkg.applicationInfo.uid = pkgSetting.appId;
            pkg.mExtras = pkgSetting;
            if (!shouldCheckUpgradeKeySetLP(pkgSetting, scanFlags)) {
                try {
                    verifySignaturesLP(pkgSetting, pkg);
                    pkgSetting.signatures.mSignatures = pkg.mSignatures;
                } catch (PackageManagerException e) {
                    if ((policyFlags & 64) == 0 && (policyFlags & 8192) == 0) {
                        throw e;
                    }
                    pkgSetting.signatures.mSignatures = pkg.mSignatures;
                    if (pkgSetting.sharedUser == null || compareSignatures(pkgSetting.sharedUser.signatures.mSignatures, pkg.mSignatures) == 0) {
                        reportSettingsProblem(5, "System package " + pkg.packageName + " signature changed; retaining data.");
                    } else {
                        throw new PackageManagerException(-104, "Signature mismatch for shared user: " + pkgSetting.sharedUser);
                    }
                }
            } else if (checkUpgradeKeySetLP(pkgSetting, pkg)) {
                pkgSetting.signatures.mSignatures = pkg.mSignatures;
            } else if ((policyFlags & 64) == 0) {
                throw new PackageManagerException(-7, "Package " + pkg.packageName + " upgrade keys do not match the " + "previously installed version");
            } else {
                pkgSetting.signatures.mSignatures = pkg.mSignatures;
                reportSettingsProblem(5, "System package " + pkg.packageName + " signature changed; retaining data.");
            }
            if ((scanFlags & 16) != 0) {
                N = pkg.providers.size();
                for (i = 0; i < N; i++) {
                    p2 = (Provider) pkg.providers.get(i);
                    if (p2.info.authority != null) {
                        names = p2.info.authority.split(";");
                        j = 0;
                        while (j < names.length) {
                            if (this.mProvidersByAuthority.containsKey(names[j])) {
                                other = (Provider) this.mProvidersByAuthority.get(names[j]);
                                String otherPackageName = (other == null || other.getComponentName() == null) ? "?" : other.getComponentName().getPackageName();
                                throw new PackageManagerException(-13, "Can't install because provider name " + names[j] + " (in package " + pkg.applicationInfo.packageName + ") is already used by " + otherPackageName);
                            } else if (EXP_VERSION && "com.qti.atfwd.gf_stub_P00".equalsIgnoreCase(names[j])) {
                                throw new PackageManagerException(-2, "Can't install because this is very risky");
                            } else {
                                j++;
                            }
                        }
                        continue;
                    }
                }
            }
            if ((32768 & scanFlags) == 0 && pkg.mAdoptPermissions != null) {
                for (i = pkg.mAdoptPermissions.size() - 1; i >= 0; i--) {
                    String origName = (String) pkg.mAdoptPermissions.get(i);
                    PackageSetting orig = this.mSettings.peekPackageLPr(origName);
                    if (orig != null && verifyPackageUpdateLPr(orig, pkg)) {
                        Slog.i(TAG, "Adopting permissions from " + origName + " to " + pkg.packageName);
                        this.mSettings.transferPermissionsLPw(origName, pkg.packageName);
                    }
                }
            }
        }
        String pkgName = pkg.packageName;
        long scanFileTime = getLastModifiedTime(pkg, file);
        if ((scanFlags & 4) != 0) {
        }
        pkg.applicationInfo.processName = fixProcessName(pkg.applicationInfo.packageName, pkg.applicationInfo.processName, pkg.applicationInfo.uid);
        if (pkg != this.mPlatformPackage) {
            pkg.applicationInfo.initForUser(0);
        }
        String path = file.getPath();
        String cpuAbiOverride = deriveAbiOverride(pkg.cpuAbiOverride, pkgSetting);
        if ((scanFlags & 16) == 0) {
            derivePackageAbi(pkg, file, cpuAbiOverride, true);
            if (isSystemApp(pkg) && !pkg.isUpdatedSystemApp() && pkg.applicationInfo.primaryCpuAbi == null) {
                setBundledAppAbisAndRoots(pkg, pkgSetting);
                setNativeLibraryPaths(pkg);
            }
        } else {
            if ((scanFlags & 8192) != 0) {
                pkg.applicationInfo.primaryCpuAbi = pkgSetting.primaryCpuAbiString;
                pkg.applicationInfo.secondaryCpuAbi = pkgSetting.secondaryCpuAbiString;
            }
            setNativeLibraryPaths(pkg);
        }
        if (this.mPlatformPackage == pkg) {
            ApplicationInfo applicationInfo2 = pkg.applicationInfo;
            if (VMRuntime.getRuntime().is64Bit()) {
                str = Build.SUPPORTED_64_BIT_ABIS[0];
            } else {
                str = Build.SUPPORTED_32_BIT_ABIS[0];
            }
            applicationInfo2.primaryCpuAbi = str;
        }
        if ((scanFlags & 2) == 0 && (scanFlags & 16) != 0 && cpuAbiOverride == null && pkgSetting.cpuAbiOverrideString != null) {
            Slog.w(TAG, "Ignoring persisted ABI override " + cpuAbiOverride + " for package " + pkg.packageName);
        }
        pkgSetting.primaryCpuAbiString = pkg.applicationInfo.primaryCpuAbi;
        pkgSetting.secondaryCpuAbiString = pkg.applicationInfo.secondaryCpuAbi;
        pkgSetting.cpuAbiOverrideString = cpuAbiOverride;
        pkg.cpuAbiOverride = cpuAbiOverride;
        if (DEBUG_ABI_SELECTION) {
            Slog.d(TAG, "Resolved nativeLibraryRoot for " + pkg.applicationInfo.packageName + " to root=" + pkg.applicationInfo.nativeLibraryRootDir + ", isa=" + pkg.applicationInfo.nativeLibraryRootRequiresIsa);
        }
        pkgSetting.legacyNativeLibraryPathString = pkg.applicationInfo.nativeLibraryRootDir;
        if (DEBUG_ABI_SELECTION) {
            Slog.d(TAG, "Abis for package[" + pkg.packageName + "] are" + " primary=" + pkg.applicationInfo.primaryCpuAbi + " secondary=" + pkg.applicationInfo.secondaryCpuAbi);
        }
        if ((scanFlags & 256) == 0 && pkgSetting.sharedUser != null) {
            adjustCpuAbisForSharedUserLPw(pkgSetting.sharedUser.packages, pkg, true);
        }
        if (this.mFactoryTest && pkg.requestedPermissions.contains("android.permission.FACTORY_TEST")) {
            applicationInfo = pkg.applicationInfo;
            applicationInfo.flags |= 16;
        }
        if (isSystemApp(pkg)) {
            pkgSetting.isOrphaned = true;
        }
        ArrayList clientLibPkgs = null;
        if ((32768 & scanFlags) != 0) {
            if (nonMutatedPs != null) {
                synchronized (this.mPackages) {
                    this.mSettings.mPackages.put(nonMutatedPs.name, nonMutatedPs);
                }
            }
            return pkg;
        }
        if (!(pkg.childPackages == null || pkg.childPackages.isEmpty())) {
            if ((policyFlags & 128) == 0) {
                throw new PackageManagerException("Only privileged apps and updated privileged apps can add child packages. Ignoring package " + pkg.packageName);
            }
            int childCount = pkg.childPackages.size();
            for (i = 0; i < childCount; i++) {
                if (this.mSettings.hasOtherDisabledSystemPkgWithChildLPr(pkg.packageName, ((Package) pkg.childPackages.get(i)).packageName)) {
                    throw new PackageManagerException("Cannot override a child package of another disabled system app. Ignoring package " + pkg.packageName);
                }
            }
        }
        synchronized (this.mPackages) {
            if (!((pkg.applicationInfo.flags & 1) == 0 || pkg.libraryNames == null)) {
                for (i = 0; i < pkg.libraryNames.size(); i++) {
                    String name = (String) pkg.libraryNames.get(i);
                    boolean allowed = false;
                    if (pkg.isUpdatedSystemApp()) {
                        PackageSetting sysPs = this.mSettings.getDisabledSystemPkgLPr(pkg.packageName);
                        if (sysPs.pkg != null && sysPs.pkg.libraryNames != null) {
                            for (j = 0; j < sysPs.pkg.libraryNames.size(); j++) {
                                if (name.equals(sysPs.pkg.libraryNames.get(j))) {
                                    allowed = true;
                                    break;
                                }
                            }
                        }
                    } else {
                        allowed = true;
                    }
                    if (!allowed) {
                        Slog.w(TAG, "Package " + pkg.packageName + " declares lib " + name + " that is not declared on system image; skipping");
                    } else if (this.mSharedLibraries.containsKey(name)) {
                        if (!name.equals(pkg.packageName)) {
                            Slog.w(TAG, "Package " + pkg.packageName + " library " + name + " already exists; skipping");
                        }
                    } else {
                        this.mSharedLibraries.put(name, new SharedLibraryEntry(null, pkg.packageName));
                    }
                }
                if ((scanFlags & 256) == 0) {
                    clientLibPkgs = updateAllSharedLibrariesLPw(pkg);
                }
            }
        }
        if ((scanFlags & 256) == 0 && (131072 & scanFlags) == 0 && (262144 & scanFlags) == 0) {
            checkPackageFrozen(pkgName);
        }
        if (clientLibPkgs != null) {
            for (i = 0; i < clientLibPkgs.size(); i++) {
                Package clientPkg = (Package) clientLibPkgs.get(i);
                killApplication(clientPkg.applicationInfo.packageName, clientPkg.applicationInfo.uid, "update lib");
            }
        }
        KeySetManagerService ksms = this.mSettings.mKeySetManagerService;
        ksms.assertScannedPackageValid(pkg);
        Trace.traceBegin(1048576, "updateSettings");
        boolean createIdmapFailed = false;
        synchronized (this.mPackages) {
            StringBuilder stringBuilder;
            if (pkgSetting.pkg != null) {
                Package packageR = pkgSetting.pkg;
                if (user == null) {
                    user = UserHandle.ALL;
                }
                maybeRenameForeignDexMarkers(packageR, pkg, user);
            }
            this.mSettings.insertPackageSettingLPw(pkgSetting, pkg);
            this.mPackages.put(pkg.applicationInfo.packageName, pkg);
            Iterator<PackageCleanItem> iter = this.mSettings.mPackagesToBeCleaned.iterator();
            while (iter.hasNext()) {
                if (pkgName.equals(((PackageCleanItem) iter.next()).packageName)) {
                    iter.remove();
                }
            }
            if (currentTime != 0) {
                if (pkgSetting.firstInstallTime == 0) {
                    pkgSetting.lastUpdateTime = currentTime;
                    pkgSetting.firstInstallTime = currentTime;
                } else if ((scanFlags & 64) != 0) {
                    pkgSetting.lastUpdateTime = currentTime;
                }
            } else if (pkgSetting.firstInstallTime == 0) {
                pkgSetting.lastUpdateTime = scanFileTime;
                pkgSetting.firstInstallTime = scanFileTime;
            } else if (!((policyFlags & 64) == 0 || scanFileTime == pkgSetting.timeStamp)) {
                pkgSetting.lastUpdateTime = scanFileTime;
            }
            ksms.addScannedPackageLPw(pkg);
            N = pkg.providers.size();
            StringBuilder r2 = null;
            for (i = 0; i < N; i++) {
                p2 = (Provider) pkg.providers.get(i);
                p2.info.processName = fixProcessName(pkg.applicationInfo.processName, p2.info.processName, pkg.applicationInfo.uid);
                this.mProviders.addProvider(p2);
                p2.syncable = p2.info.isSyncable;
                if (p2.info.authority != null) {
                    Provider p3;
                    names = p2.info.authority.split(";");
                    p2.info.authority = null;
                    j = 0;
                    while (true) {
                        p3 = p2;
                        if (j >= names.length) {
                            break;
                        }
                        if (j != 1) {
                            p2 = p3;
                        } else if (p3.syncable) {
                            p2 = new Provider(p3);
                            p2.syncable = false;
                        } else {
                            p2 = p3;
                        }
                        if (this.mProvidersByAuthority.containsKey(names[j])) {
                            other = (Provider) this.mProvidersByAuthority.get(names[j]);
                            String str2 = TAG;
                            StringBuilder append = new StringBuilder().append("Skipping provider name ").append(names[j]).append(" (in package ").append(pkg.applicationInfo.packageName).append("): name already used by ");
                            str = (other == null || other.getComponentName() == null) ? "?" : other.getComponentName().getPackageName();
                            Slog.w(str2, append.append(str).toString());
                        } else {
                            this.mProvidersByAuthority.put(names[j], p2);
                            if (p2.info.authority == null) {
                                p2.info.authority = names[j];
                            } else {
                                p2.info.authority += ";" + names[j];
                            }
                            if (DEBUG_PACKAGE_SCANNING && (policyFlags & 2) != 0) {
                                Log.d(TAG, "Registered content provider: " + names[j] + ", className = " + p2.info.name + ", isSyncable = " + p2.info.isSyncable);
                            }
                        }
                        j++;
                    }
                    p2 = p3;
                }
                if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append(p2.info.name);
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Providers: " + r2);
            }
            N = pkg.services.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                s2 = (Service) pkg.services.get(i);
                s2.info.processName = fixProcessName(pkg.applicationInfo.processName, s2.info.processName, pkg.applicationInfo.uid);
                this.mServices.addService(s2);
                if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append(s2.info.name);
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Services: " + r2);
            }
            N = pkg.receivers.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                a2 = (Activity) pkg.receivers.get(i);
                a2.info.processName = fixProcessName(pkg.applicationInfo.processName, a2.info.processName, pkg.applicationInfo.uid);
                this.mReceivers.addActivity(a2, "receiver");
                if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append(a2.info.name);
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Receivers: " + r2);
            }
            N = pkg.activities.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                a2 = (Activity) pkg.activities.get(i);
                a2.info.processName = fixProcessName(pkg.applicationInfo.processName, a2.info.processName, pkg.applicationInfo.uid);
                this.mActivities.addActivity(a2, "activity");
                if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append(a2.info.name);
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Activities: " + r2);
            }
            N = pkg.permissionGroups.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                PermissionGroup pg = (PermissionGroup) pkg.permissionGroups.get(i);
                PermissionGroup cur = (PermissionGroup) this.mPermissionGroups.get(pg.info.name);
                boolean isPackageUpdate = pg.info.packageName.equals(cur == null ? null : cur.info.packageName);
                if (cur == null || isPackageUpdate) {
                    this.mPermissionGroups.put(pg.info.name, pg);
                    if ((policyFlags & 2) != 0) {
                        if (r2 == null) {
                            stringBuilder = new StringBuilder(256);
                        } else {
                            r2.append(' ');
                        }
                        if (isPackageUpdate) {
                            r2.append("UPD:");
                        }
                        r2.append(pg.info.name);
                    }
                } else {
                    Slog.w(TAG, "Permission group " + pg.info.name + " from package " + pg.info.packageName + " ignored: original from " + cur.info.packageName);
                    if ((policyFlags & 2) != 0) {
                        if (r2 == null) {
                            stringBuilder = new StringBuilder(256);
                        } else {
                            r2.append(' ');
                        }
                        r2.append("DUP:");
                        r2.append(pg.info.name);
                    }
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Permission Groups: " + r2);
            }
            N = pkg.permissions.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                ArrayMap<String, BasePermission> permissionMap;
                Permission p4 = (Permission) pkg.permissions.get(i);
                PermissionInfo permissionInfo = p4.info;
                permissionInfo.flags &= -1073741825;
                if (pkg.applicationInfo.targetSdkVersion > 22) {
                    p4.group = (PermissionGroup) this.mPermissionGroups.get(p4.info.group);
                    if (p4.info.group != null && p4.group == null && (DEBUG_PMS || DEBUG_PACKAGE_SCANNING)) {
                        Slog.w(TAG, "Permission " + p4.info.name + " from package " + p4.info.packageName + " in an unknown group " + p4.info.group);
                    }
                }
                if (p4.tree) {
                    permissionMap = this.mSettings.mPermissionTrees;
                } else {
                    permissionMap = this.mSettings.mPermissions;
                }
                BasePermission bp = (BasePermission) permissionMap.get(p4.info.name);
                if (!(bp == null || Objects.equals(bp.sourcePackage, p4.info.packageName))) {
                    boolean currentOwnerIsSystem;
                    if (bp.perm != null) {
                        currentOwnerIsSystem = isSystemApp(bp.perm.owner);
                    } else {
                        currentOwnerIsSystem = false;
                    }
                    if (isSystemApp(p4.owner)) {
                        if (bp.type == 1 && bp.perm == null) {
                            bp.packageSetting = pkgSetting;
                            bp.perm = p4;
                            bp.uid = pkg.applicationInfo.uid;
                            bp.sourcePackage = p4.info.packageName;
                            permissionInfo = p4.info;
                            permissionInfo.flags |= 1073741824;
                        } else if (!currentOwnerIsSystem) {
                            reportSettingsProblem(5, "New decl " + p4.owner + " of permission  " + p4.info.name + " is system; overriding " + bp.sourcePackage);
                            bp = null;
                        }
                    }
                }
                if (bp == null) {
                    BasePermission basePermission = new BasePermission(p4.info.name, p4.info.packageName, 0);
                    permissionMap.put(p4.info.name, basePermission);
                }
                if (bp.perm == null) {
                    if (bp.sourcePackage == null || bp.sourcePackage.equals(p4.info.packageName)) {
                        BasePermission tree = findPermissionTreeLP(p4.info.name);
                        if (tree == null || tree.sourcePackage.equals(p4.info.packageName)) {
                            bp.packageSetting = pkgSetting;
                            bp.perm = p4;
                            bp.uid = pkg.applicationInfo.uid;
                            bp.sourcePackage = p4.info.packageName;
                            permissionInfo = p4.info;
                            permissionInfo.flags |= 1073741824;
                            if ((policyFlags & 2) != 0) {
                                if (r2 == null) {
                                    stringBuilder = new StringBuilder(256);
                                } else {
                                    r2.append(' ');
                                }
                                r2.append(p4.info.name);
                            }
                        } else {
                            Slog.w(TAG, "Permission " + p4.info.name + " from package " + p4.info.packageName + " ignored: base tree " + tree.name + " is from package " + tree.sourcePackage);
                        }
                    } else {
                        Slog.w(TAG, "Permission " + p4.info.name + " from package " + p4.info.packageName + " ignored: original from " + bp.sourcePackage);
                    }
                } else if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append("DUP:");
                    r2.append(p4.info.name);
                }
                if (bp.perm == p4) {
                    bp.protectionLevel = p4.info.protectionLevel;
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Permissions: " + r2);
            }
            N = pkg.instrumentation.size();
            r2 = null;
            for (i = 0; i < N; i++) {
                Instrumentation a3 = (Instrumentation) pkg.instrumentation.get(i);
                a3.info.packageName = pkg.applicationInfo.packageName;
                a3.info.sourceDir = pkg.applicationInfo.sourceDir;
                a3.info.publicSourceDir = pkg.applicationInfo.publicSourceDir;
                a3.info.splitSourceDirs = pkg.applicationInfo.splitSourceDirs;
                a3.info.splitPublicSourceDirs = pkg.applicationInfo.splitPublicSourceDirs;
                a3.info.dataDir = pkg.applicationInfo.dataDir;
                a3.info.deviceProtectedDataDir = pkg.applicationInfo.deviceProtectedDataDir;
                a3.info.credentialProtectedDataDir = pkg.applicationInfo.credentialProtectedDataDir;
                a3.info.nativeLibraryDir = pkg.applicationInfo.nativeLibraryDir;
                a3.info.secondaryNativeLibraryDir = pkg.applicationInfo.secondaryNativeLibraryDir;
                this.mInstrumentation.put(a3.getComponentName(), a3);
                if ((policyFlags & 2) != 0) {
                    if (r2 == null) {
                        stringBuilder = new StringBuilder(256);
                    } else {
                        r2.append(' ');
                    }
                    r2.append(a3.info.name);
                }
            }
            if (r2 != null && DEBUG_PACKAGE_SCANNING) {
                Log.d(TAG, "  Instrumentation: " + r2);
            }
            if (pkg.protectedBroadcasts != null) {
                N = pkg.protectedBroadcasts.size();
                for (i = 0; i < N; i++) {
                    this.mProtectedBroadcasts.add((String) pkg.protectedBroadcasts.get(i));
                }
            }
            pkgSetting.setTimeStamp(scanFileTime);
            if (pkg.mOverlayTarget != null) {
                if (!(pkg.mOverlayTarget == null || pkg.mOverlayTarget.equals(PLATFORM_PACKAGE_NAME))) {
                    if (!pkg.mOverlayTarget.equals("com.mediatek")) {
                        if (!this.mOverlays.containsKey(pkg.mOverlayTarget)) {
                            this.mOverlays.put(pkg.mOverlayTarget, new ArrayMap());
                        }
                        ((ArrayMap) this.mOverlays.get(pkg.mOverlayTarget)).put(pkg.packageName, pkg);
                        Package orig2 = (Package) this.mPackages.get(pkg.mOverlayTarget);
                        if (!(orig2 == null || createIdmapForPackagePairLI(orig2, pkg))) {
                            createIdmapFailed = true;
                        }
                    }
                }
            } else if (!(!this.mOverlays.containsKey(pkg.packageName) || pkg.packageName.equals(PLATFORM_PACKAGE_NAME) || pkg.packageName.equals("com.mediatek"))) {
                createIdmapsForPackageLI(pkg);
            }
            if (oldPkg != null) {
                final Package packageR2 = pkg;
                final Package packageR3 = oldPkg;
                final ArrayList<String> arrayList = new ArrayList(this.mPackages.keySet());
                AsyncTask.execute(new Runnable() {
                    public void run() {
                        PackageManagerService.this.revokeRuntimePermissionsIfGroupChanged(packageR2, packageR3, arrayList);
                    }
                });
            }
        }
        Trace.traceEnd(1048576);
        if (!createIdmapFailed) {
            return pkg;
        }
        throw new PackageManagerException(-7, "scanPackageLI failed to createIdmap");
    }

    private void maybeRenameForeignDexMarkers(Package existing, Package update, UserHandle user) {
        if (existing.applicationInfo != null && update.applicationInfo != null) {
            File oldCodePath = new File(existing.applicationInfo.getCodePath());
            File newCodePath = new File(update.applicationInfo.getCodePath());
            if (!Objects.equals(oldCodePath, newCodePath)) {
                try {
                    File canonicalNewCodePath = new File(PackageManagerServiceUtils.realpath(newCodePath));
                    String oldMarkerPrefix = new File(canonicalNewCodePath.getParentFile(), oldCodePath.getName()).getAbsolutePath().replace('/', '@');
                    if (!oldMarkerPrefix.endsWith("@")) {
                        oldMarkerPrefix = oldMarkerPrefix + "@";
                    }
                    String newMarkerPrefix = canonicalNewCodePath.getAbsolutePath().replace('/', '@');
                    if (!newMarkerPrefix.endsWith("@")) {
                        newMarkerPrefix = newMarkerPrefix + "@";
                    }
                    List<String> updatedPaths = update.getAllCodePathsExcludingResourceOnly();
                    List<String> markerSuffixes = new ArrayList(updatedPaths.size());
                    for (String updatedPath : updatedPaths) {
                        markerSuffixes.add(new File(updatedPath).getName().replace('/', '@'));
                    }
                    for (int userId : resolveUserIds(user.getIdentifier())) {
                        File profileDir = Environment.getDataProfilesDeForeignDexDirectory(userId);
                        for (String markerSuffix : markerSuffixes) {
                            File oldForeignUseMark = new File(profileDir, oldMarkerPrefix + markerSuffix);
                            File newForeignUseMark = new File(profileDir, newMarkerPrefix + markerSuffix);
                            if (oldForeignUseMark.exists()) {
                                try {
                                    Os.rename(oldForeignUseMark.getAbsolutePath(), newForeignUseMark.getAbsolutePath());
                                } catch (ErrnoException e) {
                                    Slog.w(TAG, "Failed to rename foreign use marker", e);
                                    oldForeignUseMark.delete();
                                }
                            }
                        }
                    }
                } catch (IOException e2) {
                    Slog.w(TAG, "Failed to get canonical path.", e2);
                }
            }
        }
    }

    private void derivePackageAbi(Package pkg, File scanFile, String cpuAbiOverride, boolean extractLibs) throws PackageManagerException {
        setNativeLibraryPaths(pkg);
        if (pkg.isForwardLocked() || pkg.applicationInfo.isExternalAsec() || (isSystemApp(pkg) && !pkg.isUpdatedSystemApp())) {
            extractLibs = false;
        }
        String nativeLibraryRootStr = pkg.applicationInfo.nativeLibraryRootDir;
        boolean useIsaSpecificSubdirs = pkg.applicationInfo.nativeLibraryRootRequiresIsa;
        AutoCloseable handle = null;
        try {
            handle = Handle.create(pkg);
            File nativeLibraryRoot = new File(nativeLibraryRootStr);
            pkg.applicationInfo.primaryCpuAbi = null;
            pkg.applicationInfo.secondaryCpuAbi = null;
            if (isMultiArch(pkg.applicationInfo)) {
                if (!(pkg.cpuAbiOverride == null || INSTALL_PACKAGE_SUFFIX.equals(pkg.cpuAbiOverride))) {
                    Slog.w(TAG, "Ignoring abiOverride for multi arch application.");
                }
                int abi32 = -114;
                int abi64 = -114;
                if (Build.SUPPORTED_32_BIT_ABIS.length > 0) {
                    if (extractLibs) {
                        abi32 = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, Build.SUPPORTED_32_BIT_ABIS, useIsaSpecificSubdirs);
                    } else {
                        abi32 = NativeLibraryHelper.findSupportedAbi(handle, Build.SUPPORTED_32_BIT_ABIS);
                    }
                }
                maybeThrowExceptionForMultiArchCopy("Error unpackaging 32 bit native libs for multiarch app.", abi32);
                if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
                    if (extractLibs) {
                        abi64 = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, Build.SUPPORTED_64_BIT_ABIS, useIsaSpecificSubdirs);
                    } else {
                        abi64 = NativeLibraryHelper.findSupportedAbi(handle, Build.SUPPORTED_64_BIT_ABIS);
                    }
                }
                maybeThrowExceptionForMultiArchCopy("Error unpackaging 64 bit native libs for multiarch app.", abi64);
                if (abi64 >= 0) {
                    pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[abi64];
                }
                if (abi32 >= 0) {
                    String abi = Build.SUPPORTED_32_BIT_ABIS[abi32];
                    if (abi64 < 0) {
                        pkg.applicationInfo.primaryCpuAbi = abi;
                    } else if (pkg.use32bitAbi) {
                        pkg.applicationInfo.secondaryCpuAbi = pkg.applicationInfo.primaryCpuAbi;
                        pkg.applicationInfo.primaryCpuAbi = abi;
                    } else {
                        pkg.applicationInfo.secondaryCpuAbi = abi;
                    }
                }
            } else {
                String[] abiList;
                int copyRet;
                if (cpuAbiOverride != null) {
                    abiList = new String[1];
                    abiList[0] = cpuAbiOverride;
                } else {
                    abiList = Build.SUPPORTED_ABIS;
                }
                boolean needsRenderScriptOverride = false;
                if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && cpuAbiOverride == null && NativeLibraryHelper.hasRenderscriptBitcode(handle)) {
                    abiList = Build.SUPPORTED_32_BIT_ABIS;
                    needsRenderScriptOverride = true;
                }
                if (extractLibs) {
                    copyRet = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, abiList, useIsaSpecificSubdirs);
                } else {
                    copyRet = NativeLibraryHelper.findSupportedAbi(handle, abiList);
                }
                if (copyRet < 0 && copyRet != -114) {
                    throw new PackageManagerException(-110, "Error unpackaging native libs for app, errorCode=" + copyRet);
                } else if (copyRet >= 0) {
                    pkg.applicationInfo.primaryCpuAbi = abiList[copyRet];
                } else if (copyRet == -114 && cpuAbiOverride != null) {
                    pkg.applicationInfo.primaryCpuAbi = cpuAbiOverride;
                } else if (needsRenderScriptOverride) {
                    pkg.applicationInfo.primaryCpuAbi = abiList[0];
                }
            }
            IoUtils.closeQuietly(handle);
        } catch (IOException ioe) {
            Slog.e(TAG, "Unable to get canonical file " + ioe.toString());
            IoUtils.closeQuietly(handle);
        } catch (Throwable th) {
            IoUtils.closeQuietly(handle);
            throw th;
        }
        setNativeLibraryPaths(pkg);
    }

    private void adjustCpuAbisForSharedUserLPw(Set<PackageSetting> packagesForUser, Package scannedPackage, boolean bootComplete) {
        String requiredInstructionSet = null;
        if (!(scannedPackage == null || scannedPackage.applicationInfo.primaryCpuAbi == null)) {
            requiredInstructionSet = VMRuntime.getInstructionSet(scannedPackage.applicationInfo.primaryCpuAbi);
        }
        int mismatchTime = 0;
        int[] mismatchArray = new int[]{0, 0, 0};
        PackageSetting requirer = null;
        for (PackageSetting ps : packagesForUser) {
            if ((scannedPackage == null || !scannedPackage.packageName.equals(ps.name)) && ps.primaryCpuAbiString != null) {
                String instructionSet = VMRuntime.getInstructionSet(ps.primaryCpuAbiString);
                int convertAbi2Int = this.mCompatibilityHelper.convertAbi2Int(ps.primaryCpuAbiString);
                mismatchArray[convertAbi2Int] = mismatchArray[convertAbi2Int] + 1;
                if (!(requiredInstructionSet == null || instructionSet.equals(requiredInstructionSet))) {
                    Object obj;
                    StringBuilder append = new StringBuilder().append("Instruction set mismatch, ");
                    if (requirer == null) {
                        obj = "[caller]";
                    } else {
                        PackageSetting obj2 = requirer;
                    }
                    Slog.w(TAG, append.append(obj2).append(" requires ").append(requiredInstructionSet).append(" whereas ").append(ps).append(" requires ").append(instructionSet).toString());
                    mismatchTime++;
                }
                if (requiredInstructionSet == null) {
                    requiredInstructionSet = instructionSet;
                    requirer = ps;
                }
            }
        }
        if (requiredInstructionSet != null) {
            String adjustedAbi;
            if (requirer != null) {
                adjustedAbi = requirer.primaryCpuAbiString;
                if (DEBUG_PMS) {
                    Slog.d(TAG, "abi64=" + mismatchArray[0] + " abiv7a=" + mismatchArray[1] + "abi=" + mismatchArray[2]);
                }
                if (mismatchTime > 1) {
                    int tmp = 0;
                    int index = -1;
                    for (int i = 0; i < mismatchArray.length; i++) {
                        if (mismatchArray[i] > tmp) {
                            tmp = mismatchArray[i];
                            index = i;
                        }
                    }
                    if (index >= 0) {
                        adjustedAbi = this.mCompatibilityHelper.convertAbi2String(index);
                    }
                }
                if (scannedPackage != null) {
                    scannedPackage.applicationInfo.primaryCpuAbi = adjustedAbi;
                }
            } else {
                adjustedAbi = scannedPackage.applicationInfo.primaryCpuAbi;
            }
            for (PackageSetting ps2 : packagesForUser) {
                if ((scannedPackage == null || !scannedPackage.packageName.equals(ps2.name)) && ps2.primaryCpuAbiString == null) {
                    ps2.primaryCpuAbiString = adjustedAbi;
                    if (!(ps2.pkg == null || ps2.pkg.applicationInfo == null || TextUtils.equals(adjustedAbi, ps2.pkg.applicationInfo.primaryCpuAbi))) {
                        ps2.pkg.applicationInfo.primaryCpuAbi = adjustedAbi;
                        if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                            String str = TAG;
                            StringBuilder append2 = new StringBuilder().append("Adjusting ABI for ").append(ps2.name).append(" to ").append(adjustedAbi).append(" (requirer=");
                            String str2 = requirer == null ? "null" : requirer.pkg == null ? "null" : requirer.pkg.packageName;
                            Slog.i(str, append2.append(str2).append(", scannedPackage=").append(scannedPackage != null ? scannedPackage.packageName : "null").append(")").toString());
                        }
                        try {
                            this.mInstaller.rmdex(ps2.codePathString, InstructionSets.getDexCodeInstructionSet(InstructionSets.getPreferredInstructionSet()));
                        } catch (InstallerException e) {
                        }
                    }
                }
            }
        }
    }

    private void setUpCustomResolverActivity(Package pkg) {
        synchronized (this.mPackages) {
            this.mResolverReplaced = true;
            this.mResolveActivity.applicationInfo = pkg.applicationInfo;
            this.mResolveActivity.name = this.mCustomResolverComponentName.getClassName();
            this.mResolveActivity.packageName = pkg.applicationInfo.packageName;
            this.mResolveActivity.processName = pkg.applicationInfo.packageName;
            this.mResolveActivity.launchMode = 0;
            this.mResolveActivity.flags = 288;
            this.mResolveActivity.theme = 0;
            this.mResolveActivity.exported = true;
            this.mResolveActivity.enabled = true;
            this.mResolveInfo.activityInfo = this.mResolveActivity;
            this.mResolveInfo.priority = 0;
            this.mResolveInfo.preferredOrder = 0;
            this.mResolveInfo.match = 0;
            this.mResolveComponentName = this.mCustomResolverComponentName;
            Slog.i(TAG, "Replacing default ResolverActivity with custom activity: " + this.mResolveComponentName);
        }
    }

    private void setUpEphemeralInstallerActivityLP(ComponentName installerComponent) {
        Package pkg = (Package) this.mPackages.get(installerComponent.getPackageName());
        this.mEphemeralInstallerActivity.applicationInfo = pkg.applicationInfo;
        this.mEphemeralInstallerActivity.name = this.mEphemeralInstallerComponent.getClassName();
        this.mEphemeralInstallerActivity.packageName = pkg.applicationInfo.packageName;
        this.mEphemeralInstallerActivity.processName = pkg.applicationInfo.packageName;
        this.mEphemeralInstallerActivity.launchMode = 0;
        this.mEphemeralInstallerActivity.flags = 288;
        this.mEphemeralInstallerActivity.theme = 0;
        this.mEphemeralInstallerActivity.exported = true;
        this.mEphemeralInstallerActivity.enabled = true;
        this.mEphemeralInstallerInfo.activityInfo = this.mEphemeralInstallerActivity;
        this.mEphemeralInstallerInfo.priority = 0;
        this.mEphemeralInstallerInfo.preferredOrder = 1;
        this.mEphemeralInstallerInfo.isDefault = true;
        this.mEphemeralInstallerInfo.match = 5799936;
        if (DEBUG_EPHEMERAL) {
            Slog.d(TAG, "Set ephemeral installer activity: " + this.mEphemeralInstallerComponent);
        }
    }

    private static String calculateBundledApkRoot(String codePathString) {
        File codeRoot;
        File codePath = new File(codePathString);
        if (FileUtils.contains(Environment.getRootDirectory(), codePath)) {
            codeRoot = Environment.getRootDirectory();
        } else if (FileUtils.contains(Environment.getOemDirectory(), codePath)) {
            codeRoot = Environment.getOemDirectory();
        } else if (FileUtils.contains(Environment.getVendorDirectory(), codePath)) {
            codeRoot = Environment.getVendorDirectory();
        } else {
            try {
                File f = codePath.getCanonicalFile();
                File parent = f.getParentFile();
                while (true) {
                    File tmp = parent.getParentFile();
                    if (tmp == null) {
                        break;
                    }
                    f = parent;
                    parent = tmp;
                }
                codeRoot = f;
                Slog.w(TAG, "Unrecognized code path " + codePath + " - using " + codeRoot);
            } catch (IOException e) {
                Slog.w(TAG, "Can't canonicalize code path " + codePath);
                return Environment.getRootDirectory().getPath();
            }
        }
        return codeRoot.getPath();
    }

    private void setNativeLibraryPaths(Package pkg) {
        ApplicationInfo info = pkg.applicationInfo;
        String codePath = pkg.codePath;
        File codeFile = new File(codePath);
        boolean bundledApp = info.isSystemApp() && !info.isUpdatedSystemApp();
        boolean asecApp = !info.isForwardLocked() ? info.isExternalAsec() : true;
        info.nativeLibraryRootDir = null;
        info.nativeLibraryRootRequiresIsa = false;
        info.nativeLibraryDir = null;
        info.secondaryNativeLibraryDir = null;
        if (PackageParser.isApkFile(codeFile)) {
            if (bundledApp) {
                String apkRoot = calculateBundledApkRoot(info.sourceDir);
                boolean is64Bit = VMRuntime.is64BitInstructionSet(InstructionSets.getPrimaryInstructionSet(info));
                String apkName = deriveCodePathName(codePath);
                String libDir = is64Bit ? "lib64" : "lib";
                File file = new File(apkRoot);
                String[] strArr = new String[2];
                strArr[0] = libDir;
                strArr[1] = apkName;
                info.nativeLibraryRootDir = Environment.buildPath(file, strArr).getAbsolutePath();
                if (info.secondaryCpuAbi != null) {
                    String secondaryLibDir = is64Bit ? "lib" : "lib64";
                    file = new File(apkRoot);
                    strArr = new String[2];
                    strArr[0] = secondaryLibDir;
                    strArr[1] = apkName;
                    info.secondaryNativeLibraryDir = Environment.buildPath(file, strArr).getAbsolutePath();
                }
            } else if (asecApp) {
                info.nativeLibraryRootDir = new File(codeFile.getParentFile(), "lib").getAbsolutePath();
            } else {
                info.nativeLibraryRootDir = new File(this.mAppLib32InstallDir, deriveCodePathName(codePath)).getAbsolutePath();
            }
            info.nativeLibraryRootRequiresIsa = false;
            info.nativeLibraryDir = info.nativeLibraryRootDir;
        } else if (isVendorApp(info)) {
            info.nativeLibraryRootDir = new File(this.mAppLib32InstallDir, deriveCodePathName(codePath)).getAbsolutePath();
            info.nativeLibraryRootRequiresIsa = false;
            info.nativeLibraryDir = info.nativeLibraryRootDir;
        } else {
            info.nativeLibraryRootDir = new File(codeFile, "lib").getAbsolutePath();
            info.nativeLibraryRootRequiresIsa = true;
            info.nativeLibraryDir = new File(info.nativeLibraryRootDir, InstructionSets.getPrimaryInstructionSet(info)).getAbsolutePath();
            if (info.secondaryCpuAbi != null) {
                info.secondaryNativeLibraryDir = new File(info.nativeLibraryRootDir, VMRuntime.getInstructionSet(info.secondaryCpuAbi)).getAbsolutePath();
            }
        }
        if (!info.isSystemApp() && info.nativeLibraryDir != null && !info.nativeLibraryDir.contains(".tmp")) {
            this.mCompatibilityHelper.customizeNativeLibrariesIfNeeded(pkg);
        }
    }

    private void setBundledAppAbisAndRoots(Package pkg, PackageSetting pkgSetting) {
        setBundledAppAbi(pkg, calculateBundledApkRoot(pkg.applicationInfo.sourceDir), deriveCodePathName(pkg.applicationInfo.getCodePath()));
        if (pkgSetting != null) {
            pkgSetting.primaryCpuAbiString = pkg.applicationInfo.primaryCpuAbi;
            pkgSetting.secondaryCpuAbiString = pkg.applicationInfo.secondaryCpuAbi;
        }
    }

    private static void setBundledAppAbi(Package pkg, String apkRoot, String apkName) {
        boolean has64BitLibs;
        boolean has32BitLibs;
        File codeFile = new File(pkg.codePath);
        if (PackageParser.isApkFile(codeFile)) {
            has64BitLibs = new File(apkRoot, new File("lib64", apkName).getPath()).exists();
            has32BitLibs = new File(apkRoot, new File("lib", apkName).getPath()).exists();
        } else {
            File rootDir = new File(codeFile, "lib");
            if (ArrayUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS) || TextUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS[0])) {
                has64BitLibs = false;
            } else {
                has64BitLibs = new File(rootDir, VMRuntime.getInstructionSet(Build.SUPPORTED_64_BIT_ABIS[0])).exists();
            }
            if (ArrayUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS) || TextUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS[0])) {
                has32BitLibs = false;
            } else {
                has32BitLibs = new File(rootDir, VMRuntime.getInstructionSet(Build.SUPPORTED_32_BIT_ABIS[0])).exists();
            }
        }
        if (has64BitLibs && !has32BitLibs) {
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = null;
        } else if (has32BitLibs && !has64BitLibs) {
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = null;
        } else if (has32BitLibs && has64BitLibs) {
            if ((pkg.applicationInfo.flags & Integer.MIN_VALUE) == 0) {
                Slog.e(TAG, "Package " + pkg + " has multiple bundled libs, but is not multiarch.");
            }
            if (VMRuntime.is64BitInstructionSet(InstructionSets.getPreferredInstructionSet())) {
                pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
                pkg.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
                return;
            }
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
        } else {
            pkg.applicationInfo.primaryCpuAbi = null;
            pkg.applicationInfo.secondaryCpuAbi = null;
        }
    }

    private void killApplication(String pkgName, int appId, String reason) {
        killApplication(pkgName, appId, -1, reason);
    }

    private void killApplication(String pkgName, int appId, int userId, String reason) {
        long token = Binder.clearCallingIdentity();
        try {
            IActivityManager am = ActivityManagerNative.getDefault();
            if (am != null) {
                try {
                    am.killApplication(pkgName, appId, userId, reason);
                } catch (RemoteException e) {
                }
            }
            Binder.restoreCallingIdentity(token);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(token);
        }
    }

    private void removePackageLI(Package pkg, boolean chatty) {
        PackageSetting ps = pkg.mExtras;
        if (ps != null) {
            removePackageLI(ps, chatty);
        }
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            ps = ((Package) pkg.childPackages.get(i)).mExtras;
            if (ps != null) {
                removePackageLI(ps, chatty);
            }
        }
    }

    void removePackageLI(PackageSetting ps, boolean chatty) {
        if (DEBUG_INSTALL && chatty) {
            Log.d(TAG, "Removing package " + ps.name);
        }
        synchronized (this.mPackages) {
            this.mPackages.remove(ps.name);
            Package pkg = ps.pkg;
            if (pkg != null) {
                cleanPackageDataStructuresLILPw(pkg, chatty);
            }
        }
    }

    void removeInstalledPackageLI(Package pkg, boolean chatty) {
        if (DEBUG_INSTALL && chatty) {
            Log.d(TAG, "Removing package " + pkg.applicationInfo.packageName);
        }
        synchronized (this.mPackages) {
            this.mPackages.remove(pkg.applicationInfo.packageName);
            cleanPackageDataStructuresLILPw(pkg, chatty);
            int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                Package childPkg = (Package) pkg.childPackages.get(i);
                this.mPackages.remove(childPkg.applicationInfo.packageName);
                cleanPackageDataStructuresLILPw(childPkg, chatty);
            }
        }
    }

    void cleanPackageDataStructuresLILPw(Package pkg, boolean chatty) {
        int i;
        Activity a;
        BasePermission bp;
        ArraySet<String> appOpPkgs;
        int N = pkg.providers.size();
        StringBuilder r = null;
        for (i = 0; i < N; i++) {
            Provider p = (Provider) pkg.providers.get(i);
            this.mProviders.removeProvider(p);
            if (p.info.authority != null) {
                String[] names = p.info.authority.split(";");
                for (int j = 0; j < names.length; j++) {
                    if (this.mProvidersByAuthority.get(names[j]) == p) {
                        this.mProvidersByAuthority.remove(names[j]);
                        if (DEBUG_REMOVE && chatty) {
                            Log.d(TAG, "Unregistered content provider: " + names[j] + ", className = " + p.info.name + ", isSyncable = " + p.info.isSyncable);
                        }
                    }
                }
                if (DEBUG_REMOVE && chatty) {
                    if (r == null) {
                        r = new StringBuilder(256);
                    } else {
                        r.append(' ');
                    }
                    r.append(p.info.name);
                }
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Providers: " + r);
        }
        N = pkg.services.size();
        r = null;
        for (i = 0; i < N; i++) {
            Service s = (Service) pkg.services.get(i);
            this.mServices.removeService(s);
            if (chatty) {
                if (r == null) {
                    r = new StringBuilder(256);
                } else {
                    r.append(' ');
                }
                r.append(s.info.name);
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Services: " + r);
        }
        N = pkg.receivers.size();
        r = null;
        for (i = 0; i < N; i++) {
            a = (Activity) pkg.receivers.get(i);
            this.mReceivers.removeActivity(a, "receiver");
            if (DEBUG_REMOVE && chatty) {
                if (r == null) {
                    r = new StringBuilder(256);
                } else {
                    r.append(' ');
                }
                r.append(a.info.name);
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Receivers: " + r);
        }
        N = pkg.activities.size();
        r = null;
        for (i = 0; i < N; i++) {
            a = (Activity) pkg.activities.get(i);
            this.mActivities.removeActivity(a, "activity");
            if (DEBUG_REMOVE && chatty) {
                if (r == null) {
                    r = new StringBuilder(256);
                } else {
                    r.append(' ');
                }
                r.append(a.info.name);
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Activities: " + r);
        }
        N = pkg.permissions.size();
        r = null;
        for (i = 0; i < N; i++) {
            Permission p2 = (Permission) pkg.permissions.get(i);
            bp = (BasePermission) this.mSettings.mPermissions.get(p2.info.name);
            if (bp == null) {
                bp = (BasePermission) this.mSettings.mPermissionTrees.get(p2.info.name);
            }
            if (bp != null && bp.perm == p2) {
                bp.perm = null;
                if (DEBUG_REMOVE && chatty) {
                    if (r == null) {
                        r = new StringBuilder(256);
                    } else {
                        r.append(' ');
                    }
                    r.append(p2.info.name);
                }
            }
            if ((p2.info.protectionLevel & 64) != 0) {
                appOpPkgs = (ArraySet) this.mAppOpPermissionPackages.get(p2.info.name);
                if (appOpPkgs != null) {
                    appOpPkgs.remove(pkg.packageName);
                }
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Permissions: " + r);
        }
        N = pkg.requestedPermissions.size();
        for (i = 0; i < N; i++) {
            String perm = (String) pkg.requestedPermissions.get(i);
            bp = (BasePermission) this.mSettings.mPermissions.get(perm);
            if (!(bp == null || (bp.protectionLevel & 64) == 0)) {
                appOpPkgs = (ArraySet) this.mAppOpPermissionPackages.get(perm);
                if (appOpPkgs != null) {
                    appOpPkgs.remove(pkg.packageName);
                    if (appOpPkgs.isEmpty()) {
                        this.mAppOpPermissionPackages.remove(perm);
                    }
                }
            }
        }
        N = pkg.instrumentation.size();
        r = null;
        for (i = 0; i < N; i++) {
            Instrumentation a2 = (Instrumentation) pkg.instrumentation.get(i);
            this.mInstrumentation.remove(a2.getComponentName());
            if (DEBUG_REMOVE && chatty) {
                if (r == null) {
                    r = new StringBuilder(256);
                } else {
                    r.append(' ');
                }
                r.append(a2.info.name);
            }
        }
        if (r != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Instrumentation: " + r);
        }
        Object obj = null;
        if (!((pkg.applicationInfo.flags & 1) == 0 || pkg.libraryNames == null)) {
            for (i = 0; i < pkg.libraryNames.size(); i++) {
                String name = (String) pkg.libraryNames.get(i);
                SharedLibraryEntry cur = (SharedLibraryEntry) this.mSharedLibraries.get(name);
                if (!(cur == null || cur.apk == null || !cur.apk.equals(pkg.packageName))) {
                    this.mSharedLibraries.remove(name);
                    if (DEBUG_REMOVE && chatty) {
                        if (obj == null) {
                            obj = new StringBuilder(256);
                        } else {
                            obj.append(' ');
                        }
                        obj.append(name);
                    }
                }
            }
        }
        if (obj != null && DEBUG_REMOVE) {
            Log.d(TAG, "  Libraries: " + obj);
        }
    }

    private static boolean hasPermission(Package pkgInfo, String perm) {
        for (int i = pkgInfo.permissions.size() - 1; i >= 0; i--) {
            if (((Permission) pkgInfo.permissions.get(i)).info.name.equals(perm)) {
                return true;
            }
        }
        return false;
    }

    private void updatePermissionsLPw(Package pkg, int flags) {
        updatePermissionsLPw(pkg.packageName, pkg, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            Package childPkg = (Package) pkg.childPackages.get(i);
            updatePermissionsLPw(childPkg.packageName, childPkg, flags);
        }
    }

    private void updatePermissionsLPw(String changingPkg, Package pkgInfo, int flags) {
        String volumeUuid = null;
        if (pkgInfo != null) {
            volumeUuid = getVolumeUuidForPackage(pkgInfo);
        }
        updatePermissionsLPw(changingPkg, pkgInfo, volumeUuid, flags);
    }

    private void updatePermissionsLPw(String changingPkg, Package pkgInfo, String replaceVolumeUuid, int flags) {
        BasePermission bp;
        String volumeUuid;
        boolean replace;
        Iterator<BasePermission> it = this.mSettings.mPermissionTrees.values().iterator();
        while (it.hasNext()) {
            bp = (BasePermission) it.next();
            if (bp.packageSetting == null) {
                bp.packageSetting = (PackageSettingBase) this.mSettings.mPackages.get(bp.sourcePackage);
            }
            if (bp.packageSetting == null) {
                Slog.w(TAG, "Removing dangling permission tree: " + bp.name + " from package " + bp.sourcePackage);
                it.remove();
            } else if (changingPkg != null && changingPkg.equals(bp.sourcePackage)) {
                if (pkgInfo == null || !hasPermission(pkgInfo, bp.name)) {
                    Slog.i(TAG, "Removing old permission tree: " + bp.name + " from package " + bp.sourcePackage);
                    flags |= 1;
                    it.remove();
                }
            }
        }
        it = this.mSettings.mPermissions.values().iterator();
        while (it.hasNext()) {
            bp = (BasePermission) it.next();
            if (bp.type == 2) {
                if (DEBUG_SETTINGS) {
                    Log.v(TAG, "Dynamic permission: name=" + bp.name + " pkg=" + bp.sourcePackage + " info=" + bp.pendingInfo);
                }
                if (bp.packageSetting == null && bp.pendingInfo != null) {
                    BasePermission tree = findPermissionTreeLP(bp.name);
                    if (!(tree == null || tree.perm == null)) {
                        bp.packageSetting = tree.packageSetting;
                        bp.perm = new Permission(tree.perm.owner, new PermissionInfo(bp.pendingInfo));
                        bp.perm.info.packageName = tree.perm.info.packageName;
                        bp.perm.info.name = bp.name;
                        bp.uid = tree.uid;
                    }
                }
            }
            if (bp.packageSetting == null) {
                bp.packageSetting = (PackageSettingBase) this.mSettings.mPackages.get(bp.sourcePackage);
            }
            if (bp.packageSetting == null) {
                Slog.w(TAG, "Removing dangling permission: " + bp.name + " from package " + bp.sourcePackage);
                it.remove();
            } else if (changingPkg != null && changingPkg.equals(bp.sourcePackage)) {
                if (pkgInfo == null || !hasPermission(pkgInfo, bp.name)) {
                    Slog.i(TAG, "Removing old permission: " + bp.name + " from package " + bp.sourcePackage);
                    flags |= 1;
                    it.remove();
                }
            }
        }
        if ((flags & 1) != 0) {
            for (Package pkg : this.mPackages.values()) {
                if (pkg != pkgInfo) {
                    volumeUuid = getVolumeUuidForPackage(pkg);
                    if ((flags & 4) != 0) {
                        replace = Objects.equals(replaceVolumeUuid, volumeUuid);
                    } else {
                        replace = false;
                    }
                    grantPermissionsLPw(pkg, replace, changingPkg);
                }
            }
        }
        if (pkgInfo != null) {
            volumeUuid = getVolumeUuidForPackage(pkgInfo);
            if ((flags & 2) != 0) {
                replace = Objects.equals(replaceVolumeUuid, volumeUuid);
            } else {
                replace = false;
            }
            grantPermissionsLPw(pkgInfo, replace, changingPkg);
        }
    }

    private void grantPermissionsLPw(Package pkg, boolean replace, String packageOfInterest) {
        PackageSetting ps = pkg.mExtras;
        if (ps != null) {
            Trace.traceBegin(1048576, "grantPermissions");
            PermissionsState permissionsState = ps.getPermissionsState();
            PermissionsState origPermissions = permissionsState;
            int[] currentUserIds = UserManagerService.getInstance().getUserIds();
            boolean runtimePermissionsRevoked = false;
            int[] changedRuntimePermissionUserIds = EMPTY_INT_ARRAY;
            boolean changedInstallPermission = false;
            if (replace) {
                ps.installPermissionsFixed = false;
                if (ps.isSharedUser()) {
                    changedRuntimePermissionUserIds = revokeUnusedSharedUserPermissionsLPw(ps.sharedUser, UserManagerService.getInstance().getUserIds());
                    if (!ArrayUtils.isEmpty(changedRuntimePermissionUserIds)) {
                        runtimePermissionsRevoked = true;
                    }
                } else {
                    PermissionsState permissionsState2 = new PermissionsState(permissionsState);
                    permissionsState.reset();
                }
            }
            permissionsState.setGlobalGids(this.mGlobalGids);
            boolean supportRuntimeAlert = hasSystemFeature("oppo.runtime.permission.alert.support", 0);
            int N = pkg.requestedPermissions.size();
            boolean pkgReviewRequired = isPackageNeedsReview(pkg);
            for (int i = 0; i < N; i++) {
                String name = (String) pkg.requestedPermissions.get(i);
                BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(name);
                if (DEBUG_PACKAGE_INFO) {
                    Log.i(TAG, "Package " + pkg.packageName + " checking " + name + ": " + bp);
                }
                if (bp == null || bp.packageSetting == null) {
                    if (packageOfInterest != null) {
                        if (!packageOfInterest.equals(pkg.packageName)) {
                        }
                    }
                    if (DBG_ENG || DBG_IS_LOGGABLE) {
                        Slog.w(TAG, "Unknown permission " + name + " in package " + pkg.packageName);
                    }
                } else {
                    String perm = bp.name;
                    boolean allowedSig = false;
                    int grant = 1;
                    if ((bp.protectionLevel & 64) != 0) {
                        ArraySet<String> pkgs = (ArraySet) this.mAppOpPermissionPackages.get(bp.name);
                        if (pkgs == null) {
                            pkgs = new ArraySet();
                            this.mAppOpPermissionPackages.put(bp.name, pkgs);
                        }
                        pkgs.add(pkg.packageName);
                    }
                    int level = bp.protectionLevel & 15;
                    boolean appSupportsRuntimePermissions = pkg.applicationInfo.targetSdkVersion >= 23;
                    switch (level) {
                        case 0:
                            grant = 2;
                            break;
                        case 1:
                            if (!appSupportsRuntimePermissions && !Build.isPermissionReviewRequired()) {
                                grant = 2;
                                break;
                            }
                            if (!origPermissions.hasInstallPermission(bp.name)) {
                                if (!this.mPromoteSystemApps || !isSystemApp(ps) || !this.mExistingSystemPackages.contains(ps.name)) {
                                    grant = 3;
                                    break;
                                } else {
                                    grant = 4;
                                    break;
                                }
                            }
                            grant = 4;
                            break;
                            break;
                        case 2:
                            allowedSig = grantSignaturePermission(perm, pkg, bp, origPermissions);
                            if (allowedSig) {
                                grant = 2;
                                break;
                            }
                            break;
                    }
                    if (DEBUG_PACKAGE_INFO) {
                        Log.i(TAG, "Package " + pkg.packageName + " granting " + perm);
                    }
                    if (grant != 1) {
                        if (!(isSystemApp(ps) || !ps.installPermissionsFixed || allowedSig || origPermissions.hasInstallPermission(perm) || isNewPlatformPermissionForPackage(perm, pkg))) {
                            grant = 1;
                        }
                        PermissionState permissionState;
                        int flags;
                        switch (grant) {
                            case 2:
                                for (int userId : UserManagerService.getInstance().getUserIds()) {
                                    if (origPermissions.getRuntimePermissionState(bp.name, userId) != null) {
                                        origPermissions.revokeRuntimePermission(bp, userId);
                                        origPermissions.updatePermissionFlags(bp, userId, 255, 0);
                                        changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId);
                                    }
                                }
                                if (permissionsState.grantInstallPermission(bp) == -1) {
                                    break;
                                }
                                changedInstallPermission = true;
                                break;
                            case 3:
                                for (int userId2 : UserManagerService.getInstance().getUserIds()) {
                                    permissionState = origPermissions.getRuntimePermissionState(bp.name, userId2);
                                    flags = permissionState != null ? permissionState.getFlags() : 0;
                                    if (origPermissions.hasRuntimePermission(bp.name, userId2)) {
                                        if (permissionsState.grantRuntimePermission(bp, userId2) == -1) {
                                            changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId2);
                                        }
                                        if (Build.isPermissionReviewRequired() && appSupportsRuntimePermissions && (flags & 64) != 0) {
                                            flags &= -65;
                                            changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId2);
                                        }
                                    } else if (Build.isPermissionReviewRequired() && !appSupportsRuntimePermissions) {
                                        if (CtaUtils.isPlatformPermission(bp.sourcePackage, bp.name) && pkgReviewRequired && (flags & 64) == 0) {
                                            Slog.d(TAG, "add review UI for legacy pkg = " + pkg.packageName + ", permission = " + bp.name + ", userId = " + userId2 + ", sharedUid = " + pkg.mSharedUserId);
                                            flags |= 64;
                                            changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId2);
                                        }
                                        if (permissionsState.grantRuntimePermission(bp, userId2) != -1) {
                                            changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId2);
                                        }
                                    } else if (appSupportsRuntimePermissions && pkgReviewRequired && CtaUtils.isPlatformPermission(bp.sourcePackage, bp.name) && (flags & 64) == 0 && (flags & 16) == 0) {
                                        Slog.d(TAG, "add review UI for non-legacy pkg = " + pkg.packageName + ", permission = " + bp.name + ", userId = " + userId2 + ", sharedUid = " + pkg.mSharedUserId);
                                        flags |= 64;
                                        changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId2);
                                    }
                                    permissionsState.updatePermissionFlags(bp, userId2, flags, flags);
                                }
                                break;
                            case 4:
                                permissionState = origPermissions.getInstallPermissionState(bp.name);
                                flags = permissionState != null ? permissionState.getFlags() : 0;
                                if (origPermissions.revokeInstallPermission(bp) != -1) {
                                    origPermissions.updatePermissionFlags(bp, -1, 255, 0);
                                    changedInstallPermission = true;
                                }
                                if ((flags & 8) != 0) {
                                    break;
                                }
                                for (int userId22 : currentUserIds) {
                                    if (permissionsState.grantRuntimePermission(bp, userId22) != -1) {
                                        permissionsState.updatePermissionFlags(bp, userId22, flags, flags);
                                        changedRuntimePermissionUserIds = ArrayUtils.appendInt(changedRuntimePermissionUserIds, userId22);
                                    }
                                }
                                break;
                            default:
                                if (packageOfInterest != null) {
                                    if (!packageOfInterest.equals(pkg.packageName)) {
                                        break;
                                    }
                                }
                                if (!DBG_ENG && !DBG_IS_LOGGABLE) {
                                    break;
                                }
                                Slog.w(TAG, "Not granting permission " + perm + " to package " + pkg.packageName + " because it was previously installed without");
                                break;
                                break;
                        }
                    } else if (permissionsState.revokeInstallPermission(bp) != -1) {
                        permissionsState.updatePermissionFlags(bp, -1, 255, 0);
                        changedInstallPermission = true;
                        if (DBG_ENG || DBG_IS_LOGGABLE) {
                            Slog.i(TAG, "Un-granting permission " + perm + " from package " + pkg.packageName + " (protectionLevel=" + bp.protectionLevel + " flags=0x" + Integer.toHexString(pkg.applicationInfo.flags) + ")");
                        }
                    } else if ((bp.protectionLevel & 64) == 0) {
                        if (packageOfInterest != null) {
                            if (!packageOfInterest.equals(pkg.packageName)) {
                            }
                        }
                        if (DBG_ENG || DBG_IS_LOGGABLE) {
                            Slog.w(TAG, "Not granting permission " + perm + " to package " + pkg.packageName + " (protectionLevel=" + bp.protectionLevel + " flags=0x" + Integer.toHexString(pkg.applicationInfo.flags) + ")");
                        }
                    }
                }
            }
            if (!((!changedInstallPermission && !replace) || ps.installPermissionsFixed || isSystemApp(ps)) || isUpdatedSystemApp(ps)) {
                ps.installPermissionsFixed = true;
            }
            for (int userId222 : changedRuntimePermissionUserIds) {
                this.mSettings.writeRuntimePermissionsForUserLPr(userId222, runtimePermissionsRevoked);
            }
            Trace.traceEnd(1048576);
        }
    }

    private boolean isNewPlatformPermissionForPackage(String perm, Package pkg) {
        int NP = PackageParser.NEW_PERMISSIONS.length;
        int ip = 0;
        while (ip < NP) {
            NewPermissionInfo npi = PackageParser.NEW_PERMISSIONS[ip];
            if (!npi.name.equals(perm) || pkg.applicationInfo.targetSdkVersion >= npi.sdkVersion) {
                ip++;
            } else {
                Log.i(TAG, "Auto-granting " + perm + " to old pkg " + pkg.packageName);
                return true;
            }
        }
        return false;
    }

    private boolean grantSignaturePermission(String perm, Package pkg, BasePermission bp, PermissionsState origPermissions) {
        boolean allowed = compareSignatures(bp.packageSetting.signatures.mSignatures, pkg.mSignatures) != 0 ? compareSignatures(this.mPlatformPackage.mSignatures, pkg.mSignatures) == 0 : true;
        if (pkg.mSharedUserId != null) {
            if (ColorPackageManagerHelper.isGrantedPermissionForShareUid(pkg.mSharedUserId, perm)) {
                allowed = true;
            }
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(GAME_CENTER_SYSTEM_APP);
            if (GAME_CENTER_PKGNAME.equals(pkg.packageName) && ps != null && isSystemApp(ps) && ColorPackageManagerHelper.isGrantedPermissionForGameCenter(pkg.mSharedUserId, perm)) {
                allowed = true;
            }
        }
        if (!allowed && (bp.protectionLevel & 16) != 0 && isSystemApp(pkg)) {
            if (pkg.isUpdatedSystemApp()) {
                PackageSetting sysPs = this.mSettings.getDisabledSystemPkgLPr(pkg.packageName);
                if (sysPs == null || !sysPs.getPermissionsState().hasInstallPermission(perm)) {
                    if (sysPs != null && sysPs.pkg != null && sysPs.isPrivileged()) {
                        for (int j = 0; j < sysPs.pkg.requestedPermissions.size(); j++) {
                            if (perm.equals(sysPs.pkg.requestedPermissions.get(j))) {
                                allowed = true;
                                break;
                            }
                        }
                    }
                    if (pkg.parentPackage != null) {
                        PackageSetting disabledSysParentPs = this.mSettings.getDisabledSystemPkgLPr(pkg.parentPackage.packageName);
                        if (disabledSysParentPs != null && disabledSysParentPs.pkg != null && disabledSysParentPs.isPrivileged()) {
                            if (isPackageRequestingPermission(disabledSysParentPs.pkg, perm)) {
                                allowed = true;
                            } else if (disabledSysParentPs.pkg.childPackages != null) {
                                int count = disabledSysParentPs.pkg.childPackages.size();
                                for (int i = 0; i < count; i++) {
                                    if (isPackageRequestingPermission((Package) disabledSysParentPs.pkg.childPackages.get(i), perm)) {
                                        allowed = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                } else if (sysPs.isPrivileged()) {
                    allowed = true;
                }
            } else {
                allowed = isPrivilegedApp(pkg);
            }
        }
        if (!allowed) {
            if (!(allowed || (bp.protectionLevel & 128) == 0 || pkg.applicationInfo.targetSdkVersion >= 23)) {
                allowed = true;
            }
            if (!(allowed || (bp.protectionLevel & 256) == 0 || !pkg.packageName.equals(this.mRequiredInstallerPackage))) {
                allowed = true;
            }
            if (!(allowed || (bp.protectionLevel & 512) == 0 || !pkg.packageName.equals(this.mRequiredVerifierPackage))) {
                allowed = true;
            }
            if (!(allowed || (bp.protectionLevel & 1024) == 0 || !isSystemApp(pkg))) {
                allowed = true;
            }
            if (!(allowed || (bp.protectionLevel & 32) == 0)) {
                allowed = origPermissions.hasInstallPermission(perm);
            }
            if (!(allowed || (bp.protectionLevel & 2048) == 0 || !pkg.packageName.equals(this.mSetupWizardPackage))) {
                allowed = true;
            }
        }
        if ("oppo.permission.OPPO_COMPONENT_SAFE".equals(perm) && !allowed && isSystemApp(pkg)) {
            return true;
        }
        return allowed;
    }

    private boolean isPackageRequestingPermission(Package pkg, String permission) {
        int permCount = pkg.requestedPermissions.size();
        for (int j = 0; j < permCount; j++) {
            if (permission.equals((String) pkg.requestedPermissions.get(j))) {
                return true;
            }
        }
        return false;
    }

    final void sendPackageBroadcast(String action, String pkg, Bundle extras, int flags, String targetPkg, IIntentReceiver finishedReceiver, int[] userIds) {
        final int[] iArr = userIds;
        final String str = action;
        final String str2 = pkg;
        final Bundle bundle = extras;
        final String str3 = targetPkg;
        final int i = flags;
        final IIntentReceiver iIntentReceiver = finishedReceiver;
        this.mHandler.post(new Runnable() {
            public void run() {
                try {
                    IActivityManager am = ActivityManagerNative.getDefault();
                    if (am != null) {
                        int[] resolvedUserIds;
                        if (iArr == null) {
                            resolvedUserIds = am.getRunningUserIds();
                        } else {
                            resolvedUserIds = iArr;
                        }
                        int i = 0;
                        int length = resolvedUserIds.length;
                        while (true) {
                            int i2 = i;
                            if (i2 >= length) {
                                break;
                            }
                            int id = resolvedUserIds[i2];
                            String pkgAction = str;
                            if (id == OppoMultiAppManager.USER_ID && OppoMultiAppManagerUtil.getInstance().isMultiAllowedApp(str2)) {
                                if ("android.intent.action.PACKAGE_REMOVED".equals(pkgAction)) {
                                    pkgAction = "oppo.intent.action.MULTI_APP_PACKAGE_REMOVED";
                                    id = 0;
                                    if (PackageManagerService.DEBUG_PMS) {
                                        Slog.d(PackageManagerService.TAG, "multi app: PMS " + pkgAction + " removed " + str2 + " userId= " + 0);
                                    }
                                }
                                if ("android.intent.action.PACKAGE_ADDED".equals(pkgAction)) {
                                    pkgAction = "oppo.intent.action.MULTI_APP_PACKAGE_ADDED";
                                    id = 0;
                                    if (PackageManagerService.DEBUG_PMS) {
                                        Slog.d(PackageManagerService.TAG, "multi app: PMS " + pkgAction + " added " + str2 + " userId= " + 0);
                                    }
                                }
                            }
                            Intent intent = new Intent(pkgAction, str2 != null ? Uri.fromParts(PackageManagerService.PACKAGE_SCHEME, str2, null) : null);
                            if (bundle != null) {
                                intent.putExtras(bundle);
                            }
                            if (str3 != null) {
                                intent.setPackage(str3);
                            }
                            int uid = intent.getIntExtra("android.intent.extra.UID", -1);
                            if (uid > 0 && UserHandle.getUserId(uid) != id) {
                                intent.putExtra("android.intent.extra.UID", UserHandle.getUid(id, UserHandle.getAppId(uid)));
                            }
                            intent.putExtra("android.intent.extra.user_handle", id);
                            intent.addFlags(i | 67108864);
                            if ("android.intent.action.PACKAGE_REMOVED".equals(pkgAction)) {
                                PackageManagerService.this.onPackageRemoved(str2);
                            }
                            if (PackageManagerService.DEBUG_BROADCASTS) {
                                Throwable runtimeException = new RuntimeException("here");
                                runtimeException.fillInStackTrace();
                                Slog.d(PackageManagerService.TAG, "Sending to user " + id + ": " + intent.toShortString(false, true, false, false) + " " + intent.getExtras(), runtimeException);
                            }
                            am.broadcastIntent(null, intent, null, iIntentReceiver, 0, null, null, null, -1, null, iIntentReceiver != null, false, id);
                            if ("android.intent.action.PACKAGE_ADDED".equals(pkgAction)) {
                                Message msg = PackageManagerService.this.mHandler.obtainMessage(21);
                                msg.obj = str2;
                                PackageManagerService.this.mHandler.sendMessage(msg);
                            }
                            i = i2 + 1;
                        }
                    }
                } catch (RemoteException e) {
                }
            }
        });
    }

    private boolean isExternalMediaAvailable() {
        return !this.mMediaMounted ? Environment.isExternalStorageEmulated() : true;
    }

    public PackageCleanItem nextPackageToClean(PackageCleanItem lastPackage) {
        synchronized (this.mPackages) {
            if (isExternalMediaAvailable()) {
                ArrayList<PackageCleanItem> pkgs = this.mSettings.mPackagesToBeCleaned;
                if (lastPackage != null) {
                    pkgs.remove(lastPackage);
                }
                if (pkgs.size() > 0) {
                    PackageCleanItem packageCleanItem = (PackageCleanItem) pkgs.get(0);
                    return packageCleanItem;
                }
                return null;
            }
            return null;
        }
    }

    void schedulePackageCleaning(String packageName, int userId, boolean andCode) {
        Message msg = this.mHandler.obtainMessage(7, userId, andCode ? 1 : 0, packageName);
        if (this.mSystemReady) {
            msg.sendToTarget();
            return;
        }
        if (this.mPostSystemReadyMessages == null) {
            this.mPostSystemReadyMessages = new ArrayList();
        }
        this.mPostSystemReadyMessages.add(msg);
    }

    /* JADX WARNING: Missing block: B:11:0x0017, code:
            r2 = new android.content.Intent("android.content.pm.CLEAN_EXTERNAL_STORAGE");
            r2.setComponent(DEFAULT_CONTAINER_COMPONENT);
            r0 = android.app.ActivityManagerNative.getDefault();
     */
    /* JADX WARNING: Missing block: B:12:0x0028, code:
            if (r0 == null) goto L_0x0036;
     */
    /* JADX WARNING: Missing block: B:14:?, code:
            r0.startService(null, r2, null, r7.mContext.getOpPackageName(), 0);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    void startCleaningPackages() {
        if (isExternalMediaAvailable()) {
            synchronized (this.mPackages) {
                if (this.mSettings.mPackagesToBeCleaned.isEmpty()) {
                }
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:30:0x00ce  */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x005f  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x0183  */
    /* JADX WARNING: Removed duplicated region for block: B:19:0x0080  */
    /* JADX WARNING: Missing block: B:81:0x01fa, code:
            if (r33.equals(com.android.server.oppo.IElsaManager.EMPTY_PACKAGE) != false) goto L_0x01fc;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void installPackageAsUser(String originPath, IPackageInstallObserver2 observer, int installFlags, String installerPackageName, int userId) {
        List<String> pkgwhitelist;
        int callingUid = Binder.getCallingUid();
        String[] packageNames = getPackagesForUid(callingUid);
        if (hasSystemFeature("oppo.customize.function.silentinstall", 0) && packageNames != null && packageNames.length == 1) {
            if (checkWhiteList(packageNames[0])) {
                Slog.d(TAG, "PMS, no check permission for customize ");
                enforceCrossUserPermission(callingUid, userId, true, true, "installPackageAsUser");
                if (hasSystemFeature("oppo.business.custom", 0) && isInstallSourceEnable()) {
                    pkgwhitelist = getInstallSourceList();
                    if (callingUid != getUidForSharedUser("oppo.uid.nearme")) {
                        if (pkgwhitelist.contains("com.oppo.market")) {
                            Log.d(TAG, "com.oppo.market has added to white list");
                        } else {
                            Log.d(TAG, "0.com.oppo.market : " + callingUid + "  is not allow to install !!!");
                            if (observer != null) {
                                try {
                                    observer.onPackageInstalled(IElsaManager.EMPTY_PACKAGE, -111, null, null);
                                } catch (RemoteException e) {
                                }
                            }
                            sendBroadcastForArmy();
                            return;
                        }
                    } else if (packageNames != null && packageNames.length == 1 && packageNames[0].equals("com.android.packageinstaller")) {
                        Log.d(TAG, "1.packageinstaller : " + packageNames[0] + "  always allow to install");
                    } else {
                        if (packageNames != null && packageNames.length == 1) {
                            if (pkgwhitelist.contains(packageNames[0])) {
                                Log.d(TAG, "2.market's uid = " + packageNames[0] + "  and allow to install");
                            }
                        }
                        if (callingUid == 1000) {
                            Log.d(TAG, "3.system uid always allow to install!!");
                        } else {
                            Log.d(TAG, "4.app come from the market uid =  " + callingUid + "  is not allow to install !!!");
                            if (observer != null) {
                                try {
                                    observer.onPackageInstalled(IElsaManager.EMPTY_PACKAGE, -111, null, null);
                                } catch (RemoteException e2) {
                                }
                            }
                            sendBroadcastForArmy();
                            return;
                        }
                    }
                }
                if (!isUserRestricted(userId, "no_install_apps")) {
                    if (observer != null) {
                        try {
                            observer.onPackageInstalled(IElsaManager.EMPTY_PACKAGE, -111, null, null);
                        } catch (RemoteException e3) {
                        }
                    }
                    return;
                } else if (prohibitChildInstallation(userId, true)) {
                    if (observer != null) {
                        try {
                            observer.onPackageInstalled(IElsaManager.EMPTY_PACKAGE, -111, null, null);
                        } catch (RemoteException e4) {
                        }
                    }
                    return;
                } else {
                    UserHandle user;
                    if (callingUid == SHELL_UID || callingUid == 0) {
                        installFlags |= 32;
                    } else {
                        installFlags = (installFlags & -33) & -65;
                    }
                    String curExtraInstallPkgNameExp = null;
                    if (EXP_VERSION && installerPackageName != null && installerPackageName.length() > 0) {
                        curExtraInstallPkgNameExp = installerPackageName;
                    }
                    if ((268435456 & installFlags) != 0) {
                        Slog.d(TAG, "install from oppo adb installer, set INSTALL_FROM_ADB flag");
                        installFlags = (installFlags | 32) & -268435457;
                    }
                    int callingPid = Binder.getCallingPid();
                    String callingProcess = OppoPackageManagerHelper.getProcessNameByPid(callingPid);
                    if (!this.mIsCtsAppInstall) {
                        if (callingProcess != null) {
                            if (!callingProcess.equals(IElsaManager.EMPTY_PACKAGE)) {
                                installerPackageName = callingProcess;
                            }
                        }
                        if (callingUid == SHELL_UID || callingUid == 0) {
                            installerPackageName = "pc";
                        }
                        if (installerPackageName != null) {
                        }
                        installerPackageName = getNameForUid(callingUid);
                    }
                    Slog.d(TAG, "installPackageAsUser callingProcess=" + callingProcess + "/" + callingPid + ", callingUid=" + callingUid + ", installerPackageName=" + installerPackageName + ", installFlags=" + installFlags + ", full=" + this.mIsCtsAppInstall);
                    ColorPackageManagerHelper.sendOppoStartInstallBro(originPath, installerPackageName, null, 0);
                    if ((installFlags & 64) != 0) {
                        user = UserHandle.ALL;
                        if ((installFlags & 32) != 0) {
                            boolean isMultiUserExist = false;
                            for (int i : sUserManager.getUserIds()) {
                                if (i == 999) {
                                    isMultiUserExist = true;
                                    break;
                                }
                            }
                            if (len == 2 && isMultiUserExist) {
                                Slog.d(TAG, "multi app: change adb install all to owner");
                                user = new UserHandle(0);
                            }
                        }
                    } else {
                        user = new UserHandle(userId);
                    }
                    if ((installFlags & 256) == 0 || this.mContext.checkCallingOrSelfPermission("android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS") != -1) {
                        OriginInfo origin = OriginInfo.fromUntrustedFile(new File(originPath));
                        if (EXP_VERSION && curExtraInstallPkgNameExp != null) {
                            if (installerPackageName.equals("com.google.android.packageinstaller")) {
                                Slog.i(TAG, "first origin : " + origin.toString() + " curExtraInstallPkgNameExp: " + curExtraInstallPkgNameExp);
                                synchronized (this.mRunningInstallerPkgName) {
                                    this.mRunningInstallerPkgName.put(origin, curExtraInstallPkgNameExp);
                                }
                            }
                        }
                        Message msg = this.mHandler.obtainMessage(5);
                        InstallParams params = new InstallParams(origin, null, observer, installFlags, installerPackageName, null, new VerificationInfo(null, null, -1, callingUid), user, null, null, null);
                        params.setTraceMethod("installAsUser").setTraceCookie(System.identityHashCode(params));
                        msg.obj = params;
                        Trace.asyncTraceBegin(1048576, "installAsUser", System.identityHashCode(msg.obj));
                        Trace.asyncTraceBegin(1048576, "queueInstall", System.identityHashCode(msg.obj));
                        this.mHandler.sendMessage(msg);
                        return;
                    }
                    throw new SecurityException("You need the android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");
                }
            }
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.INSTALL_PACKAGES", null);
        enforceCrossUserPermission(callingUid, userId, true, true, "installPackageAsUser");
        pkgwhitelist = getInstallSourceList();
        if (callingUid != getUidForSharedUser("oppo.uid.nearme")) {
        }
        if (!isUserRestricted(userId, "no_install_apps")) {
        }
    }

    /* JADX WARNING: Missing block: B:32:0x00d1, code:
            if (r33.equals(com.android.server.oppo.IElsaManager.EMPTY_PACKAGE) != false) goto L_0x00d3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    void installStage(String packageName, File stagedDir, String stagedCid, IPackageInstallObserver2 observer, SessionParams sessionParams, String installerPackageName, int installerUid, UserHandle user, Certificate[][] certificates) {
        OriginInfo origin;
        if (DEBUG_EPHEMERAL && (sessionParams.installFlags & 2048) != 0) {
            Slog.d(TAG, "Ephemeral install of " + packageName);
        }
        try {
            Slog.d(TAG, "send starting installation intent");
            ActivityManagerNative.getDefault().broadcastIntent(null, new Intent("android.intent.action.PACKAGE_INSTALL_BEGIN"), null, null, 0, null, null, null, -1, null, false, false, -1);
        } catch (Throwable e) {
            Slog.w(TAG, "Unable to send starting installation intent", e);
        }
        VerificationInfo verificationInfo = new VerificationInfo(sessionParams.originatingUri, sessionParams.referrerUri, sessionParams.originatingUid, installerUid);
        if (stagedDir != null) {
            origin = OriginInfo.fromStagedFile(stagedDir);
        } else {
            origin = OriginInfo.fromStagedContainer(stagedCid);
        }
        boolean allowRootSilentInstall = SystemProperties.getBoolean("oppo.root.silent.install", true);
        if (!((sessionParams.installFlags & 32) == 0 || ((installerUid == 0 && (installerUid != 0 || allowRootSilentInstall)) || stagedDir == null || packageName == null))) {
            String path = stagedDir.getAbsolutePath() + "/base.apk";
            Slog.d(TAG, "installStage send adb install pkg:" + packageName + "   path: " + path);
            if (OppoAdbInstallerManager.getInstance().handleForAdbSessionInstaller(packageName, path, observer, sessionParams.installFlags)) {
                return;
            }
        }
        if ((sessionParams.installFlags & 268435456) != 0) {
            Slog.d(TAG, "installStage from oppo adb installer, set INSTALL_FROM_ADB flag");
            sessionParams.installFlags |= 32;
            sessionParams.installFlags &= -268435457;
        }
        String curExtraInstallPkgNameExp = null;
        if (EXP_VERSION && installerPackageName != null && installerPackageName.length() > 0) {
            curExtraInstallPkgNameExp = installerPackageName;
        }
        if (!this.mIsCtsAppInstall) {
            if (installerUid == SHELL_UID || installerUid == 0) {
                installerPackageName = "pc";
            }
            if (installerPackageName != null) {
            }
            installerPackageName = getNameForUid(installerUid);
        }
        Slog.d(TAG, "installStage " + packageName + ", dir=" + stagedDir + ", installerPackageName=" + installerPackageName + ", installerUid=" + installerUid + ", full=" + this.mIsCtsAppInstall);
        ColorPackageManagerHelper.sendOppoStartInstallBro(stagedDir.getAbsolutePath() + "/base.apk", installerPackageName, packageName, 0);
        if ((sessionParams.installFlags & 32) != 0) {
            int[] users = sUserManager.getUserIds();
            if (!this.mIsCtsAppInstall && users.length > 1) {
                Slog.d(TAG, "multi app: change adb install all to owner");
                UserHandle userHandle = new UserHandle(0);
            }
        }
        if (EXP_VERSION && curExtraInstallPkgNameExp != null) {
            if (installerPackageName.equals("com.google.android.packageinstaller")) {
                Slog.i(TAG, "first origin : " + origin.toString() + " curExtraInstallPkgNameExp: " + curExtraInstallPkgNameExp);
                synchronized (this.mRunningInstallerPkgName) {
                    this.mRunningInstallerPkgName.put(origin, curExtraInstallPkgNameExp);
                }
            }
        }
        Message msg = this.mHandler.obtainMessage(5);
        InstallParams params = new InstallParams(origin, null, observer, sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid, verificationInfo, user, sessionParams.abiOverride, sessionParams.grantedRuntimePermissions, certificates);
        params.setTraceMethod("installStage").setTraceCookie(System.identityHashCode(params));
        msg.obj = params;
        Trace.asyncTraceBegin(1048576, "installStage", System.identityHashCode(msg.obj));
        Trace.asyncTraceBegin(1048576, "queueInstall", System.identityHashCode(msg.obj));
        this.mHandler.sendMessage(msg);
    }

    private void sendPackageAddedForUser(String packageName, PackageSetting pkgSetting, int userId) {
        sendPackageAddedForUser(packageName, !isSystemApp(pkgSetting) ? isUpdatedSystemApp(pkgSetting) : true, pkgSetting.appId, userId);
    }

    private void sendPackageAddedForUser(String packageName, boolean isSystem, int appId, int userId) {
        Bundle extras = new Bundle(1);
        extras.putInt("android.intent.extra.UID", UserHandle.getUid(userId, appId));
        int[] iArr = new int[1];
        iArr[0] = userId;
        sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", packageName, extras, 0, null, null, iArr);
        try {
            IActivityManager am = ActivityManagerNative.getDefault();
            if (isSystem && am.isUserRunning(userId, 0)) {
                am.broadcastIntent(null, new Intent("android.intent.action.BOOT_COMPLETED").addFlags(32).setPackage(packageName), null, null, 0, null, null, null, -1, null, false, false, userId);
            }
        } catch (Throwable e) {
            Slog.w(TAG, "Unable to bootstrap installed package", e);
        }
    }

    /* JADX WARNING: Missing block: B:44:0x00cb, code:
            if (r9 == false) goto L_0x0105;
     */
    /* JADX WARNING: Missing block: B:45:0x00cd, code:
            sendPackageAddedForUser(r13, r8, r15);
     */
    /* JADX WARNING: Missing block: B:46:0x00d0, code:
            android.os.Binder.restoreCallingIdentity(r6);
     */
    /* JADX WARNING: Missing block: B:47:0x00d3, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:63:0x0105, code:
            if (r10 == false) goto L_0x011a;
     */
    /* JADX WARNING: Missing block: B:65:?, code:
            killApplication(r13, android.os.UserHandle.getUid(r15, r8.appId), "hiding pkg");
            sendApplicationHiddenForUser(r13, r8, r15);
     */
    /* JADX WARNING: Missing block: B:66:0x0116, code:
            android.os.Binder.restoreCallingIdentity(r6);
     */
    /* JADX WARNING: Missing block: B:67:0x0119, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:68:0x011a, code:
            android.os.Binder.restoreCallingIdentity(r6);
     */
    /* JADX WARNING: Missing block: B:69:0x011d, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MANAGE_USERS", null);
        int uid = Binder.getCallingUid();
        enforceCrossUserPermission(uid, userId, true, true, "setApplicationHiddenSetting for user " + userId);
        if (hidden && isPackageDeviceAdmin(packageName, userId)) {
            Slog.w(TAG, "Not hiding package " + packageName + ": has active device admin");
            return false;
        }
        long callingId = Binder.clearCallingIdentity();
        boolean sendAdded = false;
        boolean sendRemoved = false;
        try {
            synchronized (this.mPackages) {
                PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (pkgSetting != null) {
                    if (PLATFORM_PACKAGE_NAME.equals(packageName)) {
                        Slog.w(TAG, "Cannot hide package: android");
                        Binder.restoreCallingIdentity(callingId);
                        return false;
                    }
                    if (hidden) {
                        if (inPmsWhiteList(ColorPackageManagerHelper.PROTECT_HIDE_APP_INDEX, packageName, ColorPackageManagerHelper.DEFAULT_PROTECT_HIDE_APP)) {
                            Slog.w(TAG, "Cannot hiding protect app " + packageName);
                            Binder.restoreCallingIdentity(callingId);
                            return false;
                        }
                    }
                    if (hidden) {
                        if (!UserHandle.isSameApp(uid, pkgSetting.appId)) {
                            if (this.mProtectedPackages.isPackageStateProtected(userId, packageName)) {
                                Slog.w(TAG, "Not hiding protected package: " + packageName);
                                Binder.restoreCallingIdentity(callingId);
                                return false;
                            }
                        }
                    }
                    if (pkgSetting.getHidden(userId) != hidden) {
                        pkgSetting.setHidden(hidden, userId);
                        this.mSettings.writePackageRestrictionsLPr(userId);
                        if (hidden) {
                            sendRemoved = true;
                        } else {
                            sendAdded = true;
                        }
                    }
                }
            }
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
        return false;
    }

    private void sendApplicationHiddenForUser(String packageName, PackageSetting pkgSetting, int userId) {
        PackageRemovedInfo info = new PackageRemovedInfo();
        info.removedPackage = packageName;
        int[] iArr = new int[1];
        iArr[0] = userId;
        info.removedUsers = iArr;
        info.uid = UserHandle.getUid(userId, pkgSetting.appId);
        info.sendPackageRemovedBroadcasts(true);
    }

    private void sendPackagesSuspendedForUser(String[] pkgList, int userId, boolean suspended) {
        if (pkgList.length > 0) {
            String str;
            Bundle extras = new Bundle(1);
            extras.putStringArray("android.intent.extra.changed_package_list", pkgList);
            if (suspended) {
                str = "android.intent.action.PACKAGES_SUSPENDED";
            } else {
                str = "android.intent.action.PACKAGES_UNSUSPENDED";
            }
            int[] iArr = new int[1];
            iArr[0] = userId;
            sendPackageBroadcast(str, null, extras, 1073741824, null, null, iArr);
        }
    }

    public boolean getApplicationHiddenSettingAsUser(String packageName, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MANAGE_USERS", null);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getApplicationHidden for user " + userId);
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this.mPackages) {
                PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (pkgSetting != null) {
                    boolean hidden = pkgSetting.getHidden(userId);
                    Binder.restoreCallingIdentity(callingId);
                    return hidden;
                }
            }
            return true;
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    /* JADX WARNING: Missing block: B:26:0x006d, code:
            if (r8 == false) goto L_0x0093;
     */
    /* JADX WARNING: Missing block: B:28:0x0071, code:
            if (r9.pkg == null) goto L_0x007c;
     */
    /* JADX WARNING: Missing block: B:29:0x0073, code:
            r2 = r10.mInstallLock;
     */
    /* JADX WARNING: Missing block: B:30:0x0075, code:
            monitor-enter(r2);
     */
    /* JADX WARNING: Missing block: B:32:?, code:
            prepareAppDataAfterInstallLIF(r9.pkg);
     */
    /* JADX WARNING: Missing block: B:34:?, code:
            monitor-exit(r2);
     */
    /* JADX WARNING: Missing block: B:36:0x0084, code:
            if (com.android.server.am.OppoMultiAppManagerUtil.getInstance().isMultiAllowedApp(r11) == false) goto L_0x0090;
     */
    /* JADX WARNING: Missing block: B:38:0x008e, code:
            if (oppo.util.OppoMultiLauncherUtil.getInstance().isMultiApp(r12, r11) == false) goto L_0x00a2;
     */
    /* JADX WARNING: Missing block: B:39:0x0090, code:
            sendPackageAddedForUser(r11, r9, r12);
     */
    /* JADX WARNING: Missing block: B:40:0x0093, code:
            android.os.Binder.restoreCallingIdentity(r6);
     */
    /* JADX WARNING: Missing block: B:41:0x0096, code:
            return 1;
     */
    /* JADX WARNING: Missing block: B:53:0x00a2, code:
            oppo.util.OppoMultiLauncherUtil.getInstance().addToCreatedMultiApp(r11);
     */
    /* JADX WARNING: Missing block: B:54:0x00ab, code:
            if (DEBUG_PMS == false) goto L_0x0090;
     */
    /* JADX WARNING: Missing block: B:55:0x00ad, code:
            android.util.Slog.d(TAG, "multi app: install pkg: " + r11 + " user= " + r12);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int installExistingPackageAsUser(String packageName, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INSTALL_PACKAGES", null);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "installExistingPackage for user " + userId);
        if (!sUserManager.exists(userId)) {
            return -1;
        }
        if (isUserRestricted(userId, "no_install_apps")) {
            return -111;
        }
        long callingId = Binder.clearCallingIdentity();
        boolean installed = false;
        try {
            synchronized (this.mPackages) {
                PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (pkgSetting == null) {
                    Binder.restoreCallingIdentity(callingId);
                    return -3;
                } else if (!pkgSetting.getInstalled(userId)) {
                    pkgSetting.setInstalled(true, userId);
                    pkgSetting.setHidden(false, userId);
                    this.mSettings.writePackageRestrictionsLPr(userId);
                    installed = true;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    boolean isUserRestricted(int userId, String restrictionKey) {
        if (!sUserManager.getUserRestrictions(userId).getBoolean(restrictionKey, false)) {
            return false;
        }
        Log.w(TAG, "User is restricted: " + restrictionKey);
        return true;
    }

    public String[] setPackagesSuspendedAsUser(String[] packageNames, boolean suspended, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MANAGE_USERS", null);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "setPackagesSuspended for user " + userId);
        if (ArrayUtils.isEmpty(packageNames)) {
            return packageNames;
        }
        List<String> changedPackages = new ArrayList(packageNames.length);
        List<String> arrayList = new ArrayList(packageNames.length);
        long callingId = Binder.clearCallingIdentity();
        for (String packageName : packageNames) {
            boolean changed = false;
            synchronized (this.mPackages) {
                PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (pkgSetting == null) {
                    Slog.w(TAG, "Could not find package setting for package \"" + packageName + "\". Skipping suspending/un-suspending.");
                    arrayList.add(packageName);
                } else {
                    int appId = pkgSetting.appId;
                    if (pkgSetting.getSuspended(userId) != suspended) {
                        if (canSuspendPackageForUserLocked(packageName, userId)) {
                            pkgSetting.setSuspended(suspended, userId);
                            this.mSettings.writePackageRestrictionsLPr(userId);
                            changed = true;
                            changedPackages.add(packageName);
                        } else {
                            arrayList.add(packageName);
                        }
                    }
                    try {
                        if (changed && suspended) {
                            killApplication(packageName, UserHandle.getUid(userId, appId), "suspending package");
                        }
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(callingId);
                    }
                }
            }
        }
        Binder.restoreCallingIdentity(callingId);
        if (!changedPackages.isEmpty()) {
            sendPackagesSuspendedForUser((String[]) changedPackages.toArray(new String[changedPackages.size()]), userId, suspended);
        }
        return (String[]) arrayList.toArray(new String[arrayList.size()]);
    }

    public boolean isPackageSuspendedForUser(String packageName, int userId) {
        boolean suspended;
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "isPackageSuspendedForUser for user " + userId);
        synchronized (this.mPackages) {
            PackageSetting pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (pkgSetting == null) {
                throw new IllegalArgumentException("Unknown target package: " + packageName);
            }
            suspended = pkgSetting.getSuspended(userId);
        }
        return suspended;
    }

    private boolean canSuspendPackageForUserLocked(String packageName, int userId) {
        if (isPackageDeviceAdmin(packageName, userId)) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": has an active device admin");
            return false;
        } else if (packageName.equals(getActiveLauncherPackageName(userId))) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": contains the active launcher");
            return false;
        } else if (packageName.equals(this.mRequiredInstallerPackage)) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": required for package installation");
            return false;
        } else if (packageName.equals(this.mRequiredUninstallerPackage)) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": required for package uninstallation");
            return false;
        } else if (packageName.equals(this.mRequiredVerifierPackage)) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": required for package verification");
            return false;
        } else if (packageName.equals(getDefaultDialerPackageName(userId))) {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": is the default dialer");
            return false;
        } else if (!this.mProtectedPackages.isPackageStateProtected(userId, packageName)) {
            return true;
        } else {
            Slog.w(TAG, "Cannot suspend/un-suspend package \"" + packageName + "\": protected package");
            return false;
        }
    }

    private String getActiveLauncherPackageName(int userId) {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.HOME");
        ResolveInfo resolveInfo = resolveIntent(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), 65536, userId);
        if (resolveInfo == null) {
            return null;
        }
        return resolveInfo.activityInfo.packageName;
    }

    private String getDefaultDialerPackageName(int userId) {
        String defaultDialerPackageNameLPw;
        synchronized (this.mPackages) {
            defaultDialerPackageNameLPw = this.mSettings.getDefaultDialerPackageNameLPw(userId);
        }
        return defaultDialerPackageNameLPw;
    }

    public void verifyPendingInstall(int id, int verificationCode) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can verify applications");
        Message msg = this.mHandler.obtainMessage(15);
        PackageVerificationResponse response = new PackageVerificationResponse(verificationCode, Binder.getCallingUid());
        msg.arg1 = id;
        msg.obj = response;
        this.mHandler.sendMessage(msg);
    }

    public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can extend verification timeouts");
        PackageVerificationState state = (PackageVerificationState) this.mPendingVerification.get(id);
        PackageVerificationResponse response = new PackageVerificationResponse(verificationCodeAtTimeout, Binder.getCallingUid());
        if (millisecondsToDelay > 3600000) {
            millisecondsToDelay = 3600000;
        }
        if (millisecondsToDelay < 0) {
            millisecondsToDelay = 0;
        }
        if (!(verificationCodeAtTimeout == 1 || verificationCodeAtTimeout == -1)) {
        }
        if (state != null && !state.timeoutExtended()) {
            state.extendTimeout();
            Message msg = this.mHandler.obtainMessage(15);
            msg.arg1 = id;
            msg.obj = response;
            this.mHandler.sendMessageDelayed(msg, millisecondsToDelay);
        }
    }

    private void broadcastPackageVerified(int verificationId, Uri packageUri, int verificationCode, UserHandle user) {
        Intent intent = new Intent("android.intent.action.PACKAGE_VERIFIED");
        intent.setDataAndType(packageUri, PACKAGE_MIME_TYPE);
        intent.addFlags(1);
        intent.putExtra("android.content.pm.extra.VERIFICATION_ID", verificationId);
        intent.putExtra("android.content.pm.extra.VERIFICATION_RESULT", verificationCode);
        this.mContext.sendBroadcastAsUser(intent, user, "android.permission.PACKAGE_VERIFICATION_AGENT");
    }

    private ComponentName matchComponentForVerifier(String packageName, List<ResolveInfo> receivers) {
        ActivityInfo targetReceiver = null;
        int NR = receivers.size();
        for (int i = 0; i < NR; i++) {
            ResolveInfo info = (ResolveInfo) receivers.get(i);
            if (info.activityInfo != null && packageName.equals(info.activityInfo.packageName)) {
                targetReceiver = info.activityInfo;
                break;
            }
        }
        if (targetReceiver == null) {
            return null;
        }
        return new ComponentName(targetReceiver.packageName, targetReceiver.name);
    }

    private List<ComponentName> matchVerifiers(PackageInfoLite pkgInfo, List<ResolveInfo> receivers, PackageVerificationState verificationState) {
        if (pkgInfo.verifiers.length == 0) {
            return null;
        }
        List<ComponentName> sufficientVerifiers = new ArrayList(N + 1);
        for (VerifierInfo verifierInfo : pkgInfo.verifiers) {
            ComponentName comp = matchComponentForVerifier(verifierInfo.packageName, receivers);
            if (comp != null) {
                int verifierUid = getUidForVerifier(verifierInfo);
                if (verifierUid != -1) {
                    if (DEBUG_VERIFY) {
                        Slog.d(TAG, "Added sufficient verifier " + verifierInfo.packageName + " with the correct signature");
                    }
                    sufficientVerifiers.add(comp);
                    verificationState.addSufficientVerifier(verifierUid);
                }
            }
        }
        return sufficientVerifiers;
    }

    private int getUidForVerifier(VerifierInfo verifierInfo) {
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(verifierInfo.packageName);
            if (pkg == null) {
                return -1;
            } else if (pkg.mSignatures.length != 1) {
                Slog.i(TAG, "Verifier package " + verifierInfo.packageName + " has more than one signature; ignoring");
                return -1;
            } else {
                try {
                    if (Arrays.equals(verifierInfo.publicKey.getEncoded(), pkg.mSignatures[0].getPublicKey().getEncoded())) {
                        int i = pkg.applicationInfo.uid;
                        return i;
                    }
                    Slog.i(TAG, "Verifier package " + verifierInfo.packageName + " does not have the expected public key; ignoring");
                    return -1;
                } catch (CertificateException e) {
                    return -1;
                }
            }
        }
    }

    public void finishPackageInstall(int token, boolean didLaunch) {
        enforceSystemOrRoot("Only the system is allowed to finish installs");
        if (DEBUG_INSTALL) {
            Slog.v(TAG, "BM finishing package install for " + token);
        }
        Trace.asyncTraceEnd(1048576, "restore", token);
        this.mHandler.sendMessage(this.mHandler.obtainMessage(9, token, didLaunch ? 1 : 0));
    }

    private long getVerificationTimeout() {
        return Global.getLong(this.mContext.getContentResolver(), "verifier_timeout", 10000);
    }

    private int getDefaultVerificationResponse() {
        return Global.getInt(this.mContext.getContentResolver(), "verifier_default_response", 1);
    }

    private boolean isVerificationEnabled(int userId, int installFlags) {
        boolean z = true;
        if ((installFlags & 2048) != 0) {
            if (DEBUG_EPHEMERAL) {
                Slog.d(TAG, "INSTALL_EPHEMERAL so skipping verification");
            }
            return false;
        }
        boolean ensureVerifyAppsEnabled = isUserRestricted(userId, "ensure_verify_apps");
        if ((installFlags & 32) != 0) {
            if (ActivityManager.isRunningInTestHarness()) {
                return false;
            }
            if (ensureVerifyAppsEnabled) {
                return true;
            }
            if (Global.getInt(this.mContext.getContentResolver(), "verifier_verify_adb_installs", 1) == 0) {
                return false;
            }
        }
        if (ensureVerifyAppsEnabled) {
            return true;
        }
        if (Global.getInt(this.mContext.getContentResolver(), "package_verifier_enable", 1) != 1) {
            z = false;
        }
        return z;
    }

    public void verifyIntentFilter(int id, int verificationCode, List<String> failedDomains) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", "Only intentfilter verification agents can verify applications");
        Message msg = this.mHandler.obtainMessage(18);
        IntentFilterVerificationResponse response = new IntentFilterVerificationResponse(Binder.getCallingUid(), verificationCode, failedDomains);
        msg.arg1 = id;
        msg.obj = response;
        this.mHandler.sendMessage(msg);
    }

    public int getIntentVerificationStatus(String packageName, int userId) {
        int intentFilterVerificationStatusLPr;
        synchronized (this.mPackages) {
            intentFilterVerificationStatusLPr = this.mSettings.getIntentFilterVerificationStatusLPr(packageName, userId);
        }
        return intentFilterVerificationStatusLPr;
    }

    public boolean updateIntentVerificationStatus(String packageName, int status, int userId) {
        boolean result;
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
        synchronized (this.mPackages) {
            result = this.mSettings.updateIntentFilterVerificationStatusLPw(packageName, status, userId);
        }
        if (result) {
            scheduleWritePackageRestrictionsLocked(userId);
        }
        return result;
    }

    public ParceledListSlice<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName) {
        ParceledListSlice<IntentFilterVerificationInfo> parceledListSlice;
        synchronized (this.mPackages) {
            parceledListSlice = new ParceledListSlice(this.mSettings.getIntentFilterVerificationsLPr(packageName));
        }
        return parceledListSlice;
    }

    public ParceledListSlice<IntentFilter> getAllIntentFilters(String packageName) {
        if (TextUtils.isEmpty(packageName)) {
            return ParceledListSlice.emptyList();
        }
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            ParceledListSlice<IntentFilter> emptyList;
            if (pkg == null || pkg.activities == null) {
                emptyList = ParceledListSlice.emptyList();
                return emptyList;
            }
            int count = pkg.activities.size();
            ArrayList<IntentFilter> result = new ArrayList();
            for (int n = 0; n < count; n++) {
                Activity activity = (Activity) pkg.activities.get(n);
                if (activity.intents != null && activity.intents.size() > 0) {
                    result.addAll(activity.intents);
                }
            }
            emptyList = new ParceledListSlice(result);
            return emptyList;
        }
    }

    public boolean setDefaultBrowserPackageName(String packageName, int userId) {
        boolean result;
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
        synchronized (this.mPackages) {
            result = this.mSettings.setDefaultBrowserPackageNameLPw(packageName, userId);
            if (packageName != null) {
                result |= updateIntentVerificationStatus(packageName, 2, userId);
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultBrowserLPr(packageName, userId);
            }
        }
        return result;
    }

    public String getDefaultBrowserPackageName(int userId) {
        String defaultBrowserPackageNameLPw;
        synchronized (this.mPackages) {
            defaultBrowserPackageNameLPw = this.mSettings.getDefaultBrowserPackageNameLPw(userId);
        }
        return defaultBrowserPackageNameLPw;
    }

    private int getUnknownSourcesSettings() {
        return Secure.getInt(this.mContext.getContentResolver(), "install_non_market_apps", -1);
    }

    public void setInstallerPackageName(String targetPackage, String installerPackageName) {
        int uid = Binder.getCallingUid();
        synchronized (this.mPackages) {
            PackageSetting targetPackageSetting = (PackageSetting) this.mSettings.mPackages.get(targetPackage);
            if (targetPackageSetting == null) {
                throw new IllegalArgumentException("Unknown target package: " + targetPackage);
            }
            PackageSetting packageSetting;
            if (installerPackageName != null) {
                packageSetting = (PackageSetting) this.mSettings.mPackages.get(installerPackageName);
                if (packageSetting == null) {
                    throw new IllegalArgumentException("Unknown installer package: " + installerPackageName);
                }
            }
            packageSetting = null;
            Object obj = this.mSettings.getUserIdLPr(uid);
            if (obj != null) {
                Signature[] callerSignature;
                if (obj instanceof SharedUserSetting) {
                    callerSignature = ((SharedUserSetting) obj).signatures.mSignatures;
                } else if (obj instanceof PackageSetting) {
                    callerSignature = ((PackageSetting) obj).signatures.mSignatures;
                } else {
                    throw new SecurityException("Bad object " + obj + " for uid " + uid);
                }
                if (packageSetting == null || compareSignatures(callerSignature, packageSetting.signatures.mSignatures) == 0) {
                    if (targetPackageSetting.installerPackageName != null) {
                        PackageSetting setting = (PackageSetting) this.mSettings.mPackages.get(targetPackageSetting.installerPackageName);
                        if (!(setting == null || compareSignatures(callerSignature, setting.signatures.mSignatures) == 0)) {
                            throw new SecurityException("Caller does not have same cert as old installer package " + targetPackageSetting.installerPackageName);
                        }
                    }
                    targetPackageSetting.installerPackageName = installerPackageName;
                    if (installerPackageName != null) {
                        this.mSettings.mInstallerPackages.add(installerPackageName);
                    }
                    scheduleWriteSettingsLocked();
                } else {
                    throw new SecurityException("Caller does not have same cert as new installer package " + installerPackageName);
                }
            }
            throw new SecurityException("Unknown calling UID: " + uid);
        }
    }

    private void processPendingInstall(final InstallArgs args, final int currentStatus) {
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerService.this.mHandler.removeCallbacks(this);
                PackageInstalledInfo res = new PackageInstalledInfo();
                res.setReturnCode(currentStatus);
                res.uid = -1;
                res.pkg = null;
                res.removedInfo = null;
                if (res.returnCode == 1) {
                    if (PackageManagerService.mHyp == null) {
                        PackageManagerService.mHyp = new Hypnus();
                    }
                    if (PackageManagerService.mHyp != null) {
                        PackageManagerService.mHyp.hypnusSetAction(15, com.android.server.am.EventLogTags.AM_CREATE_ACTIVITY);
                    }
                    args.doPreInstall(res.returnCode);
                    synchronized (PackageManagerService.this.mInstallLock) {
                        PackageManagerService.this.installPackageTracedLI(args, res);
                    }
                    args.doPostInstall(res.returnCode, res.uid);
                }
                boolean update = res.removedInfo != null ? res.removedInfo.removedPackage != null : false;
                boolean doRestore = !update ? (32768 & (res.pkg == null ? 0 : res.pkg.applicationInfo.flags)) != 0 : false;
                if (PackageManagerService.this.mNextInstallToken < 0) {
                    PackageManagerService.this.mNextInstallToken = 1;
                }
                PackageManagerService packageManagerService = PackageManagerService.this;
                int token = packageManagerService.mNextInstallToken;
                packageManagerService.mNextInstallToken = token + 1;
                PackageManagerService.this.mRunningInstalls.put(token, new PostInstallData(args, res));
                if (PackageManagerService.DEBUG_INSTALL) {
                    Log.v(PackageManagerService.TAG, "+ starting restore round-trip " + token);
                }
                if (res.returnCode == 1 && doRestore) {
                    IBackupManager bm = IBackupManager.Stub.asInterface(ServiceManager.getService("backup"));
                    if (bm != null) {
                        if (PackageManagerService.DEBUG_INSTALL) {
                            Log.v(PackageManagerService.TAG, "token " + token + " to BM for possible restore");
                        }
                        Trace.asyncTraceBegin(1048576, "restore", token);
                        try {
                            if (bm.isBackupServiceActive(0)) {
                                bm.restoreAtInstall(res.pkg.applicationInfo.packageName, token);
                            } else {
                                doRestore = false;
                            }
                        } catch (RemoteException e) {
                        } catch (Exception e2) {
                            Slog.e(PackageManagerService.TAG, "Exception trying to enqueue restore", e2);
                            doRestore = false;
                        }
                    } else {
                        Slog.e(PackageManagerService.TAG, "Backup Manager not found!");
                        doRestore = false;
                    }
                }
                if (!doRestore) {
                    if (PackageManagerService.DEBUG_INSTALL) {
                        Log.v(PackageManagerService.TAG, "No restore - queue post-install for " + token);
                    }
                    Trace.asyncTraceBegin(1048576, "postInstall", token);
                    PackageManagerService.this.mHandler.sendMessage(PackageManagerService.this.mHandler.obtainMessage(9, token, 0));
                }
            }
        });
    }

    void notifyFirstLaunch(final String pkgName, final String installerPackage, final int userId) {
        this.mHandler.post(new Runnable() {
            public void run() {
                for (int i = 0; i < PackageManagerService.this.mRunningInstalls.size(); i++) {
                    PostInstallData data = (PostInstallData) PackageManagerService.this.mRunningInstalls.valueAt(i);
                    if (data.res.returnCode == 1 && pkgName.equals(data.res.pkg.applicationInfo.packageName)) {
                        for (int i2 : data.res.newUsers) {
                            if (userId == i2) {
                                if (PackageManagerService.DEBUG_BACKUP) {
                                    Slog.i(PackageManagerService.TAG, "Package " + pkgName + " being restored so deferring FIRST_LAUNCH");
                                }
                                return;
                            }
                        }
                        continue;
                    }
                }
                if (PackageManagerService.DEBUG_BACKUP) {
                    Slog.i(PackageManagerService.TAG, "Package " + pkgName + " sending normal FIRST_LAUNCH");
                }
                PackageManagerService packageManagerService = PackageManagerService.this;
                String str = pkgName;
                String str2 = installerPackage;
                int[] iArr = new int[1];
                iArr[0] = userId;
                packageManagerService.sendFirstLaunchBroadcast(str, str2, iArr);
            }
        });
    }

    private void sendFirstLaunchBroadcast(String pkgName, String installerPkg, int[] userIds) {
        sendPackageBroadcast("android.intent.action.PACKAGE_FIRST_LAUNCH", pkgName, null, 0, installerPkg, null, userIds);
    }

    private static long calculateDirectorySize(IMediaContainerService mcs, File[] paths) throws RemoteException {
        long result = 0;
        for (File path : paths) {
            result += mcs.calculateDirectorySize(path.getAbsolutePath());
        }
        return result;
    }

    private static void clearDirectory(IMediaContainerService mcs, File[] paths) {
        for (File path : paths) {
            try {
                mcs.clearDirectory(path.getAbsolutePath());
            } catch (RemoteException e) {
            }
        }
    }

    private static boolean installOnExternalAsec(int installFlags) {
        if ((installFlags & 16) == 0 && (installFlags & 8) != 0) {
            return true;
        }
        return false;
    }

    private static boolean installForwardLocked(int installFlags) {
        return (installFlags & 1) != 0;
    }

    private InstallArgs createInstallArgs(InstallParams params) {
        if (params.move != null) {
            return new MoveInstallArgs(params);
        }
        if (installOnExternalAsec(params.installFlags) || params.isForwardLocked()) {
            return new AsecInstallArgs(params);
        }
        return new FileInstallArgs(params);
    }

    private InstallArgs createInstallArgsForExisting(int installFlags, String codePath, String resourcePath, String[] instructionSets) {
        boolean isInAsec;
        if (installOnExternalAsec(installFlags)) {
            isInAsec = true;
        } else if (!installForwardLocked(installFlags) || codePath.startsWith(this.mDrmAppPrivateInstallDir.getAbsolutePath())) {
            isInAsec = false;
        } else {
            isInAsec = true;
        }
        if (!isInAsec) {
            return new FileInstallArgs(codePath, resourcePath, instructionSets);
        }
        return new AsecInstallArgs(codePath, instructionSets, installOnExternalAsec(installFlags), installForwardLocked(installFlags));
    }

    private void removeDexFiles(List<String> allCodePaths, String[] instructionSets) {
        if (!allCodePaths.isEmpty()) {
            if (instructionSets == null) {
                throw new IllegalStateException("instructionSet == null");
            }
            String[] dexCodeInstructionSets = InstructionSets.getDexCodeInstructionSets(instructionSets);
            for (String codePath : allCodePaths) {
                for (String dexCodeInstructionSet : dexCodeInstructionSets) {
                    try {
                        this.mInstaller.rmdex(codePath, dexCodeInstructionSet);
                    } catch (InstallerException e) {
                    }
                }
            }
        }
    }

    private boolean isAsecExternal(String cid) {
        boolean z = false;
        String asecPath = PackageHelper.getSdFilesystem(cid);
        if (asecPath == null) {
            return false;
        }
        if (!asecPath.startsWith(this.mAsecInternalPath)) {
            z = true;
        }
        return z;
    }

    private static void maybeThrowExceptionForMultiArchCopy(String message, int copyRet) throws PackageManagerException {
        if (copyRet < 0 && copyRet != -114 && copyRet != -113) {
            throw new PackageManagerException(copyRet, message);
        }
    }

    static String cidFromCodePath(String fullCodePath) {
        int eidx = fullCodePath.lastIndexOf("/");
        String subStr1 = fullCodePath.substring(0, eidx);
        return subStr1.substring(subStr1.lastIndexOf("/") + 1, eidx);
    }

    static String getAsecPackageName(String packageCid) {
        int idx = packageCid.lastIndexOf(INSTALL_PACKAGE_SUFFIX);
        if (idx == -1) {
            return packageCid;
        }
        return packageCid.substring(0, idx);
    }

    private static String getNextCodePath(String oldCodePath, String prefix, String suffix) {
        String idxStr = IElsaManager.EMPTY_PACKAGE;
        int idx = 1;
        if (oldCodePath != null) {
            String subStr = oldCodePath;
            if (suffix != null && oldCodePath.endsWith(suffix)) {
                subStr = oldCodePath.substring(0, oldCodePath.length() - suffix.length());
            }
            int sidx = subStr.lastIndexOf(prefix);
            if (sidx != -1) {
                subStr = subStr.substring(prefix.length() + sidx);
                if (subStr != null) {
                    if (subStr.startsWith(INSTALL_PACKAGE_SUFFIX)) {
                        subStr = subStr.substring(INSTALL_PACKAGE_SUFFIX.length());
                    }
                    try {
                        idx = Integer.parseInt(subStr);
                        idx = idx <= 1 ? idx + 1 : idx - 1;
                    } catch (NumberFormatException e) {
                    }
                }
            }
        }
        return prefix + (INSTALL_PACKAGE_SUFFIX + Integer.toString(idx));
    }

    private File getNextCodePath(File targetDir, String packageName) {
        File result;
        int suffix = 1;
        do {
            result = new File(targetDir, packageName + INSTALL_PACKAGE_SUFFIX + suffix);
            suffix++;
        } while (result.exists());
        return result;
    }

    static String deriveCodePathName(String codePath) {
        if (codePath == null) {
            return null;
        }
        File codeFile = new File(codePath);
        String name = codeFile.getName();
        if (codeFile.isDirectory()) {
            return name;
        }
        if (name.endsWith(".apk") || name.endsWith(".tmp")) {
            return name.substring(0, name.lastIndexOf(46));
        }
        Slog.w(TAG, "Odd, " + codePath + " doesn't look like an APK");
        return null;
    }

    /* JADX WARNING: Missing block: B:19:?, code:
            r3 = scanPackageTracedLI(r16, r17, r18, java.lang.System.currentTimeMillis(), r19);
            updateSettingsLI(r3, r20, null, r22, r19);
     */
    /* JADX WARNING: Missing block: B:20:0x00b8, code:
            if (r22.returnCode != 1) goto L_0x00c7;
     */
    /* JADX WARNING: Missing block: B:21:0x00ba, code:
            prepareAppDataAfterInstallLIF(r3);
     */
    /* JADX WARNING: Missing block: B:28:?, code:
            deletePackageLIF(r14, android.os.UserHandle.ALL, false, null, 1, r22.removedInfo, true, null);
     */
    /* JADX WARNING: Missing block: B:29:0x00d8, code:
            r13 = move-exception;
     */
    /* JADX WARNING: Missing block: B:30:0x00d9, code:
            r22.setError("Package couldn't be installed in " + r16.codePath, r13);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void installNewPackageLIF(Package pkg, int policyFlags, int scanFlags, UserHandle user, String installerPackageName, String volumeUuid, PackageInstalledInfo res) {
        Trace.traceBegin(1048576, "installNewPackage");
        String pkgName = pkg.packageName;
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "installNewPackageLI: " + pkg);
        }
        synchronized (this.mPackages) {
            if (this.mSettings.mRenamedPackages.containsKey(pkgName)) {
                res.setError(-1, "Attempt to re-install " + pkgName + " without first uninstalling package running as " + ((String) this.mSettings.mRenamedPackages.get(pkgName)));
                return;
            } else if (this.mPackages.containsKey(pkgName)) {
                res.setError(-1, "Attempt to re-install " + pkgName + " without first uninstalling.");
                return;
            }
        }
        Trace.traceEnd(1048576);
    }

    private boolean shouldCheckUpgradeKeySetLP(PackageSetting oldPs, int scanFlags) {
        if (oldPs == null || (scanFlags & 16384) != 0 || oldPs.sharedUser != null || !oldPs.keySetData.isUsingUpgradeKeySets()) {
            return false;
        }
        KeySetManagerService ksms = this.mSettings.mKeySetManagerService;
        long[] upgradeKeySets = oldPs.keySetData.getUpgradeKeySets();
        int i = 0;
        while (i < upgradeKeySets.length) {
            if (ksms.isIdValidKeySetId(upgradeKeySets[i])) {
                i++;
            } else {
                Slog.wtf(TAG, "Package " + (oldPs.name != null ? oldPs.name : "<null>") + " contains upgrade-key-set reference to unknown key-set: " + upgradeKeySets[i] + " reverting to signatures check.");
                return false;
            }
        }
        return true;
    }

    private boolean checkUpgradeKeySetLP(PackageSetting oldPS, Package newPkg) {
        long[] upgradeKeySets = oldPS.keySetData.getUpgradeKeySets();
        KeySetManagerService ksms = this.mSettings.mKeySetManagerService;
        for (long publicKeysFromKeySetLPr : upgradeKeySets) {
            Set<PublicKey> upgradeSet = ksms.getPublicKeysFromKeySetLPr(publicKeysFromKeySetLPr);
            if (upgradeSet != null && newPkg.mSigningKeys.containsAll(upgradeSet)) {
                return true;
            }
        }
        return false;
    }

    private static void updateDigest(MessageDigest digest, File file) throws IOException {
        Throwable th;
        Throwable th2 = null;
        DigestInputStream digestStream = null;
        try {
            DigestInputStream digestStream2 = new DigestInputStream(new FileInputStream(file), digest);
            do {
                try {
                } catch (Throwable th3) {
                    th = th3;
                    digestStream = digestStream2;
                }
            } while (digestStream2.read() != -1);
            if (digestStream2 != null) {
                try {
                    digestStream2.close();
                } catch (Throwable th4) {
                    th2 = th4;
                }
            }
            if (th2 != null) {
                throw th2;
            }
        } catch (Throwable th5) {
            th = th5;
            if (digestStream != null) {
                try {
                    digestStream.close();
                } catch (Throwable th6) {
                    if (th2 == null) {
                        th2 = th6;
                    } else if (th2 != th6) {
                        th2.addSuppressed(th6);
                    }
                }
            }
            if (th2 != null) {
                throw th2;
            }
            throw th;
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:65:0x0192 A:{Splitter: B:52:0x012e, ExcHandler: java.security.NoSuchAlgorithmException (e java.security.NoSuchAlgorithmException)} */
    /* JADX WARNING: Missing block: B:67:?, code:
            r47.setError(-2, "Could not compute hash: " + r37);
     */
    /* JADX WARNING: Missing block: B:69:0x01b0, code:
            return;
     */
    /* JADX WARNING: Missing block: B:80:0x01fa, code:
            r47.removedInfo = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r41);
            r47.removedInfo.uid = r4.applicationInfo.uid;
            r47.removedInfo.removedPackage = r4.packageName;
            r47.removedInfo.isUpdate = true;
            r47.removedInfo.origUsers = r29;
     */
    /* JADX WARNING: Missing block: B:81:0x0228, code:
            if (r4.childPackages == null) goto L_0x02de;
     */
    /* JADX WARNING: Missing block: B:82:0x022a, code:
            r19 = r4.childPackages.size();
     */
    /* JADX WARNING: Missing block: B:83:0x0230, code:
            r28 = 0;
     */
    /* JADX WARNING: Missing block: B:85:0x0236, code:
            if (r28 >= r19) goto L_0x02e5;
     */
    /* JADX WARNING: Missing block: B:86:0x0238, code:
            r20 = false;
            r21 = (android.content.pm.PackageParser.Package) r4.childPackages.get(r28);
     */
    /* JADX WARNING: Missing block: B:87:0x0248, code:
            if (r47.addedChildPackages == null) goto L_0x0279;
     */
    /* JADX WARNING: Missing block: B:88:0x024a, code:
            r24 = (com.android.server.pm.PackageManagerService.PackageInstalledInfo) r47.addedChildPackages.get(r21.packageName);
     */
    /* JADX WARNING: Missing block: B:89:0x0258, code:
            if (r24 == null) goto L_0x0279;
     */
    /* JADX WARNING: Missing block: B:90:0x025a, code:
            r24.removedInfo.uid = r21.applicationInfo.uid;
            r24.removedInfo.removedPackage = r21.packageName;
            r24.removedInfo.isUpdate = true;
            r20 = true;
     */
    /* JADX WARNING: Missing block: B:91:0x0279, code:
            if (r20 != false) goto L_0x02d7;
     */
    /* JADX WARNING: Missing block: B:92:0x027b, code:
            r0 = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r41);
            r0.removedPackage = r21.packageName;
            r0.isUpdate = false;
            r0.dataRemoved = true;
            r5 = r41.mPackages;
     */
    /* JADX WARNING: Missing block: B:93:0x029a, code:
            monitor-enter(r5);
     */
    /* JADX WARNING: Missing block: B:95:?, code:
            r22 = r41.mSettings.peekPackageLPr(r21.packageName);
     */
    /* JADX WARNING: Missing block: B:96:0x02a7, code:
            if (r22 == null) goto L_0x02b4;
     */
    /* JADX WARNING: Missing block: B:97:0x02a9, code:
            r0.origUsers = r22.queryInstalledUsers(r9, true);
     */
    /* JADX WARNING: Missing block: B:98:0x02b4, code:
            monitor-exit(r5);
     */
    /* JADX WARNING: Missing block: B:100:0x02bb, code:
            if (r47.removedInfo.removedChildPackages != null) goto L_0x02c8;
     */
    /* JADX WARNING: Missing block: B:101:0x02bd, code:
            r47.removedInfo.removedChildPackages = new android.util.ArrayMap();
     */
    /* JADX WARNING: Missing block: B:102:0x02c8, code:
            r47.removedInfo.removedChildPackages.put(r21.packageName, r0);
     */
    /* JADX WARNING: Missing block: B:103:0x02d7, code:
            r28 = r28 + 1;
     */
    /* JADX WARNING: Missing block: B:107:0x02de, code:
            r19 = 0;
     */
    /* JADX WARNING: Missing block: B:111:0x02e5, code:
            r40 = isSystemApp(r4);
            r35 = isVendorApp(r4);
     */
    /* JADX WARNING: Missing block: B:112:0x02ed, code:
            if (r40 == false) goto L_0x0316;
     */
    /* JADX WARNING: Missing block: B:114:0x02f5, code:
            if ((r4.applicationInfo.privateFlags & 8) == 0) goto L_0x0311;
     */
    /* JADX WARNING: Missing block: B:115:0x02f7, code:
            r38 = true;
     */
    /* JADX WARNING: Missing block: B:116:0x02f9, code:
            r5 = r43 | 1;
     */
    /* JADX WARNING: Missing block: B:117:0x02fb, code:
            if (r38 == false) goto L_0x0314;
     */
    /* JADX WARNING: Missing block: B:118:0x02fd, code:
            r3 = 128;
     */
    /* JADX WARNING: Missing block: B:119:0x02ff, code:
            replaceSystemPackageLIF(r4, r42, r5 | r3, r44, r45, r9, r46, r47);
     */
    /* JADX WARNING: Missing block: B:120:0x0310, code:
            return;
     */
    /* JADX WARNING: Missing block: B:121:0x0311, code:
            r38 = false;
     */
    /* JADX WARNING: Missing block: B:122:0x0314, code:
            r3 = 0;
     */
    /* JADX WARNING: Missing block: B:123:0x0316, code:
            if (r35 == false) goto L_0x032d;
     */
    /* JADX WARNING: Missing block: B:124:0x0318, code:
            replaceSystemPackageLIF(r4, r42, r43, r44, r45, r9, r46, r47);
     */
    /* JADX WARNING: Missing block: B:125:0x032d, code:
            replaceNonSystemPackageLIF(r4, r42, r43, r44, r45, r9, r46, r47);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void replacePackageLIF(Package pkg, int policyFlags, int scanFlags, UserHandle user, String installerPackageName, PackageInstalledInfo res) {
        boolean isEphemeral = (policyFlags & 2048) != 0;
        String pkgName = pkg.packageName;
        synchronized (this.mPackages) {
            Package oldPackage = (Package) this.mPackages.get(pkgName);
            if (DEBUG_INSTALL) {
                Slog.d(TAG, "replacePackageLI: new=" + pkg + ", old=" + oldPackage);
            }
            boolean oldTargetsPreRelease = oldPackage.applicationInfo.targetSdkVersion == 10000;
            boolean newTargetsPreRelease = pkg.applicationInfo.targetSdkVersion == 10000;
            if (oldTargetsPreRelease && !newTargetsPreRelease && (policyFlags & 4096) == 0) {
                Slog.w(TAG, "Can't install package targeting released sdk");
                res.setReturnCode(-7);
                return;
            }
            boolean oldIsEphemeral = oldPackage.applicationInfo.isEphemeralApp();
            if (!isEphemeral || oldIsEphemeral) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                if (shouldCheckUpgradeKeySetLP(ps, scanFlags)) {
                    if (!checkUpgradeKeySetLP(ps, pkg)) {
                        res.setError(-7, "New package not signed by keys specified by upgrade-keysets: " + pkgName);
                        return;
                    }
                } else if (compareSignatures(oldPackage.mSignatures, pkg.mSignatures) != 0) {
                    res.setError(-7, "New package has a different signature: " + pkgName);
                    return;
                }
                if (oldPackage.restrictUpdateHash != null && oldPackage.isSystemApp()) {
                    try {
                        MessageDigest digest = MessageDigest.getInstance("SHA-512");
                        updateDigest(digest, new File(pkg.baseCodePath));
                        if (!ArrayUtils.isEmpty(pkg.splitCodePaths)) {
                            for (String path : pkg.splitCodePaths) {
                                updateDigest(digest, new File(path));
                            }
                        }
                        if (Arrays.equals(oldPackage.restrictUpdateHash, digest.digest())) {
                            pkg.restrictUpdateHash = oldPackage.restrictUpdateHash;
                        } else {
                            res.setError(-2, "New package fails restrict-update check: " + pkgName);
                            return;
                        }
                    } catch (NoSuchAlgorithmException e) {
                    }
                }
                String invalidPackageName = getParentOrChildPackageChangedSharedUser(oldPackage, pkg);
                if (invalidPackageName != null) {
                    res.setError(-8, "Package " + invalidPackageName + " tried to change user " + oldPackage.mSharedUserId);
                    return;
                }
                int[] allUsers = sUserManager.getUserIds();
                int[] installedUsers = ps.queryInstalledUsers(allUsers, true);
            } else {
                Slog.w(TAG, "Can't replace app with ephemeral: " + pkgName);
                res.setReturnCode(-116);
            }
        }
    }

    public List<String> getPreviousCodePaths(String packageName) {
        PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
        List<String> result = new ArrayList();
        if (!(ps == null || ps.oldCodePaths == null)) {
            result.addAll(ps.oldCodePaths);
        }
        return result;
    }

    private void replaceNonSystemPackageLIF(Package deletedPackage, Package pkg, int policyFlags, int scanFlags, UserHandle user, int[] allUsers, String installerPackageName, PackageInstalledInfo res) {
        PackageSetting ps;
        int i;
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "replaceNonSystemPackageLI: new=" + pkg + ", old=" + deletedPackage);
        }
        String pkgName = deletedPackage.packageName;
        boolean deletedPkg = true;
        boolean addedPkg = false;
        boolean killApp = (131072 & scanFlags) == 0;
        int deleteFlags = (killApp ? 0 : 8) | 1;
        long origUpdateTime = pkg.mExtras != null ? ((PackageSetting) pkg.mExtras).lastUpdateTime : 0;
        if (deletePackageLIF(pkgName, null, true, allUsers, deleteFlags, res.removedInfo, true, pkg)) {
            if (deletedPackage.isForwardLocked() || isExternal(deletedPackage)) {
                if (DEBUG_INSTALL) {
                    Slog.i(TAG, "upgrading pkg " + deletedPackage + " is ASEC-hosted -> UNAVAILABLE");
                }
                int[] uidArray = new int[1];
                uidArray[0] = deletedPackage.applicationInfo.uid;
                ArrayList pkgList = new ArrayList(1);
                pkgList.add(deletedPackage.applicationInfo.packageName);
                sendResourcesChangedBroadcast(false, true, pkgList, uidArray, null);
            }
            clearAppDataLIF(pkg, -1, 515);
            clearAppProfilesLIF(deletedPackage, -1);
            try {
                Package newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags | 64, System.currentTimeMillis(), user);
                updateSettingsLI(newPackage, installerPackageName, allUsers, res, user);
                ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                if (killApp) {
                    ps.oldCodePaths = null;
                } else {
                    if (ps.oldCodePaths == null) {
                        ps.oldCodePaths = new ArraySet();
                    }
                    Collection collection = ps.oldCodePaths;
                    String[] strArr = new String[1];
                    strArr[0] = deletedPackage.baseCodePath;
                    Collections.addAll(collection, strArr);
                    if (deletedPackage.splitCodePaths != null) {
                        Collections.addAll(ps.oldCodePaths, deletedPackage.splitCodePaths);
                    }
                }
                if (ps.childPackageNames != null) {
                    for (i = ps.childPackageNames.size() - 1; i >= 0; i--) {
                        ((PackageSetting) this.mSettings.mPackages.get((String) ps.childPackageNames.get(i))).oldCodePaths = ps.oldCodePaths;
                    }
                }
                prepareAppDataAfterInstallLIF(newPackage);
                addedPkg = true;
            } catch (PackageManagerException e) {
                res.setError("Package couldn't be installed in " + pkg.codePath, e);
            }
        } else {
            res.setError(-10, "replaceNonSystemPackageLI");
            deletedPkg = false;
        }
        if (res.returnCode != 1) {
            if (DEBUG_INSTALL) {
                Slog.d(TAG, "Install failed, rolling pack: " + pkgName);
            }
            if (addedPkg) {
                deletePackageLIF(pkgName, null, true, allUsers, deleteFlags, res.removedInfo, true, null);
            }
            if (deletedPkg) {
                if (DEBUG_INSTALL) {
                    Slog.d(TAG, "Install failed, reinstalling: " + deletedPackage);
                }
                try {
                    scanPackageTracedLI(new File(deletedPackage.codePath), ((this.mDefParseFlags | 2) | (deletedPackage.isForwardLocked() ? 16 : 0)) | (isExternal(deletedPackage) ? 32 : 0), 72, origUpdateTime, null);
                    synchronized (this.mPackages) {
                        setInstallerPackageNameLPw(deletedPackage, installerPackageName);
                        updatePermissionsLPw(deletedPackage, 1);
                        this.mSettings.writeLPr();
                    }
                    Slog.i(TAG, "Successfully restored package : " + pkgName + " after failed upgrade");
                } catch (PackageManagerException e2) {
                    Slog.e(TAG, "Failed to restore package : " + pkgName + " after failed upgrade: " + e2.getMessage());
                    return;
                }
            }
        }
        synchronized (this.mPackages) {
            ps = this.mSettings.peekPackageLPr(pkg.packageName);
            if (ps != null) {
                res.removedInfo.removedForAllUsers = this.mPackages.get(ps.name) == null;
                if (res.removedInfo.removedChildPackages != null) {
                    for (i = res.removedInfo.removedChildPackages.size() - 1; i >= 0; i--) {
                        if (res.addedChildPackages.containsKey((String) res.removedInfo.removedChildPackages.keyAt(i))) {
                            res.removedInfo.removedChildPackages.removeAt(i);
                        } else {
                            boolean z;
                            PackageRemovedInfo childInfo = (PackageRemovedInfo) res.removedInfo.removedChildPackages.valueAt(i);
                            if (this.mPackages.get(childInfo.removedPackage) == null) {
                                z = true;
                            } else {
                                z = false;
                            }
                            childInfo.removedForAllUsers = z;
                        }
                    }
                }
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:111:0x0303  */
    /* JADX WARNING: Removed duplicated region for block: B:77:0x0211  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void replaceSystemPackageLIF(Package deletedPackage, Package pkg, int policyFlags, int scanFlags, UserHandle user, int[] allUsers, String installerPackageName, PackageInstalledInfo res) {
        PackageSetting oldPkgSetting;
        boolean oldPkgInstalled;
        boolean disabledSystem;
        PackageSetting ps;
        Package newPackage;
        PackageManagerException e;
        Throwable th;
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "replaceSystemPackageLI: new=" + pkg + ", old=" + deletedPackage);
        }
        boolean isOldPkgVendorApp = isVendorApp(deletedPackage);
        String packageName = deletedPackage.packageName;
        synchronized (this.mPackages) {
            oldPkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
            oldPkgInstalled = oldPkgSetting.getInstalled(UserHandle.myUserId());
        }
        removePackageLI(deletedPackage, true);
        synchronized (this.mPackages) {
            disabledSystem = disableSystemPackageLPw(deletedPackage, pkg);
        }
        if (disabledSystem) {
            res.removedInfo.args = null;
            ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps != null && (isVendorApp(deletedPackage) || isSystemApp(deletedPackage))) {
                if (InstructionSets.getPrimaryInstructionSet(ps.pkg.applicationInfo) == null) {
                    Slog.d(TAG, "Try to remove dex file, but no primary cpu abi.");
                } else {
                    try {
                        this.mInstaller.rmdexcache(ps.pkg.baseCodePath, InstructionSets.getPrimaryInstructionSet(ps.pkg.applicationInfo));
                    } catch (InstallerException e2) {
                        Slog.d(TAG, "Try to remove dex file but failed, code path: " + ps.pkg.baseCodePath);
                    }
                }
            }
        } else {
            res.removedInfo.args = createInstallArgsForExisting(0, deletedPackage.applicationInfo.getCodePath(), deletedPackage.applicationInfo.getResourcePath(), InstructionSets.getAppDexInstructionSets(deletedPackage.applicationInfo));
        }
        clearAppDataLIF(pkg, -1, 515);
        clearAppProfilesLIF(deletedPackage, -1);
        res.setReturnCode(1);
        if (!isOldPkgVendorApp) {
            pkg.setApplicationInfoFlags(128, 128);
        }
        try {
            newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags, 0, user);
            try {
                setInstallAndUpdateTime(newPackage, deletedPackage.mExtras.firstInstallTime, System.currentTimeMillis());
                if (res.returnCode == 1) {
                    int deletedChildCount = deletedPackage.childPackages != null ? deletedPackage.childPackages.size() : 0;
                    int newChildCount = newPackage.childPackages != null ? newPackage.childPackages.size() : 0;
                    for (int i = 0; i < deletedChildCount; i++) {
                        Package deletedChildPkg = (Package) deletedPackage.childPackages.get(i);
                        boolean childPackageDeleted = true;
                        for (int j = 0; j < newChildCount; j++) {
                            if (deletedChildPkg.packageName.equals(((Package) newPackage.childPackages.get(j)).packageName)) {
                                childPackageDeleted = false;
                                break;
                            }
                        }
                        if (childPackageDeleted) {
                            ps = this.mSettings.getDisabledSystemPkgLPr(deletedChildPkg.packageName);
                            if (!(ps == null || res.removedInfo.removedChildPackages == null)) {
                                boolean z;
                                PackageRemovedInfo removedChildRes = (PackageRemovedInfo) res.removedInfo.removedChildPackages.get(deletedChildPkg.packageName);
                                removePackageDataLIF(ps, allUsers, removedChildRes, 0, false);
                                if (this.mPackages.get(ps.name) == null) {
                                    z = true;
                                } else {
                                    z = false;
                                }
                                removedChildRes.removedForAllUsers = z;
                            }
                        }
                    }
                    updateSettingsLI(newPackage, installerPackageName, allUsers, res, user);
                    prepareAppDataAfterInstallLIF(newPackage);
                }
            } catch (PackageManagerException e3) {
                e = e3;
                res.setReturnCode(-110);
                res.setError("Package couldn't be installed in " + pkg.codePath, e);
                if (res.returnCode == 1) {
                }
            }
        } catch (PackageManagerException e4) {
            e = e4;
            newPackage = null;
        }
        if (res.returnCode == 1) {
            if (newPackage != null) {
                removeInstalledPackageLI(newPackage, true);
            }
            int adjustFlags = policyFlags;
            if (isOldPkgVendorApp) {
                adjustFlags = policyFlags | 8192;
            }
            try {
                scanPackageTracedLI(deletedPackage, adjustFlags, 8, 0, user);
            } catch (PackageManagerException e5) {
                Slog.e(TAG, "Failed to restore original package: " + e5.getMessage());
            }
            synchronized (this.mPackages) {
                PackageSetting packageSetting;
                if (disabledSystem) {
                    try {
                        enableSystemPackageLPw(deletedPackage);
                    } catch (Throwable th2) {
                        th = th2;
                        packageSetting = oldPkgSetting;
                        throw th;
                    }
                }
                setInstallerPackageNameLPw(deletedPackage, installerPackageName);
                updatePermissionsLPw(deletedPackage, 1);
                if (oldPkgInstalled) {
                    packageSetting = oldPkgSetting;
                } else {
                    packageSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                    if (packageSetting != null) {
                        try {
                            packageSetting.setUserState(UserHandle.myUserId(), 0, 0, false, true, true, false, false, null, null, null, false, 0, 0);
                        } catch (Throwable th3) {
                            th = th3;
                            throw th;
                        }
                    }
                }
                this.mSettings.writeLPr();
                Slog.i(TAG, "Successfully restored package : " + deletedPackage.packageName + " after failed upgrade");
                return;
            }
        }
    }

    private String getParentOrChildPackageChangedSharedUser(Package oldPkg, Package newPkg) {
        if (!Objects.equals(oldPkg.mSharedUserId, newPkg.mSharedUserId)) {
            return newPkg.packageName;
        }
        int oldChildCount = oldPkg.childPackages != null ? oldPkg.childPackages.size() : 0;
        int newChildCount = newPkg.childPackages != null ? newPkg.childPackages.size() : 0;
        for (int i = 0; i < newChildCount; i++) {
            Package newChildPkg = (Package) newPkg.childPackages.get(i);
            for (int j = 0; j < oldChildCount; j++) {
                Package oldChildPkg = (Package) oldPkg.childPackages.get(j);
                if (newChildPkg.packageName.equals(oldChildPkg.packageName) && !Objects.equals(newChildPkg.mSharedUserId, oldChildPkg.mSharedUserId)) {
                    return newChildPkg.packageName;
                }
            }
        }
        return null;
    }

    private void removeNativeBinariesLI(PackageSetting ps) {
        if (ps != null) {
            NativeLibraryHelper.removeNativeBinariesLI(ps.legacyNativeLibraryPathString);
            int childCount = ps.childPackageNames != null ? ps.childPackageNames.size() : 0;
            for (int i = 0; i < childCount; i++) {
                PackageSetting childPs;
                synchronized (this.mPackages) {
                    childPs = this.mSettings.peekPackageLPr((String) ps.childPackageNames.get(i));
                }
                if (childPs != null) {
                    NativeLibraryHelper.removeNativeBinariesLI(childPs.legacyNativeLibraryPathString);
                }
            }
        }
    }

    private void enableSystemPackageLPw(Package pkg) {
        this.mSettings.enableSystemPackageLPw(pkg.packageName);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            this.mSettings.enableSystemPackageLPw(((Package) pkg.childPackages.get(i)).packageName);
        }
    }

    private boolean disableSystemPackageLPw(Package oldPkg, Package newPkg) {
        boolean disabled = this.mSettings.disableSystemPackageLPw(oldPkg.packageName, true);
        for (int i = 0; i < (oldPkg.childPackages != null ? oldPkg.childPackages.size() : 0); i++) {
            Package childPkg = (Package) oldPkg.childPackages.get(i);
            disabled |= this.mSettings.disableSystemPackageLPw(childPkg.packageName, newPkg.hasChildPackage(childPkg.packageName));
        }
        return disabled;
    }

    private void setInstallerPackageNameLPw(Package pkg, String installerPackageName) {
        this.mSettings.setInstallerPackageName(pkg.packageName, installerPackageName);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            this.mSettings.setInstallerPackageName(((Package) pkg.childPackages.get(i)).packageName, installerPackageName);
        }
    }

    private int[] revokeUnusedSharedUserPermissionsLPw(SharedUserSetting su, int[] allUserIds) {
        int i;
        PermissionState permissionState;
        BasePermission bp;
        ArraySet<String> usedPermissions = new ArraySet();
        int packageCount = su.packages.size();
        for (i = 0; i < packageCount; i++) {
            PackageSetting ps = (PackageSetting) su.packages.valueAt(i);
            if (ps.pkg != null) {
                int requestedPermCount = ps.pkg.requestedPermissions.size();
                for (int j = 0; j < requestedPermCount; j++) {
                    String permission = (String) ps.pkg.requestedPermissions.get(j);
                    if (((BasePermission) this.mSettings.mPermissions.get(permission)) != null) {
                        usedPermissions.add(permission);
                    }
                }
            }
        }
        PermissionsState permissionsState = su.getPermissionsState();
        List<PermissionState> installPermStates = permissionsState.getInstallPermissionStates();
        for (i = installPermStates.size() - 1; i >= 0; i--) {
            permissionState = (PermissionState) installPermStates.get(i);
            if (!usedPermissions.contains(permissionState.getName())) {
                bp = (BasePermission) this.mSettings.mPermissions.get(permissionState.getName());
                if (bp != null) {
                    permissionsState.revokeInstallPermission(bp);
                    permissionsState.updatePermissionFlags(bp, -1, 255, 0);
                }
            }
        }
        int[] runtimePermissionChangedUserIds = EmptyArray.INT;
        for (int userId : allUserIds) {
            List<PermissionState> runtimePermStates = permissionsState.getRuntimePermissionStates(userId);
            for (i = runtimePermStates.size() - 1; i >= 0; i--) {
                permissionState = (PermissionState) runtimePermStates.get(i);
                if (!usedPermissions.contains(permissionState.getName())) {
                    bp = (BasePermission) this.mSettings.mPermissions.get(permissionState.getName());
                    if (bp != null) {
                        permissionsState.revokeRuntimePermission(bp, userId);
                        permissionsState.updatePermissionFlags(bp, userId, 255, 0);
                        runtimePermissionChangedUserIds = ArrayUtils.appendInt(runtimePermissionChangedUserIds, userId);
                    }
                }
            }
        }
        return runtimePermissionChangedUserIds;
    }

    private void updateSettingsLI(Package newPackage, String installerPackageName, int[] allUsers, PackageInstalledInfo res, UserHandle user) {
        updateSettingsInternalLI(newPackage, installerPackageName, allUsers, res.origUsers, res, user);
        int childCount = newPackage.childPackages != null ? newPackage.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            Package childPackage = (Package) newPackage.childPackages.get(i);
            PackageInstalledInfo childRes = (PackageInstalledInfo) res.addedChildPackages.get(childPackage.packageName);
            updateSettingsInternalLI(childPackage, installerPackageName, allUsers, childRes.origUsers, childRes, user);
        }
    }

    private void updateSettingsInternalLI(Package newPackage, String installerPackageName, int[] allUsers, int[] installedForUsers, PackageInstalledInfo res, UserHandle user) {
        Trace.traceBegin(1048576, "updateSettings");
        String pkgName = newPackage.packageName;
        synchronized (this.mPackages) {
            this.mSettings.setInstallStatus(pkgName, 0);
            Trace.traceBegin(1048576, "writeSettings");
            this.mSettings.writeLPr();
            Trace.traceEnd(1048576);
        }
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "New package installed in " + newPackage.codePath);
        }
        synchronized (this.mPackages) {
            updatePermissionsLPw(newPackage.packageName, newPackage, (newPackage.permissions.size() > 0 ? 1 : 0) | 2);
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
            int userId = user.getIdentifier();
            if (ps != null) {
                if (isSystemApp(newPackage)) {
                    if (DEBUG_INSTALL) {
                        Slog.d(TAG, "Implicitly enabling system package on upgrade: " + pkgName);
                    }
                    if (res.origUsers != null) {
                        for (int origUserId : res.origUsers) {
                            if (userId == -1 || userId == origUserId) {
                                ps.setEnabled(0, origUserId, installerPackageName);
                            }
                        }
                    }
                    if (!(allUsers == null || installedForUsers == null)) {
                        for (int currentUserId : allUsers) {
                            boolean installed = ArrayUtils.contains(installedForUsers, currentUserId);
                            if (DEBUG_INSTALL) {
                                Slog.d(TAG, "    user " + currentUserId + " => " + installed);
                            }
                            ps.setInstalled(installed, currentUserId);
                        }
                    }
                }
                if (userId != -1) {
                    ps.setInstalled(true, userId);
                    ps.setEnabled(0, userId, installerPackageName);
                }
            }
            res.name = pkgName;
            res.uid = newPackage.applicationInfo.uid;
            res.pkg = newPackage;
            this.mSettings.setInstallStatus(pkgName, 1);
            this.mSettings.setInstallerPackageName(pkgName, installerPackageName);
            res.setReturnCode(1);
            Trace.traceBegin(1048576, "writeSettings");
            this.mSettings.writeLPr();
            Trace.traceEnd(1048576);
        }
        Trace.traceEnd(1048576);
    }

    private void installPackageTracedLI(InstallArgs args, PackageInstalledInfo res) {
        try {
            Trace.traceBegin(1048576, "installPackage");
            installPackageLI(args, res);
        } finally {
            Trace.traceEnd(1048576);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:225:0x0695 A:{Catch:{ PackageManagerException -> 0x072b, all -> 0x04cf }} */
    /* JADX WARNING: Removed duplicated region for block: B:245:0x0794 A:{Catch:{ PackageManagerException -> 0x072b, all -> 0x04cf }} */
    /* JADX WARNING: Removed duplicated region for block: B:227:0x06d3 A:{Catch:{ PackageManagerException -> 0x072b, all -> 0x04cf }} */
    /* JADX WARNING: Removed duplicated region for block: B:348:0x0a0d  */
    /* JADX WARNING: Removed duplicated region for block: B:327:0x09d8  */
    /* JADX WARNING: Removed duplicated region for block: B:360:0x0a72 A:{SYNTHETIC, Splitter: B:360:0x0a72} */
    /* JADX WARNING: Missing block: B:254:0x07f7, code:
            if (r46 != false) goto L_0x07fb;
     */
    /* JADX WARNING: Missing block: B:255:0x07f9, code:
            if (r48 == false) goto L_0x084c;
     */
    /* JADX WARNING: Missing block: B:256:0x07fb, code:
            if (r36 == false) goto L_0x083f;
     */
    /* JADX WARNING: Missing block: B:258:0x0815, code:
            if (com.android.server.pm.OppoPackageManagerHelper.IsTrustApkList(((com.android.server.pm.PackageSetting) r52.mSettings.mPackages.get(r39)).pkg.packageName) == false) goto L_0x082b;
     */
    /* JADX WARNING: Missing block: B:259:0x0817, code:
            android.util.Slog.w(TAG, "install update to system app on sdcard for oppo apk");
            r54.setError(-19, "Cannot install updates to system apps on sdcard");
     */
    /* JADX WARNING: Missing block: B:260:0x082a, code:
            return;
     */
    /* JADX WARNING: Missing block: B:261:0x082b, code:
            android.util.Slog.w(TAG, "Cannot install updates to system apps on sdcard");
            r54.setError(-19, "Cannot install updates to system apps on sdcard");
     */
    /* JADX WARNING: Missing block: B:262:0x083f, code:
            if (r23 == false) goto L_0x084c;
     */
    /* JADX WARNING: Missing block: B:263:0x0841, code:
            r54.setError(-116, "Cannot update a system app with an ephemeral app");
     */
    /* JADX WARNING: Missing block: B:264:0x084b, code:
            return;
     */
    /* JADX WARNING: Missing block: B:266:0x0850, code:
            if (r53.move == null) goto L_0x08b8;
     */
    /* JADX WARNING: Missing block: B:267:0x0852, code:
            r44 = (r44 | 2) | 8192;
            r6 = r52.mPackages;
     */
    /* JADX WARNING: Missing block: B:268:0x085e, code:
            monitor-enter(r6);
     */
    /* JADX WARNING: Missing block: B:270:?, code:
            r42 = (com.android.server.pm.PackageSetting) r52.mSettings.mPackages.get(r39);
     */
    /* JADX WARNING: Missing block: B:271:0x086d, code:
            if (r42 != null) goto L_0x088c;
     */
    /* JADX WARNING: Missing block: B:272:0x086f, code:
            r54.setError(-110, "Missing settings for moved package " + r39);
     */
    /* JADX WARNING: Missing block: B:273:0x088c, code:
            r5.applicationInfo.primaryCpuAbi = r42.primaryCpuAbiString;
            r5.applicationInfo.secondaryCpuAbi = r42.secondaryCpuAbiString;
     */
    /* JADX WARNING: Missing block: B:274:0x089c, code:
            monitor-exit(r6);
     */
    /* JADX WARNING: Missing block: B:279:0x08b5, code:
            r4 = move-exception;
     */
    /* JADX WARNING: Missing block: B:281:0x08b7, code:
            throw r4;
     */
    /* JADX WARNING: Missing block: B:282:0x08b8, code:
            if (r25 != false) goto L_0x089d;
     */
    /* JADX WARNING: Missing block: B:284:0x08c0, code:
            if (r5.applicationInfo.isExternalAsec() != false) goto L_0x089d;
     */
    /* JADX WARNING: Missing block: B:285:0x08c2, code:
            r44 = r44 | 2;
     */
    /* JADX WARNING: Missing block: B:288:0x08ca, code:
            if (android.text.TextUtils.isEmpty(r5.cpuAbiOverride) == false) goto L_0x095d;
     */
    /* JADX WARNING: Missing block: B:289:0x08cc, code:
            r13 = r53.abiOverride;
     */
    /* JADX WARNING: Missing block: B:290:0x08d0, code:
            derivePackageAbi(r5, new java.io.File(r5.codePath), r13, true);
     */
    /* JADX WARNING: Missing block: B:291:0x08dd, code:
            r6 = r52.mPackages;
     */
    /* JADX WARNING: Missing block: B:292:0x08e1, code:
            monitor-enter(r6);
     */
    /* JADX WARNING: Missing block: B:295:?, code:
            updateSharedLibrariesLPw(r5, null);
     */
    /* JADX WARNING: Missing block: B:308:?, code:
            r13 = r5.cpuAbiOverride;
     */
    /* JADX WARNING: Missing block: B:309:0x0961, code:
            r40 = move-exception;
     */
    /* JADX WARNING: Missing block: B:310:0x0962, code:
            android.util.Slog.e(TAG, "Error deriving application ABI", r40);
            r54.setError(-110, "Error deriving application ABI");
     */
    /* JADX WARNING: Missing block: B:311:0x0977, code:
            return;
     */
    /* JADX WARNING: Missing block: B:312:0x0978, code:
            r22 = move-exception;
     */
    /* JADX WARNING: Missing block: B:314:?, code:
            android.util.Slog.e(TAG, "updateSharedLibrariesLPw failed: " + r22.getMessage());
     */
    /* JADX WARNING: Missing block: B:315:0x0999, code:
            r4 = move-exception;
     */
    /* JADX WARNING: Missing block: B:317:0x099b, code:
            throw r4;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void installPackageLI(InstallArgs args, PackageInstalledInfo res) {
        int parseFlags;
        Package pkg;
        int childCount;
        int i;
        Package childPkg;
        PackageInstalledInfo childRes;
        PackageSetting childPs;
        Throwable th;
        String pkgName;
        String oldCodePath;
        PackageSetting ps;
        Throwable th2;
        int installFlags = adjustBackgroundInstallerParameter(args.installerPackageName, args.installFlags);
        String installerPackageName = args.installerPackageName;
        String volumeUuid = args.volumeUuid;
        File file = new File(args.getCodePath());
        boolean forwardLocked = (installFlags & 1) != 0;
        boolean onExternal = (installFlags & 8) == 0 ? args.volumeUuid != null : true;
        boolean ephemeral = (installFlags & 2048) != 0;
        boolean forceSdk = (installFlags & 8192) != 0;
        boolean replace = false;
        int scanFlags = 24;
        if (args.move != null) {
            scanFlags = 16408;
        }
        if ((installFlags & 4096) != 0) {
            scanFlags |= 131072;
        }
        res.setReturnCode(1);
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "installPackageLI: path=" + file);
        }
        if (ephemeral && (forwardLocked || onExternal)) {
            Slog.i(TAG, "Incompatible ephemeral install; fwdLocked=" + forwardLocked + " external=" + onExternal);
            res.setReturnCode(-116);
            return;
        }
        int i2;
        int i3 = ((((this.mDefParseFlags | 2) | 1024) | (forwardLocked ? 16 : 0)) | (onExternal ? 32 : 0)) | (ephemeral ? 2048 : 0);
        if (forceSdk) {
            i2 = 4096;
        } else {
            i2 = 0;
        }
        parseFlags = i3 | i2;
        PackageParser pp = new PackageParser();
        pp.setSeparateProcesses(this.mSeparateProcesses);
        pp.setDisplayMetrics(this.mMetrics);
        Trace.traceBegin(1048576, "parsePackage");
        try {
            if (DEBUG_INSTALL) {
                Slog.i(TAG, "Start parsing apk: " + installerPackageName);
            }
            pkg = pp.parsePackage(file, parseFlags);
            if (DEBUG_INSTALL) {
                Slog.i(TAG, "Parsing done for apk: " + installerPackageName);
            }
            if (hasSystemFeature("oppo.customize.function.checkpermission", 0)) {
                pp.verifyEMMApkIfNeed(this.mContext, pkg);
            }
            Trace.traceEnd(1048576);
            this.mCompatibilityHelper.customizePackageIfNeeded(pkg);
            if (pkg.childPackages != null) {
                synchronized (this.mPackages) {
                    try {
                        childCount = pkg.childPackages.size();
                        for (i = 0; i < childCount; i++) {
                            childPkg = (Package) pkg.childPackages.get(i);
                            childRes = new PackageInstalledInfo();
                            childRes.setReturnCode(1);
                            childRes.pkg = childPkg;
                            childRes.name = childPkg.packageName;
                            childPs = this.mSettings.peekPackageLPr(childPkg.packageName);
                            if (childPs != null) {
                                childRes.origUsers = childPs.queryInstalledUsers(sUserManager.getUserIds(), true);
                            }
                            if (this.mPackages.containsKey(childPkg.packageName)) {
                                childRes.removedInfo = new PackageRemovedInfo();
                                childRes.removedInfo.removedPackage = childPkg.packageName;
                            }
                            if (res.addedChildPackages == null) {
                                res.addedChildPackages = new ArrayMap();
                            }
                            res.addedChildPackages.put(childPkg.packageName, childRes);
                        }
                    } catch (Throwable th3) {
                        throw th3;
                    }
                }
            }
            if (TextUtils.isEmpty(pkg.cpuAbiOverride)) {
                pkg.cpuAbiOverride = args.abiOverride;
            }
            pkgName = pkg.packageName;
            res.name = pkgName;
            OppoFontUtils.deleteFontLink(pkgName);
            if ("true".equals(SystemProperties.get("persist.version.confidential"))) {
                if (!getImeiNumber(this.mContext)) {
                    Slog.d(TAG, "install fail because not write IMEI ");
                    Toast.makeText(this.mContext, "Please write IMEI number!!!", 0).show();
                    res.returnCode = -15;
                    return;
                } else if (inCptWhiteList(CompatibilityHelper.RUN_SCORE_BLACK_LIST, pkgName) || pkgName.toLowerCase().contains("bench")) {
                    Slog.d(TAG, "it is run score packages=" + pkgName);
                    res.setError(-15, "installPackageLI");
                    return;
                }
            }
            if (hasSystemFeature("oppo.customize.function.control_app_install", 0) && SystemProperties.getBoolean("persist.sys.enable_black_list", false)) {
                if (this.mSettings.getInstalledAppBlackList().contains(pkgName)) {
                    Slog.d(TAG, "app is in blacklist, " + pkgName);
                    res.setError(-15, "installPackageLI");
                    return;
                }
                Slog.d(TAG, "app is not in blacklist, " + pkgName);
            }
            if (hasSystemFeature("oppo.customize.function.control_app_install", 0) && SystemProperties.getBoolean("persist.sys.enable_white_list", false)) {
                if (this.mSettings.getInstalledAppWhiteList().contains(pkgName) || checkWhiteList(pkgName)) {
                    Slog.d(TAG, "app is in whitelist, " + pkgName);
                } else {
                    Slog.d(TAG, "app is not in whitelist, " + pkgName);
                    res.setError(-15, "installPackageLI");
                    return;
                }
            }
            if ((pkg.applicationInfo.flags & 256) == 0 || (installFlags & 4) != 0) {
                try {
                    if (args.certificates != null) {
                        try {
                            PackageParser.populateCertificates(pkg, args.certificates);
                        } catch (PackageParserException e) {
                            PackageParser.collectCertificates(pkg, parseFlags);
                        }
                    } else {
                        PackageParser.collectCertificates(pkg, parseFlags);
                    }
                    oldCodePath = null;
                    boolean systemApp = false;
                    boolean vendorApp = false;
                    synchronized (this.mPackages) {
                        if ((installFlags & 2) != 0) {
                            String oldName = (String) this.mSettings.mRenamedPackages.get(pkgName);
                            if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(oldName) && this.mPackages.containsKey(oldName)) {
                                pkg.setPackageName(oldName);
                                pkgName = pkg.packageName;
                                replace = true;
                                if (DEBUG_INSTALL) {
                                    Slog.d(TAG, "Replacing existing renamed package: oldName=" + oldName + " pkgName=" + pkgName);
                                }
                            } else {
                                try {
                                    if (this.mPackages.containsKey(pkgName)) {
                                        replace = true;
                                        if (DEBUG_INSTALL) {
                                            Slog.d(TAG, "Replace existing pacakge: " + pkgName);
                                        }
                                    }
                                } catch (PackageManagerException e2) {
                                    res.setError(e2.error, e2.getMessage());
                                    return;
                                } catch (Throwable th32) {
                                    throw th32;
                                }
                            }
                            if (pkg.parentPackage != null) {
                                res.setError(-106, "Package " + pkg.packageName + " is child of package " + pkg.parentPackage.parentPackage + ". Child packages " + "can be updated only through the parent package.");
                                return;
                            } else if (replace) {
                                Package oldPackage = (Package) this.mPackages.get(pkgName);
                                int oldTargetSdk = oldPackage.applicationInfo.targetSdkVersion;
                                int newTargetSdk = pkg.applicationInfo.targetSdkVersion;
                                if (oldTargetSdk > 22 && newTargetSdk <= 22) {
                                    res.setError(-26, "Package " + pkg.packageName + " new target SDK " + newTargetSdk + " doesn't support runtime permissions but the old" + " target SDK " + oldTargetSdk + " does.");
                                    return;
                                } else if (oldPackage.parentPackage != null) {
                                    res.setError(-106, "Package " + pkg.packageName + " is child of package " + oldPackage.parentPackage + ". Child packages " + "can be updated only through the parent package.");
                                    return;
                                }
                            }
                        }
                        ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                        if (ps != null) {
                            if (DEBUG_INSTALL) {
                                Slog.d(TAG, "Existing package: " + ps);
                            }
                            if (!shouldCheckUpgradeKeySetLP(ps, scanFlags)) {
                                verifySignaturesLP(ps, pkg);
                            } else if (!checkUpgradeKeySetLP(ps, pkg)) {
                                res.setError(-7, "Package " + pkg.packageName + " upgrade keys do not match the " + "previously installed version");
                                return;
                            }
                            oldCodePath = ((PackageSetting) this.mSettings.mPackages.get(pkgName)).codePathString;
                            if (!(ps.pkg == null || ps.pkg.applicationInfo == null)) {
                                systemApp = (ps.pkg.applicationInfo.flags & 1) != 0;
                                vendorApp = isVendorApp(ps.pkg);
                            }
                            res.origUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), true);
                        }
                        for (i = pkg.permissions.size() - 1; i >= 0; i--) {
                            Permission perm = (Permission) pkg.permissions.get(i);
                            BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(perm.info.name);
                            if (bp != null) {
                                boolean sigsOk;
                                if (bp.sourcePackage.equals(pkg.packageName) && (bp.packageSetting instanceof PackageSetting)) {
                                    if (shouldCheckUpgradeKeySetLP((PackageSetting) bp.packageSetting, scanFlags)) {
                                        sigsOk = checkUpgradeKeySetLP((PackageSetting) bp.packageSetting, pkg);
                                        if (!sigsOk) {
                                            sigsOk = true;
                                            Slog.w(TAG, "INSTALL_FAILED_DUPLICATE_PERMISSION : Package " + pkg.packageName + " attempting to redeclare permission " + perm.info.name + " already owned by " + bp.sourcePackage);
                                        }
                                        if (sigsOk) {
                                            if (bp.sourcePackage.equals(PLATFORM_PACKAGE_NAME)) {
                                                Slog.w(TAG, "Package " + pkg.packageName + " attempting to redeclare system permission " + perm.info.name + "; ignoring new declaration");
                                                pkg.permissions.remove(i);
                                            } else {
                                                res.setError(-112, "Package " + pkg.packageName + " attempting to redeclare permission " + perm.info.name + " already owned by " + bp.sourcePackage);
                                                res.origPermission = perm.info.name;
                                                res.origPackage = bp.sourcePackage;
                                                return;
                                            }
                                        } else if (!(PLATFORM_PACKAGE_NAME.equals(pkg.packageName) || (perm.info.protectionLevel & 15) != 1 || bp == null || bp.isRuntime())) {
                                            Slog.w(TAG, "Package " + pkg.packageName + " trying to change a " + "non-runtime permission " + perm.info.name + " to runtime; keeping old protection level");
                                            perm.info.protectionLevel = bp.protectionLevel;
                                        }
                                    }
                                }
                                sigsOk = compareSignatures(bp.packageSetting.signatures.mSignatures, pkg.mSignatures) == 0;
                                if (sigsOk) {
                                }
                                if (sigsOk) {
                                }
                            }
                        }
                    }
                } catch (PackageParserException e3) {
                    res.setError("Failed collect during installPackageLI", e3);
                    return;
                }
            }
            res.setError(-15, "installPackageLI");
            return;
        } catch (PackageParserException e32) {
            res.setError("Failed parse during installPackageLI", e32);
            Trace.traceEnd(1048576);
            return;
        } catch (Throwable th322) {
            Trace.traceEnd(1048576);
            throw th322;
        }
        Throwable th4;
        PackageFreezer packageFreezer;
        if (th4 == null) {
            throw th4;
        }
        if (DEBUG_INSTALL) {
            Slog.i(TAG, "Installation done for package: " + installerPackageName);
        }
        if (LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get("ro.globalpq.support"))) {
            Slog.i(TAG, "UpdateAPCategoryInfo for package: " + pkg.packageName);
            IBinder b = ServiceManager.getService("appdetection");
            if (b != null) {
                try {
                    IAppDetectionService.Stub.asInterface(b).updateAPCategoryInfo(pkg.packageName);
                } catch (RemoteException e4) {
                    e4.printStackTrace();
                }
            }
        }
        synchronized (this.mPackages) {
            try {
                ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                if (ps != null) {
                    res.newUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), true);
                }
                childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
                for (i = 0; i < childCount; i++) {
                    childPkg = (Package) pkg.childPackages.get(i);
                    childRes = (PackageInstalledInfo) res.addedChildPackages.get(childPkg.packageName);
                    childPs = this.mSettings.peekPackageLPr(childPkg.packageName);
                    if (childPs != null) {
                        childRes.newUsers = childPs.queryInstalledUsers(sUserManager.getUserIds(), true);
                    }
                }
            } catch (Throwable th3222) {
                throw th3222;
            }
        }
        if (packageFreezer != null) {
            try {
                packageFreezer.close();
            } catch (Throwable th5) {
                if (th2 == null) {
                    th2 = th5;
                } else if (th2 != th5) {
                    th2.addSuppressed(th5);
                }
            }
        }
        if (th2 != null) {
            throw th2;
        }
        throw th3222;
        if ((Integer.MIN_VALUE & installFlags) != 0) {
            Slog.w(TAG, "pms install app from background, set 4 thread");
            SystemProperties.set("oppo.dex.thread.number", "4");
        }
        if ((536870912 & installFlags) != 0) {
            Slog.w(TAG, "pms install app midle as midle speed");
            SystemProperties.set("oppo.dex.thread.number", "2");
        }
        if ((1073741824 & installFlags) != 0) {
            Slog.w(TAG, "pms install app  as slow speed");
            SystemProperties.set("oppo.dex.thread.number", LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON);
        }
        Trace.traceBegin(1048576, "dexopt");
        this.mPackageDexOptimizer.performDexOpt(pkg, pkg.usesLibraryFiles, null, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(2), getOrCreateCompilerPackageStats(pkg));
        Trace.traceEnd(1048576);
        BackgroundDexOptService.notifyPackageChanged(pkg.packageName);
        if (args.doRename(res.returnCode, pkg, oldCodePath)) {
            startIntentFilterVerifications(args.user.getIdentifier(), replace, pkg);
            th4 = null;
            packageFreezer = null;
            try {
                packageFreezer = freezePackageForInstall(pkgName, installFlags, "installPackageLI");
                if (replace) {
                    replacePackageLIF(pkg, parseFlags, scanFlags | 2048, args.user, installerPackageName, res);
                } else {
                    installNewPackageLIF(pkg, parseFlags, scanFlags | 1024, args.user, installerPackageName, volumeUuid, res);
                }
                if (packageFreezer != null) {
                    try {
                        packageFreezer.close();
                    } catch (Throwable th6) {
                        th4 = th6;
                    }
                }
                if (th4 == null) {
                }
            } catch (Throwable th22) {
                Throwable th7 = th22;
                th22 = th3222;
                th3222 = th7;
            }
        } else {
            res.setError(-4, "Failed rename");
            return;
        }
        synchronized (this.mPackages) {
        }
    }

    private void startIntentFilterVerifications(int userId, boolean replacing, Package pkg) {
        if (this.mIntentFilterVerifierComponent == null) {
            Slog.w(TAG, "No IntentFilter verification will not be done as there is no IntentFilterVerifier available!");
            return;
        }
        int i;
        String packageName = this.mIntentFilterVerifierComponent.getPackageName();
        if (userId == -1) {
            i = 0;
        } else {
            i = userId;
        }
        int verifierUid = getPackageUid(packageName, 268435456, i);
        Message msg = this.mHandler.obtainMessage(17);
        msg.obj = new IFVerificationParams(pkg, replacing, userId, verifierUid);
        this.mHandler.sendMessage(msg);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i2 = 0; i2 < childCount; i2++) {
            Package childPkg = (Package) pkg.childPackages.get(i2);
            msg = this.mHandler.obtainMessage(17);
            msg.obj = new IFVerificationParams(childPkg, replacing, userId, verifierUid);
            this.mHandler.sendMessage(msg);
        }
    }

    /* JADX WARNING: Missing block: B:25:0x00a2, code:
            return;
     */
    /* JADX WARNING: Missing block: B:59:0x0159, code:
            if (r9 <= 0) goto L_0x01a8;
     */
    /* JADX WARNING: Missing block: B:61:0x015d, code:
            if (DEBUG_DOMAIN_VERIFICATION == false) goto L_0x0197;
     */
    /* JADX WARNING: Missing block: B:62:0x015f, code:
            r2 = TAG;
            r3 = new java.lang.StringBuilder().append("Starting ").append(r9).append(" IntentFilter verification");
     */
    /* JADX WARNING: Missing block: B:63:0x017a, code:
            if (r9 <= 1) goto L_0x01a4;
     */
    /* JADX WARNING: Missing block: B:64:0x017c, code:
            r1 = "s";
     */
    /* JADX WARNING: Missing block: B:65:0x017f, code:
            android.util.Slog.d(r2, r3.append(r1).append(" for userId:").append(r17).toString());
     */
    /* JADX WARNING: Missing block: B:66:0x0197, code:
            r16.mIntentFilterVerifier.startVerifications(r17);
     */
    /* JADX WARNING: Missing block: B:67:0x01a0, code:
            return;
     */
    /* JADX WARNING: Missing block: B:71:0x01a4, code:
            r1 = com.android.server.oppo.IElsaManager.EMPTY_PACKAGE;
     */
    /* JADX WARNING: Missing block: B:73:0x01aa, code:
            if (DEBUG_DOMAIN_VERIFICATION == false) goto L_0x01a0;
     */
    /* JADX WARNING: Missing block: B:74:0x01ac, code:
            android.util.Slog.d(TAG, "No filters or not all autoVerify for " + r6);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void verifyIntentFiltersIfNeeded(int userId, int verifierUid, boolean replacing, Package pkg) {
        int size = pkg.activities.size();
        if (size == 0) {
            if (DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(TAG, "No activity, so no need to verify any IntentFilter!");
            }
        } else if (hasDomainURLs(pkg)) {
            if (DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(TAG, "Checking for userId:" + userId + " if any IntentFilter from the " + size + " Activities needs verification ...");
            }
            int count = 0;
            String packageName = pkg.packageName;
            synchronized (this.mPackages) {
                if (!replacing) {
                    IntentFilterVerificationInfo ivi = this.mSettings.getIntentFilterVerificationLPr(packageName);
                    if (ivi != null) {
                        if (DEBUG_DOMAIN_VERIFICATION) {
                            Slog.i(TAG, "Package " + packageName + " already verified: status=" + ivi.getStatusString());
                        }
                    }
                }
                boolean needToVerify = false;
                for (Activity a : pkg.activities) {
                    for (ActivityIntentInfo filter : a.intents) {
                        if (filter.needsVerification() && needsNetworkVerificationLPr(filter)) {
                            if (DEBUG_DOMAIN_VERIFICATION) {
                                Slog.d(TAG, "Intent filter needs verification, so processing all filters");
                            }
                            needToVerify = true;
                        }
                    }
                }
                if (needToVerify) {
                    int verificationId = this.mIntentFilterVerificationToken;
                    this.mIntentFilterVerificationToken = verificationId + 1;
                    for (Activity a2 : pkg.activities) {
                        for (ActivityIntentInfo filter2 : a2.intents) {
                            if (filter2.handlesWebUris(true) && needsNetworkVerificationLPr(filter2)) {
                                if (DEBUG_DOMAIN_VERIFICATION) {
                                    Slog.d(TAG, "Verification needed for IntentFilter:" + filter2.toString());
                                }
                                this.mIntentFilterVerifier.addOneIntentFilterVerification(verifierUid, userId, verificationId, filter2, packageName);
                                count++;
                            }
                        }
                    }
                }
            }
        } else {
            if (DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(TAG, "No domain URLs, so no need to verify any IntentFilter!");
            }
        }
    }

    private boolean needsNetworkVerificationLPr(ActivityIntentInfo filter) {
        IntentFilterVerificationInfo ivi = this.mSettings.getIntentFilterVerificationLPr(filter.activity.getComponentName().getPackageName());
        if (ivi == null) {
            return true;
        }
        switch (ivi.getStatus()) {
            case 0:
            case 1:
                return true;
            default:
                return false;
        }
    }

    private static boolean isMultiArch(ApplicationInfo info) {
        return (info.flags & Integer.MIN_VALUE) != 0;
    }

    private static boolean isExternal(Package pkg) {
        return (pkg.applicationInfo.flags & 262144) != 0;
    }

    private static boolean isExternal(PackageSetting ps) {
        return (ps.pkgFlags & 262144) != 0;
    }

    private static boolean isEphemeral(Package pkg) {
        return pkg.applicationInfo.isEphemeralApp();
    }

    private static boolean isEphemeral(PackageSetting ps) {
        return ps.pkg != null ? isEphemeral(ps.pkg) : false;
    }

    private static boolean isSystemApp(Package pkg) {
        return (pkg.applicationInfo.flags & 1) != 0;
    }

    private static boolean isPrivilegedApp(Package pkg) {
        return (pkg.applicationInfo.privateFlags & 8) != 0;
    }

    private static boolean hasDomainURLs(Package pkg) {
        return (pkg.applicationInfo.privateFlags & 16) != 0;
    }

    private static boolean isSystemApp(PackageSetting ps) {
        return (ps.pkgFlags & 1) != 0;
    }

    private static boolean isUpdatedSystemApp(PackageSetting ps) {
        return (ps.pkgFlags & 128) != 0;
    }

    static boolean locationIsOperator(File path) {
        if (path != null) {
            try {
                return path.getCanonicalPath().contains("vendor/operator/app");
            } catch (IOException e) {
                Slog.e(TAG, "Unable to access code path " + path);
            }
        }
        return false;
    }

    static boolean isVendorApp(PackageSetting ps) {
        return (ps.pkgFlagsEx & 1) != 0;
    }

    static boolean isVendorApp(Package pkg) {
        return (pkg.applicationInfo.flagsEx & 1) != 0;
    }

    static boolean isVendorApp(ApplicationInfo info) {
        return (info.flagsEx & 1) != 0;
    }

    private int packageFlagsToInstallFlags(PackageSetting ps) {
        int installFlags = 0;
        if (isEphemeral(ps)) {
            installFlags = 2048;
        }
        if (isExternal(ps) && TextUtils.isEmpty(ps.volumeUuid)) {
            installFlags |= 8;
        }
        if (ps.isForwardLocked()) {
            return installFlags | 1;
        }
        return installFlags;
    }

    private String getVolumeUuidForPackage(Package pkg) {
        if (!isExternal(pkg)) {
            return StorageManager.UUID_PRIVATE_INTERNAL;
        }
        if (TextUtils.isEmpty(pkg.volumeUuid)) {
            return "primary_physical";
        }
        return pkg.volumeUuid;
    }

    private VersionInfo getSettingsVersionForPackage(Package pkg) {
        if (!isExternal(pkg)) {
            return this.mSettings.getInternalVersion();
        }
        if (TextUtils.isEmpty(pkg.volumeUuid)) {
            return this.mSettings.getExternalVersion();
        }
        return this.mSettings.findOrCreateVersion(pkg.volumeUuid);
    }

    private void deleteTempPackageFiles() {
        for (File file : this.mDrmAppPrivateInstallDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.startsWith("vmdl") ? name.endsWith(".tmp") : false;
            }
        })) {
            file.delete();
        }
    }

    public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int userId, int flags) {
        deletePackage(packageName, new LegacyPackageDeleteObserver(observer).getBinder(), userId, flags);
    }

    /* JADX WARNING: Removed duplicated region for block: B:33:0x00c8  */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x004a  */
    /* JADX WARNING: Removed duplicated region for block: B:34:0x00ca  */
    /* JADX WARNING: Removed duplicated region for block: B:16:0x004d  */
    /* JADX WARNING: Removed duplicated region for block: B:36:0x00d3  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x008d  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deletePackage(String packageName, IPackageDeleteObserver2 observer, int userId, int deleteFlags) {
        final boolean deleteAllUsers;
        final int uid = Binder.getCallingUid();
        String[] pkgNames = getPackagesForUid(uid);
        if (hasSystemFeature("oppo.customize.function.silentinstall", 0) && pkgNames != null && pkgNames.length == 1) {
            if (checkWhiteList(pkgNames[0])) {
                Slog.d(TAG, "PMS, no check permission for customize");
                Preconditions.checkNotNull(packageName);
                Preconditions.checkNotNull(observer);
                if (!isOrphaned(packageName) || isCallerAllowedToSilentlyUninstall(uid, packageName)) {
                    int[] users;
                    deleteAllUsers = (deleteFlags & 2) == 0;
                    if (deleteAllUsers) {
                        users = new int[1];
                        users[0] = userId;
                    } else {
                        users = sUserManager.getUserIds();
                    }
                    if (UserHandle.getUserId(uid) != userId || (deleteAllUsers && users.length > 1)) {
                        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "deletePackage for user " + userId);
                    }
                    if (getDisallowUninstallApps().contains(packageName)) {
                        if (isUserRestricted(userId, "no_uninstall_apps")) {
                            try {
                                observer.onPackageDeleted(packageName, -3, null);
                            } catch (RemoteException e) {
                            }
                            return;
                        } else if (prohibitChildInstallation(userId, false)) {
                            try {
                                observer.onPackageDeleted(packageName, -3, null);
                            } catch (RemoteException e2) {
                            }
                            return;
                        } else {
                            String tmpStr;
                            String[] packageNames = getPackagesForUid(uid);
                            if (packageNames == null || 1 != packageNames.length) {
                                tmpStr = "pkg-" + getNameForUid(uid);
                            } else {
                                tmpStr = packageNames[0];
                            }
                            final String delCallerPkg = tmpStr;
                            if (deleteAllUsers || !getBlockUninstallForUser(packageName, userId)) {
                                if (DEBUG_REMOVE) {
                                    Slog.d(TAG, "deletePackageAsUser: pkg=" + packageName + " user=" + userId + " deleteAllUsers: " + deleteAllUsers);
                                }
                                final String str = packageName;
                                final IPackageDeleteObserver2 iPackageDeleteObserver2 = observer;
                                final int i = userId;
                                final int i2 = deleteFlags;
                                this.mHandler.post(new Runnable() {
                                    public void run() {
                                        PackageManagerService.this.mHandler.removeCallbacks(this);
                                        if (uid == PackageManagerService.SHELL_UID && ColorPackageManagerHelper.isOppoHideApp(str)) {
                                            try {
                                                iPackageDeleteObserver2.onPackageDeleted(str, -1, null);
                                                if (PackageManagerService.DEBUG_REMOVE) {
                                                    Slog.d(PackageManagerService.TAG, "forbidden to remove cloud app:" + str);
                                                }
                                                ColorPackageManagerHelper.sendDcsPreventUninstallSystemApp(PackageManagerService.this.mContext, "pc", str);
                                            } catch (RemoteException e) {
                                            }
                                            return;
                                        }
                                        int returnCode;
                                        if (deleteAllUsers) {
                                            int[] blockUninstallUserIds = PackageManagerService.this.getBlockUninstallForUsers(str, users);
                                            if (ArrayUtils.isEmpty(blockUninstallUserIds)) {
                                                returnCode = PackageManagerService.this.deletePackageX(str, i, i2);
                                            } else {
                                                int userFlags = i2 & -3;
                                                for (int userId : users) {
                                                    if (!ArrayUtils.contains(blockUninstallUserIds, userId)) {
                                                        returnCode = PackageManagerService.this.deletePackageX(str, userId, userFlags);
                                                        if (returnCode != 1) {
                                                            Slog.w(PackageManagerService.TAG, "Package delete failed for user " + userId + ", returnCode " + returnCode);
                                                        }
                                                    }
                                                }
                                                returnCode = -4;
                                            }
                                        } else {
                                            returnCode = PackageManagerService.this.deletePackageX(str, i, i2);
                                            if (i == 0) {
                                                PackageManagerService.this.deletePackageX(str, OppoMultiAppManager.USER_ID, i2);
                                            }
                                        }
                                        try {
                                            iPackageDeleteObserver2.onPackageDeleted(str, returnCode, null);
                                        } catch (RemoteException e2) {
                                            Log.i(PackageManagerService.TAG, "Observer no longer exists.");
                                        }
                                        OppoUsageManager.getOppoUsageManager().recordApkDeleteEvent(str, delCallerPkg, null);
                                    }
                                });
                                if (OppoManager.isInnerVersion.booleanValue() && OppoManager.grList.contains(packageName) && OppoManager.willUseGrLeader.booleanValue()) {
                                    OppoManager.uninstallGrs(this.mContext);
                                }
                                if (userId == 0) {
                                    ColorPackageManagerHelper.removePkgFromNotLaunchedList(packageName, false);
                                }
                                return;
                            }
                            try {
                                observer.onPackageDeleted(packageName, -4, null);
                            } catch (RemoteException e3) {
                            }
                            return;
                        }
                    }
                    try {
                        observer.onPackageDeleted(packageName, -3, null);
                    } catch (RemoteException e4) {
                    }
                    return;
                }
                try {
                    Intent intent = new Intent("android.intent.action.UNINSTALL_PACKAGE");
                    intent.setData(Uri.fromParts(PACKAGE_SCHEME, packageName, null));
                    intent.putExtra("android.content.pm.extra.CALLBACK", observer.asBinder());
                    observer.onUserActionRequired(intent);
                } catch (RemoteException e5) {
                }
                return;
            }
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_PACKAGES", null);
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(observer);
        if (isOrphaned(packageName)) {
        }
        if ((deleteFlags & 2) == 0) {
        }
        if (deleteAllUsers) {
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "deletePackage for user " + userId);
        if (getDisallowUninstallApps().contains(packageName)) {
        }
    }

    private boolean isCallerAllowedToSilentlyUninstall(int callingUid, String pkgName) {
        if (callingUid == SHELL_UID || callingUid == 0 || callingUid == 1000) {
            return true;
        }
        String name = getNameForUid(callingUid);
        if (name != null && name.contains(":")) {
            int index = name.indexOf(":");
            if (index != -1 && OppoPackageManagerHelper.IsShareUid(name.substring(0, index))) {
                return true;
            }
        }
        if (hasSystemFeature("oppo.customize.function.silentinstall", 0)) {
            String[] callingPkgNames = getPackagesForUid(callingUid);
            if (callingPkgNames != null && callingPkgNames.length == 1 && checkWhiteList(callingPkgNames[0])) {
                return true;
            }
        }
        int callingUserId = UserHandle.getUserId(callingUid);
        if (callingUid == getPackageUid(getInstallerPackageName(pkgName), 0, callingUserId)) {
            return true;
        }
        if (this.mRequiredVerifierPackage != null && callingUid == getPackageUid(this.mRequiredVerifierPackage, 0, callingUserId)) {
            return true;
        }
        if (this.mRequiredUninstallerPackage == null || callingUid != getPackageUid(this.mRequiredUninstallerPackage, 0, callingUserId)) {
            return this.mStorageManagerPackage != null && callingUid == getPackageUid(this.mStorageManagerPackage, 0, callingUserId);
        } else {
            return true;
        }
    }

    private int[] getBlockUninstallForUsers(String packageName, int[] userIds) {
        int[] result = EMPTY_INT_ARRAY;
        for (int userId : userIds) {
            if (getBlockUninstallForUser(packageName, userId)) {
                result = ArrayUtils.appendInt(result, userId);
            }
        }
        return result;
    }

    public boolean isPackageDeviceAdminOnAnyUser(String packageName) {
        return isPackageDeviceAdmin(packageName, -1);
    }

    private boolean isPackageDeviceAdmin(String packageName, int userId) {
        IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(ServiceManager.getService("device_policy"));
        if (dpm != null) {
            try {
                Object deviceOwnerPackageName;
                ComponentName deviceOwnerComponentName = dpm.getDeviceOwnerComponent(false);
                if (deviceOwnerComponentName == null) {
                    deviceOwnerPackageName = null;
                } else {
                    deviceOwnerPackageName = deviceOwnerComponentName.getPackageName();
                }
                if (packageName.equals(deviceOwnerPackageName)) {
                    return true;
                }
                int[] users;
                if (userId == -1) {
                    users = sUserManager.getUserIds();
                } else {
                    users = new int[1];
                    users[0] = userId;
                }
                for (int packageHasActiveAdmins : users) {
                    if (dpm.packageHasActiveAdmins(packageName, packageHasActiveAdmins)) {
                        return true;
                    }
                }
            } catch (RemoteException e) {
            }
        }
        return false;
    }

    private boolean shouldKeepUninstalledPackageLPr(String packageName) {
        return this.mKeepUninstalledPackages != null ? this.mKeepUninstalledPackages.contains(packageName) : false;
    }

    /* JADX WARNING: Removed duplicated region for block: B:91:0x0183  */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x01ee  */
    /* JADX WARNING: Removed duplicated region for block: B:124:0x0242  */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x01fc  */
    /* JADX WARNING: Missing block: B:31:0x00b5, code:
            if (isUpdatedSystemApp(r19) == false) goto L_0x0121;
     */
    /* JADX WARNING: Missing block: B:33:0x00b9, code:
            if ((r26 & 4) != 0) goto L_0x0121;
     */
    /* JADX WARNING: Missing block: B:34:0x00bb, code:
            r12 = -1;
     */
    /* JADX WARNING: Missing block: B:35:0x00bc, code:
            r21 = r23.mInstallLock;
     */
    /* JADX WARNING: Missing block: B:36:0x00c2, code:
            monitor-enter(r21);
     */
    /* JADX WARNING: Missing block: B:39:0x00c5, code:
            if (DEBUG_REMOVE == false) goto L_0x00f0;
     */
    /* JADX WARNING: Missing block: B:40:0x00c7, code:
            android.util.Slog.d(TAG, "deletePackageX: pkg=" + r24 + " user=" + r25);
     */
    /* JADX WARNING: Missing block: B:41:0x00f0, code:
            r20 = null;
            r13 = null;
     */
    /* JADX WARNING: Missing block: B:43:?, code:
            r13 = freezePackageForDelete(r24, r12, r26, "deletePackageX");
            r18 = deletePackageLIF(r24, android.os.UserHandle.of(r17), true, r7, r26 | 65536, r9, true, null);
     */
    /* JADX WARNING: Missing block: B:44:0x0113, code:
            if (r13 == null) goto L_0x0118;
     */
    /* JADX WARNING: Missing block: B:46:?, code:
            r13.close();
     */
    /* JADX WARNING: Missing block: B:56:0x0121, code:
            r12 = r17;
     */
    /* JADX WARNING: Missing block: B:57:0x0124, code:
            r20 = th;
     */
    /* JADX WARNING: Missing block: B:61:0x0128, code:
            r4 = move-exception;
     */
    /* JADX WARNING: Missing block: B:62:0x0129, code:
            r22 = r4;
            r4 = r3;
            r3 = r22;
     */
    /* JADX WARNING: Missing block: B:125:0x0244, code:
            r3 = th;
     */
    /* JADX WARNING: Missing block: B:126:0x0245, code:
            r4 = null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private int deletePackageX(String packageName, int userId, int deleteFlags) {
        int removeUser;
        PackageSetting uninstalledPs;
        Throwable th;
        PackageRemovedInfo info = new PackageRemovedInfo();
        if (OppoMultiLauncherUtil.getInstance().isMainApp(userId, packageName) && (deleteFlags & 2) == 0) {
            deleteFlags |= 2;
        }
        if ((deleteFlags & 2) != 0) {
            removeUser = -1;
        } else {
            removeUser = userId;
        }
        if (isPackageDeviceAdmin(packageName, removeUser)) {
            if (!EXP_VERSION) {
                if (!hasSystemFeature("oppo.business.custom", 0)) {
                    OppoPackageManagerHelper.removeActiveAdmin(this, packageName, userId);
                }
            }
            Slog.w(TAG, "Not removing package " + packageName + ": has active device admin");
            return -2;
        }
        synchronized (this.mPackages) {
            uninstalledPs = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (uninstalledPs == null) {
                Slog.w(TAG, "Not removing non-existent package " + packageName);
                return -1;
            }
            int[] allUsers = sUserManager.getUserIds();
            info.origUsers = uninstalledPs.queryInstalledUsers(allUsers, true);
        }
        int i;
        if (res) {
            if (OppoMultiLauncherUtil.getInstance().isMainApp(userId, packageName) || OppoMultiLauncherUtil.getInstance().isMultiApp(userId, packageName)) {
                OppoMultiLauncherUtil.getInstance().removeFromCreatedMultiApp(packageName);
                if (DEBUG_PMS) {
                    Slog.d(TAG, "multi app: deletePacakgeX delete package: " + packageName + " USER: " + userId);
                }
            }
            info.sendPackageRemovedBroadcasts((deleteFlags & 8) == 0);
            info.sendSystemPackageUpdatedBroadcasts();
            info.sendSystemPackageAppearedBroadcasts();
        }
        Runtime.getRuntime().gc();
        if (info.args != null) {
            synchronized (this.mInstallLock) {
                info.args.doPostDeleteLI(true);
            }
        }
        if (res) {
            i = -1;
        } else {
            i = 1;
        }
        return i;
        if (th != null) {
            throw th;
        } else {
            synchronized (this.mPackages) {
                if (res) {
                    this.mEphemeralApplicationRegistry.onPackageUninstalledLPw(uninstalledPs.pkg);
                }
            }
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps != null && isVendorApp(ps)) {
                if (InstructionSets.getPrimaryInstructionSet(ps.pkg.applicationInfo) == null) {
                    Slog.d(TAG, "Try to remove dex file, but no primary cpu abi.");
                } else {
                    try {
                        this.mInstaller.rmdexcache(ps.pkg.baseCodePath, InstructionSets.getPrimaryInstructionSet(ps.pkg.applicationInfo));
                    } catch (InstallerException e) {
                        Slog.d(TAG, "Try to remove dex file but failed, code path: " + ps.pkg.baseCodePath);
                    }
                }
            }
            if (res) {
            }
            Runtime.getRuntime().gc();
            if (info.args != null) {
            }
            if (res) {
            }
            return i;
        }
        if (r13 != null) {
            try {
                r13.close();
            } catch (Throwable th2) {
                if (th == null) {
                    th = th2;
                } else if (th != th2) {
                    th.addSuppressed(th2);
                }
            }
        }
        if (th != null) {
            throw th;
        }
        throw th;
    }

    private void removePackageDataLIF(PackageSetting ps, int[] allUserHandles, PackageRemovedInfo outInfo, int flags, boolean writeSettings) {
        Package deletedPkg;
        final PackageSetting deletedPs;
        String packageName = ps.name;
        if (DEBUG_REMOVE) {
            Slog.d(TAG, "removePackageDataLI: " + ps);
        }
        synchronized (this.mPackages) {
            deletedPkg = (Package) this.mPackages.get(packageName);
            deletedPs = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (outInfo != null) {
                int[] queryInstalledUsers;
                outInfo.removedPackage = packageName;
                if (deletedPs != null) {
                    queryInstalledUsers = deletedPs.queryInstalledUsers(sUserManager.getUserIds(), true);
                } else {
                    queryInstalledUsers = null;
                }
                outInfo.removedUsers = queryInstalledUsers;
            }
        }
        removePackageLI(ps, (65536 & flags) != 0);
        if ((flags & 1) == 0) {
            Package resolvedPkg;
            if (deletedPkg != null) {
                resolvedPkg = deletedPkg;
            } else {
                resolvedPkg = new Package(ps.name);
                resolvedPkg.setVolumeUuid(ps.volumeUuid);
            }
            destroyAppDataLIF(resolvedPkg, -1, 3);
            destroyAppProfilesLIF(resolvedPkg, -1);
            if (outInfo != null) {
                outInfo.dataRemoved = true;
            }
            schedulePackageCleaning(packageName, -1, true);
        }
        synchronized (this.mPackages) {
            if (deletedPs != null) {
                if ((flags & 1) == 0) {
                    clearIntentFilterVerificationsLPw(deletedPs.name, -1);
                    clearDefaultBrowserIfNeeded(packageName);
                    if (outInfo != null) {
                        this.mSettings.mKeySetManagerService.removeAppKeySetDataLPw(packageName);
                        outInfo.removedAppId = this.mSettings.removePackageLPw(packageName);
                    }
                    updatePermissionsLPw(deletedPs.name, null, 0);
                    if (deletedPs.sharedUser != null) {
                        for (int userId : UserManagerService.getInstance().getUserIds()) {
                            int userIdToKill = this.mSettings.updateSharedUserPermsLPw(deletedPs, userId);
                            if (userIdToKill == -1 || userIdToKill >= 0) {
                                this.mHandler.post(new Runnable() {
                                    public void run() {
                                        PackageManagerService.this.killApplication(deletedPs.name, deletedPs.appId, PackageManagerService.KILL_APP_REASON_GIDS_CHANGED);
                                    }
                                });
                                break;
                            }
                        }
                    }
                    clearPackagePreferredActivitiesLPw(deletedPs.name, -1);
                }
                if (!(allUserHandles == null || outInfo == null || outInfo.origUsers == null)) {
                    if (DEBUG_REMOVE) {
                        Slog.d(TAG, "Propagating install state across downgrade");
                    }
                    for (int userId2 : allUserHandles) {
                        boolean installed = ArrayUtils.contains(outInfo.origUsers, userId2);
                        if (DEBUG_REMOVE) {
                            Slog.d(TAG, "    user " + userId2 + " => " + installed);
                        }
                        ps.setInstalled(installed, userId2);
                    }
                }
            }
            if (writeSettings) {
                this.mSettings.writeLPr();
            }
        }
        if (this.mbadCalcPackageCache.size() > 0) {
            for (String cacheName : this.mbadCalcPackageCache) {
                if (cacheName.equals(packageName)) {
                    this.mbadCalcPackageCache.remove(packageName);
                    Slog.w(TAG, "remove package " + packageName + " from mbadCalcPackageCache");
                    break;
                }
            }
        }
        if (this.mbadClearPackageCache.size() > 0) {
            for (String cacheName2 : this.mbadClearPackageCache) {
                if (cacheName2.equals(packageName)) {
                    this.mbadClearPackageCache.remove(packageName);
                    Slog.w(TAG, "remove package " + packageName + " from mbadClearPackageCache");
                    break;
                }
            }
        }
        if (outInfo != null) {
            removeKeystoreDataIfNeeded(-1, outInfo.removedAppId);
        }
    }

    static boolean locationIsPrivileged(File path) {
        try {
            boolean z;
            String privilegedAppDir = new File(Environment.getRootDirectory(), "priv-app").getCanonicalPath();
            String privilegedAppVendorDir = new File(Environment.getVendorDirectory(), "priv-app").getCanonicalPath();
            if (path.getCanonicalPath().startsWith(privilegedAppDir)) {
                z = true;
            } else {
                z = path.getCanonicalPath().startsWith(privilegedAppVendorDir);
            }
            return z;
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    private boolean deleteSystemPackageLIF(Package deletedPkg, PackageSetting deletedPs, int[] allUserHandles, int flags, PackageRemovedInfo outInfo, boolean writeSettings) {
        if (deletedPs.parentPackageName != null) {
            Slog.w(TAG, "Attempt to delete child system package " + deletedPkg.packageName);
            return false;
        }
        PackageSetting disabledPs;
        boolean applyUserRestrictions = (allUserHandles == null || outInfo.origUsers == null) ? false : true;
        boolean isVendor = isVendorApp(deletedPkg);
        synchronized (this.mPackages) {
            disabledPs = this.mSettings.getDisabledSystemPkgLPr(deletedPs.name);
        }
        if (DEBUG_REMOVE) {
            Slog.d(TAG, "deleteSystemPackageLI: newPs=" + deletedPkg.packageName + " disabledPs=" + disabledPs);
        }
        if (disabledPs == null) {
            Slog.w(TAG, "Attempt to delete unknown system package " + deletedPkg.packageName);
            return false;
        }
        if (DEBUG_REMOVE) {
            Slog.d(TAG, "Deleting system pkg from data partition");
        }
        if (DEBUG_REMOVE && applyUserRestrictions) {
            Slog.d(TAG, "Remembering install states:");
            for (int userId : allUserHandles) {
                Slog.d(TAG, "   u=" + userId + " inst=" + ArrayUtils.contains(outInfo.origUsers, userId));
            }
        }
        if (!isVendor) {
            outInfo.isRemovedPackageSystemUpdate = true;
            if (outInfo.removedChildPackages != null) {
                int childCount = deletedPs.childPackageNames != null ? deletedPs.childPackageNames.size() : 0;
                for (int i = 0; i < childCount; i++) {
                    String childPackageName = (String) deletedPs.childPackageNames.get(i);
                    if (disabledPs.childPackageNames != null && disabledPs.childPackageNames.contains(childPackageName)) {
                        PackageRemovedInfo childInfo = (PackageRemovedInfo) outInfo.removedChildPackages.get(childPackageName);
                        if (childInfo != null) {
                            childInfo.isRemovedPackageSystemUpdate = true;
                        }
                    }
                }
            }
        }
        if (disabledPs.versionCode < deletedPs.versionCode) {
            flags &= -2;
        } else {
            flags |= 1;
        }
        if (!deleteInstalledPackageLIF(deletedPs, true, flags, allUserHandles, outInfo, writeSettings, disabledPs.pkg)) {
            return false;
        }
        synchronized (this.mPackages) {
            enableSystemPackageLPw(disabledPs.pkg);
            removeNativeBinariesLI(deletedPs);
        }
        if (DEBUG_REMOVE) {
            Slog.d(TAG, "Re-installing system package: " + disabledPs);
        }
        int parseFlags = this.mDefParseFlags | 4;
        if (isVendor) {
            parseFlags |= 8192;
        } else {
            parseFlags |= 65;
            if (locationIsPrivileged(disabledPs.codePath)) {
                parseFlags |= 128;
            }
        }
        try {
            Package newPkg = scanPackageTracedLI(disabledPs.codePath, parseFlags, 32, 0, null);
            try {
                updateSharedLibrariesLPw(newPkg, null);
            } catch (PackageManagerException e) {
                Slog.e(TAG, "updateAllSharedLibrariesLPw failed: " + e.getMessage());
            }
            prepareAppDataAfterInstallLIF(newPkg);
            synchronized (this.mPackages) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(newPkg.packageName);
                ps.getPermissionsState().copyFrom(deletedPs.getPermissionsState());
                updatePermissionsLPw(newPkg.packageName, newPkg, 3);
                if (applyUserRestrictions) {
                    if (DEBUG_REMOVE) {
                        Slog.d(TAG, "Propagating install state across reinstall");
                    }
                    for (int userId2 : allUserHandles) {
                        boolean installed = ArrayUtils.contains(outInfo.origUsers, userId2);
                        if (DEBUG_REMOVE) {
                            Slog.d(TAG, "    user " + userId2 + " => " + installed);
                        }
                        ps.setInstalled(installed, userId2);
                        this.mSettings.writeRuntimePermissionsForUserLPr(userId2, false);
                    }
                    this.mSettings.writeAllUsersPackageRestrictionsLPr();
                }
                if (writeSettings) {
                    this.mSettings.writeLPr();
                }
            }
            return true;
        } catch (PackageManagerException e2) {
            Slog.w(TAG, "Failed to restore system package:" + deletedPkg.packageName + ": " + e2.getMessage());
            return false;
        }
    }

    /* JADX WARNING: Missing block: B:25:0x004d, code:
            removePackageDataLIF(r13, r16, r17, r15, r18);
     */
    /* JADX WARNING: Missing block: B:26:0x005b, code:
            if (r13.childPackageNames == null) goto L_0x00ad;
     */
    /* JADX WARNING: Missing block: B:27:0x005d, code:
            r7 = r13.childPackageNames.size();
     */
    /* JADX WARNING: Missing block: B:28:0x0063, code:
            r10 = 0;
     */
    /* JADX WARNING: Missing block: B:29:0x0064, code:
            if (r10 >= r7) goto L_0x00b7;
     */
    /* JADX WARNING: Missing block: B:30:0x0066, code:
            r3 = r12.mPackages;
     */
    /* JADX WARNING: Missing block: B:31:0x0068, code:
            monitor-enter(r3);
     */
    /* JADX WARNING: Missing block: B:33:?, code:
            r2 = r12.mSettings.peekPackageLPr((java.lang.String) r13.childPackageNames.get(r10));
     */
    /* JADX WARNING: Missing block: B:34:0x0077, code:
            monitor-exit(r3);
     */
    /* JADX WARNING: Missing block: B:35:0x0078, code:
            if (r2 == null) goto L_0x00a7;
     */
    /* JADX WARNING: Missing block: B:36:0x007a, code:
            if (r17 == null) goto L_0x00b2;
     */
    /* JADX WARNING: Missing block: B:38:0x0080, code:
            if (r17.removedChildPackages == null) goto L_0x00b2;
     */
    /* JADX WARNING: Missing block: B:39:0x0082, code:
            r4 = (com.android.server.pm.PackageManagerService.PackageRemovedInfo) r17.removedChildPackages.get(r2.name);
     */
    /* JADX WARNING: Missing block: B:41:0x0090, code:
            if ((r15 & 1) == 0) goto L_0x009e;
     */
    /* JADX WARNING: Missing block: B:42:0x0092, code:
            if (r19 == null) goto L_0x009e;
     */
    /* JADX WARNING: Missing block: B:44:0x009c, code:
            if (r19.hasChildPackage(r2.name) == false) goto L_0x00b4;
     */
    /* JADX WARNING: Missing block: B:45:0x009e, code:
            r5 = r15;
     */
    /* JADX WARNING: Missing block: B:46:0x009f, code:
            removePackageDataLIF(r2, r16, r4, r5, r18);
     */
    /* JADX WARNING: Missing block: B:47:0x00a7, code:
            r10 = r10 + 1;
     */
    /* JADX WARNING: Missing block: B:51:0x00ad, code:
            r7 = 0;
     */
    /* JADX WARNING: Missing block: B:55:0x00b2, code:
            r4 = null;
     */
    /* JADX WARNING: Missing block: B:56:0x00b4, code:
            r5 = r15 & -2;
     */
    /* JADX WARNING: Missing block: B:58:0x00b9, code:
            if (r13.parentPackageName != null) goto L_0x00f5;
     */
    /* JADX WARNING: Missing block: B:59:0x00bb, code:
            if (r14 == false) goto L_0x00f5;
     */
    /* JADX WARNING: Missing block: B:60:0x00bd, code:
            if (r17 == null) goto L_0x00f5;
     */
    /* JADX WARNING: Missing block: B:61:0x00bf, code:
            r17.args = createInstallArgsForExisting(packageFlagsToInstallFlags(r13), r13.codePathString, r13.resourcePathString, com.android.server.pm.InstructionSets.getAppDexInstructionSets(r13));
     */
    /* JADX WARNING: Missing block: B:62:0x00d5, code:
            if (DEBUG_SD_INSTALL == false) goto L_0x00f5;
     */
    /* JADX WARNING: Missing block: B:63:0x00d7, code:
            android.util.Slog.i(TAG, "args=" + r17.args);
     */
    /* JADX WARNING: Missing block: B:65:0x00f6, code:
            return true;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean deleteInstalledPackageLIF(PackageSetting ps, boolean deleteCodeAndResources, int flags, int[] allUserHandles, PackageRemovedInfo outInfo, boolean writeSettings, Package replacingPackage) {
        synchronized (this.mPackages) {
            if (outInfo != null) {
                outInfo.uid = ps.appId;
            }
            if (!(outInfo == null || outInfo.removedChildPackages == null)) {
                int childCount = ps.childPackageNames != null ? ps.childPackageNames.size() : 0;
                for (int i = 0; i < childCount; i++) {
                    String childPackageName = (String) ps.childPackageNames.get(i);
                    PackageSetting childPs = (PackageSetting) this.mSettings.mPackages.get(childPackageName);
                    if (childPs == null) {
                        return false;
                    }
                    PackageRemovedInfo childInfo = (PackageRemovedInfo) outInfo.removedChildPackages.get(childPackageName);
                    if (childInfo != null) {
                        childInfo.uid = childPs.appId;
                    }
                }
            }
        }
    }

    public boolean setBlockUninstallForUser(String packageName, boolean blockUninstall, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_PACKAGES", null);
        synchronized (this.mPackages) {
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                Log.i(TAG, "Package doesn't exist in set block uninstall " + packageName);
                return false;
            } else if (ps.getInstalled(userId)) {
                ps.setBlockUninstall(blockUninstall, userId);
                this.mSettings.writePackageRestrictionsLPr(userId);
                return true;
            } else {
                Log.i(TAG, "Package not installed in set block uninstall " + packageName);
                return false;
            }
        }
    }

    public boolean getBlockUninstallForUser(String packageName, int userId) {
        synchronized (this.mPackages) {
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                Log.i(TAG, "Package doesn't exist in get block uninstall " + packageName);
                return false;
            }
            boolean blockUninstall = ps.getBlockUninstall(userId);
            return blockUninstall;
        }
    }

    public boolean setRequiredForSystemUser(String packageName, boolean systemUserApp) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 1000 || callingUid == 0) {
            synchronized (this.mPackages) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps == null) {
                    Log.w(TAG, "Package doesn't exist: " + packageName);
                    return false;
                }
                if (systemUserApp) {
                    ps.pkgPrivateFlags |= 1024;
                } else {
                    ps.pkgPrivateFlags &= -1025;
                }
                this.mSettings.writeLPr();
                return true;
            }
        }
        throw new SecurityException("setRequiredForSystemUser can only be run by the system or root");
    }

    /* JADX WARNING: Missing block: B:44:0x00e8, code:
            if (isSystemApp(r6) == false) goto L_0x00ee;
     */
    /* JADX WARNING: Missing block: B:46:0x00ec, code:
            if ((r40 & 4) == 0) goto L_0x0158;
     */
    /* JADX WARNING: Missing block: B:47:0x00ee, code:
            if (r37 == null) goto L_0x0158;
     */
    /* JADX WARNING: Missing block: B:49:0x00f5, code:
            if (r37.getIdentifier() == -1) goto L_0x0158;
     */
    /* JADX WARNING: Missing block: B:50:0x00f7, code:
            markPackageUninstalledForUserLPw(r6, r37);
     */
    /* JADX WARNING: Missing block: B:51:0x0102, code:
            if (isSystemApp(r6) != false) goto L_0x01d4;
     */
    /* JADX WARNING: Missing block: B:52:0x0104, code:
            r30 = shouldKeepUninstalledPackageLPr(r36);
     */
    /* JADX WARNING: Missing block: B:53:0x0112, code:
            if (r6.isAnyInstalled(sUserManager.getUserIds()) != false) goto L_0x011c;
     */
    /* JADX WARNING: Missing block: B:55:0x0118, code:
            if (isVendorApp(r6) != false) goto L_0x011c;
     */
    /* JADX WARNING: Missing block: B:56:0x011a, code:
            if (r30 == false) goto L_0x01be;
     */
    /* JADX WARNING: Missing block: B:58:0x011e, code:
            if (DEBUG_REMOVE == false) goto L_0x0129;
     */
    /* JADX WARNING: Missing block: B:59:0x0120, code:
            android.util.Slog.d(TAG, "Still installed by other users");
     */
    /* JADX WARNING: Missing block: B:61:0x0135, code:
            if (clearPackageStateForUserLIF(r6, r37.getIdentifier(), r41) != false) goto L_0x013c;
     */
    /* JADX WARNING: Missing block: B:63:0x0138, code:
            return false;
     */
    /* JADX WARNING: Missing block: B:67:0x013c, code:
            scheduleWritePackageRestrictionsLocked(r37);
     */
    /* JADX WARNING: Missing block: B:68:0x014d, code:
            if (r35.mSettings.getDisabledSystemPkgLPr(r36) == null) goto L_0x01bc;
     */
    /* JADX WARNING: Missing block: B:69:0x014f, code:
            android.util.Slog.d(TAG, "Still need to remove the updated one.");
     */
    /* JADX WARNING: Missing block: B:71:0x015a, code:
            if (r6.childPackageNames == null) goto L_0x01fb;
     */
    /* JADX WARNING: Missing block: B:72:0x015c, code:
            if (r41 == null) goto L_0x01fb;
     */
    /* JADX WARNING: Missing block: B:73:0x015e, code:
            r5 = r35.mPackages;
     */
    /* JADX WARNING: Missing block: B:74:0x0162, code:
            monitor-enter(r5);
     */
    /* JADX WARNING: Missing block: B:76:?, code:
            r24 = r6.childPackageNames.size();
            r41.removedChildPackages = new android.util.ArrayMap(r24);
            r28 = 0;
     */
    /* JADX WARNING: Missing block: B:78:0x017a, code:
            if (r28 >= r24) goto L_0x01fa;
     */
    /* JADX WARNING: Missing block: B:79:0x017c, code:
            r26 = (java.lang.String) r6.childPackageNames.get(r28);
            r0 = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r35);
            r0.removedPackage = r26;
            r41.removedChildPackages.put(r26, r0);
            r27 = r35.mSettings.peekPackageLPr(r26);
     */
    /* JADX WARNING: Missing block: B:80:0x01aa, code:
            if (r27 == null) goto L_0x01b9;
     */
    /* JADX WARNING: Missing block: B:81:0x01ac, code:
            r0.origUsers = r27.queryInstalledUsers(r39, true);
     */
    /* JADX WARNING: Missing block: B:82:0x01b9, code:
            r28 = r28 + 1;
     */
    /* JADX WARNING: Missing block: B:84:0x01bd, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:86:0x01c0, code:
            if (DEBUG_REMOVE == false) goto L_0x01cb;
     */
    /* JADX WARNING: Missing block: B:87:0x01c2, code:
            android.util.Slog.d(TAG, "Not installed by other users, full delete");
     */
    /* JADX WARNING: Missing block: B:88:0x01cb, code:
            r6.setInstalled(true, r37.getIdentifier());
     */
    /* JADX WARNING: Missing block: B:90:0x01d6, code:
            if (DEBUG_REMOVE == false) goto L_0x01e1;
     */
    /* JADX WARNING: Missing block: B:91:0x01d8, code:
            android.util.Slog.d(TAG, "Deleting system app");
     */
    /* JADX WARNING: Missing block: B:93:0x01ed, code:
            if (clearPackageStateForUserLIF(r6, r37.getIdentifier(), r41) != false) goto L_0x01f1;
     */
    /* JADX WARNING: Missing block: B:95:0x01f0, code:
            return false;
     */
    /* JADX WARNING: Missing block: B:96:0x01f1, code:
            scheduleWritePackageRestrictionsLocked(r37);
     */
    /* JADX WARNING: Missing block: B:97:0x01f9, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:98:0x01fa, code:
            monitor-exit(r5);
     */
    /* JADX WARNING: Missing block: B:100:0x0201, code:
            if (isSystemApp(r6) != false) goto L_0x0209;
     */
    /* JADX WARNING: Missing block: B:102:0x0207, code:
            if (isVendorApp(r6) == false) goto L_0x02e0;
     */
    /* JADX WARNING: Missing block: B:103:0x0209, code:
            r5 = TAG;
            r7 = new java.lang.StringBuilder().append("Removing ");
     */
    /* JADX WARNING: Missing block: B:104:0x021c, code:
            if (isVendorApp(r6) == false) goto L_0x02d5;
     */
    /* JADX WARNING: Missing block: B:105:0x021e, code:
            r4 = "Vendor";
     */
    /* JADX WARNING: Missing block: B:106:0x0221, code:
            android.util.Slog.d(r5, r7.append(r4).append("package: ").append(r6.name).toString());
            r32 = deleteSystemPackageLIF(r6.pkg, r6, r39, r40, r41, r42);
     */
    /* JADX WARNING: Missing block: B:107:0x024d, code:
            if (isVendorApp(r6) == false) goto L_0x0280;
     */
    /* JADX WARNING: Missing block: B:108:0x024f, code:
            if (r41 == null) goto L_0x0280;
     */
    /* JADX WARNING: Missing block: B:109:0x0251, code:
            if (r37 == null) goto L_0x02da;
     */
    /* JADX WARNING: Missing block: B:110:0x0253, code:
            r9 = r37.getIdentifier();
     */
    /* JADX WARNING: Missing block: B:111:0x0257, code:
            r8 = (com.android.server.pm.PackageSetting) r35.mSettings.mPackages.get(r36);
     */
    /* JADX WARNING: Missing block: B:112:0x0265, code:
            if (r8 == null) goto L_0x0280;
     */
    /* JADX WARNING: Missing block: B:113:0x0267, code:
            r8.setUserState(r9, 0, 0, false, true, true, false, false, null, null, null, false, 0, 0);
     */
    /* JADX WARNING: Missing block: B:114:0x0280, code:
            if (r41 == null) goto L_0x03cc;
     */
    /* JADX WARNING: Missing block: B:116:0x028c, code:
            if (r35.mPackages.get(r6.name) != null) goto L_0x0315;
     */
    /* JADX WARNING: Missing block: B:117:0x028e, code:
            r4 = true;
     */
    /* JADX WARNING: Missing block: B:118:0x028f, code:
            r41.removedForAllUsers = r4;
     */
    /* JADX WARNING: Missing block: B:119:0x0297, code:
            if (r41.removedChildPackages == null) goto L_0x031b;
     */
    /* JADX WARNING: Missing block: B:120:0x0299, code:
            r5 = r35.mPackages;
     */
    /* JADX WARNING: Missing block: B:121:0x029d, code:
            monitor-enter(r5);
     */
    /* JADX WARNING: Missing block: B:123:?, code:
            r24 = r41.removedChildPackages.size();
            r28 = 0;
     */
    /* JADX WARNING: Missing block: B:125:0x02ac, code:
            if (r28 >= r24) goto L_0x031a;
     */
    /* JADX WARNING: Missing block: B:126:0x02ae, code:
            r25 = (com.android.server.pm.PackageManagerService.PackageRemovedInfo) r41.removedChildPackages.valueAt(r28);
     */
    /* JADX WARNING: Missing block: B:127:0x02ba, code:
            if (r25 == null) goto L_0x02cf;
     */
    /* JADX WARNING: Missing block: B:129:0x02c8, code:
            if (r35.mPackages.get(r25.removedPackage) != null) goto L_0x0318;
     */
    /* JADX WARNING: Missing block: B:130:0x02ca, code:
            r4 = true;
     */
    /* JADX WARNING: Missing block: B:131:0x02cb, code:
            r25.removedForAllUsers = r4;
     */
    /* JADX WARNING: Missing block: B:132:0x02cf, code:
            r28 = r28 + 1;
     */
    /* JADX WARNING: Missing block: B:136:0x02d5, code:
            r4 = "system";
     */
    /* JADX WARNING: Missing block: B:137:0x02da, code:
            r9 = android.os.UserHandle.myUserId();
     */
    /* JADX WARNING: Missing block: B:139:0x02e2, code:
            if (DEBUG_REMOVE == false) goto L_0x0300;
     */
    /* JADX WARNING: Missing block: B:140:0x02e4, code:
            android.util.Slog.d(TAG, "Removing non-system package: " + r6.name);
     */
    /* JADX WARNING: Missing block: B:141:0x0300, code:
            r32 = deleteInstalledPackageLIF(r6, r38, r40, r39, r41, r42, r43);
     */
    /* JADX WARNING: Missing block: B:142:0x0315, code:
            r4 = false;
     */
    /* JADX WARNING: Missing block: B:143:0x0318, code:
            r4 = false;
     */
    /* JADX WARNING: Missing block: B:144:0x031a, code:
            monitor-exit(r5);
     */
    /* JADX WARNING: Missing block: B:146:0x031f, code:
            if (isSystemApp(r6) == false) goto L_0x03cc;
     */
    /* JADX WARNING: Missing block: B:147:0x0321, code:
            r5 = r35.mPackages;
     */
    /* JADX WARNING: Missing block: B:148:0x0325, code:
            monitor-enter(r5);
     */
    /* JADX WARNING: Missing block: B:150:?, code:
            r33 = r35.mSettings.peekPackageLPr(r6.name);
     */
    /* JADX WARNING: Missing block: B:151:0x0334, code:
            if (r33.childPackageNames == null) goto L_0x0376;
     */
    /* JADX WARNING: Missing block: B:152:0x0336, code:
            r24 = r33.childPackageNames.size();
     */
    /* JADX WARNING: Missing block: B:153:0x033e, code:
            r28 = 0;
     */
    /* JADX WARNING: Missing block: B:155:0x0344, code:
            if (r28 >= r24) goto L_0x03cb;
     */
    /* JADX WARNING: Missing block: B:156:0x0346, code:
            r26 = (java.lang.String) r33.childPackageNames.get(r28);
     */
    /* JADX WARNING: Missing block: B:157:0x0356, code:
            if (r41.removedChildPackages == null) goto L_0x0364;
     */
    /* JADX WARNING: Missing block: B:159:0x0362, code:
            if (r41.removedChildPackages.indexOfKey(r26) >= 0) goto L_0x0370;
     */
    /* JADX WARNING: Missing block: B:160:0x0364, code:
            r27 = r35.mSettings.peekPackageLPr(r26);
     */
    /* JADX WARNING: Missing block: B:161:0x036e, code:
            if (r27 != null) goto L_0x0379;
     */
    /* JADX WARNING: Missing block: B:162:0x0370, code:
            r28 = r28 + 1;
     */
    /* JADX WARNING: Missing block: B:166:0x0376, code:
            r24 = 0;
     */
    /* JADX WARNING: Missing block: B:168:?, code:
            r29 = new com.android.server.pm.PackageManagerService.PackageInstalledInfo();
            r29.name = r26;
            r29.newUsers = r27.queryInstalledUsers(r39, true);
            r29.pkg = (android.content.pm.PackageParser.Package) r35.mPackages.get(r26);
            r29.uid = r27.pkg.applicationInfo.uid;
     */
    /* JADX WARNING: Missing block: B:169:0x03b1, code:
            if (r41.appearedChildPackages != null) goto L_0x03bc;
     */
    /* JADX WARNING: Missing block: B:170:0x03b3, code:
            r41.appearedChildPackages = new android.util.ArrayMap();
     */
    /* JADX WARNING: Missing block: B:171:0x03bc, code:
            r41.appearedChildPackages.put(r26, r29);
     */
    /* JADX WARNING: Missing block: B:175:0x03cb, code:
            monitor-exit(r5);
     */
    /* JADX WARNING: Missing block: B:176:0x03cc, code:
            return r32;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean deletePackageLIF(String packageName, UserHandle user, boolean deleteCodeAndResources, int[] allUserHandles, int flags, PackageRemovedInfo outInfo, boolean writeSettings, Package replacingPackage) {
        if (packageName == null) {
            Slog.w(TAG, "Attempt to delete null packageName.");
            return false;
        }
        if (DEBUG_REMOVE) {
            Slog.d(TAG, "deletePackageLI: " + packageName + " user " + user);
        }
        synchronized (this.mPackages) {
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                Slog.w(TAG, "Package named '" + packageName + "' doesn't exist.");
                return false;
            } else if (ps.parentPackageName == null || (isSystemApp(ps) && (flags & 4) == 0)) {
            } else {
                int removedUserId;
                if (DEBUG_REMOVE) {
                    Object valueOf;
                    String str = TAG;
                    StringBuilder append = new StringBuilder().append("Uninstalled child package:").append(packageName).append(" for user:");
                    if (user == null) {
                        valueOf = Integer.valueOf(-1);
                    } else {
                        UserHandle valueOf2 = user;
                    }
                    Slog.d(str, append.append(valueOf2).toString());
                }
                if (user != null) {
                    removedUserId = user.getIdentifier();
                } else {
                    removedUserId = -1;
                }
                if (clearPackageStateForUserLIF(ps, removedUserId, outInfo)) {
                    markPackageUninstalledForUserLPw(ps, user);
                    scheduleWritePackageRestrictionsLocked(user);
                    return true;
                }
                return false;
            }
        }
    }

    private void markPackageUninstalledForUserLPw(PackageSetting ps, UserHandle user) {
        int[] userIds;
        if (user == null || user.getIdentifier() == -1) {
            userIds = sUserManager.getUserIds();
        } else {
            userIds = new int[1];
            userIds[0] = user.getIdentifier();
        }
        int i = 0;
        int length = userIds.length;
        while (true) {
            int i2 = i;
            if (i2 < length) {
                int nextUserId = userIds[i2];
                if (DEBUG_REMOVE) {
                    Slog.d(TAG, "Marking package:" + ps.name + " uninstalled for user:" + nextUserId);
                }
                ps.setUserState(nextUserId, 0, 0, false, true, true, false, false, null, null, null, false, ps.readUserState(nextUserId).domainVerificationStatus, 0);
                i = i2 + 1;
            } else {
                return;
            }
        }
    }

    private boolean clearPackageStateForUserLIF(PackageSetting ps, int userId, PackageRemovedInfo outInfo) {
        Package pkg;
        int[] userIds;
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(ps.name);
        }
        if (userId == -1) {
            userIds = sUserManager.getUserIds();
        } else {
            userIds = new int[1];
            userIds[0] = userId;
        }
        for (int nextUserId : userIds) {
            if (DEBUG_REMOVE) {
                Slog.d(TAG, "Updating package:" + ps.name + " install state for user:" + nextUserId);
            }
            destroyAppDataLIF(pkg, userId, 3);
            destroyAppProfilesLIF(pkg, userId);
            removeKeystoreDataIfNeeded(nextUserId, ps.appId);
            schedulePackageCleaning(ps.name, nextUserId, false);
            synchronized (this.mPackages) {
                if (clearPackagePreferredActivitiesLPw(ps.name, nextUserId)) {
                    scheduleWritePackageRestrictionsLocked(nextUserId);
                }
                resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);
            }
        }
        if (outInfo != null) {
            outInfo.removedPackage = ps.name;
            outInfo.removedAppId = ps.appId;
            outInfo.removedUsers = userIds;
        }
        return true;
    }

    private void clearExternalStorageDataSync(String packageName, int userId, boolean allData) {
        if (!DEFAULT_CONTAINER_PACKAGE.equals(packageName)) {
            boolean mounted;
            if (Environment.isExternalStorageEmulated()) {
                mounted = true;
            } else {
                String status = Environment.getExternalStorageState();
                if (status.equals("mounted")) {
                    mounted = true;
                } else {
                    mounted = status.equals("mounted_ro");
                }
            }
            if (mounted) {
                int[] users;
                Intent containerIntent = new Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);
                if (userId == -1) {
                    users = sUserManager.getUserIds();
                } else {
                    users = new int[1];
                    users[0] = userId;
                }
                final ClearStorageConnection conn = new ClearStorageConnection(this, null);
                if (this.mContext.bindServiceAsUser(containerIntent, conn, 1, UserHandle.SYSTEM)) {
                    int i = 0;
                    int length = users.length;
                    while (true) {
                        int i2 = i;
                        if (i2 >= length) {
                            this.mContext.unbindService(conn);
                            break;
                        }
                        final int curUser = users[i2];
                        long timeout = SystemClock.uptimeMillis() + 5000;
                        synchronized (conn) {
                            int count = 0;
                            while (conn.mContainerService == null) {
                                long now = SystemClock.uptimeMillis();
                                if (now < timeout) {
                                    if (count == 20) {
                                        try {
                                            Slog.w(TAG, "clearExternalStorageDataSync wait mContainerService timeout!");
                                            break;
                                        } catch (InterruptedException e) {
                                        }
                                    } else {
                                        count++;
                                        conn.wait(timeout - now);
                                    }
                                }
                            }
                            try {
                            } finally {
                                this.mContext.unbindService(conn);
                            }
                        }
                        if (conn.mContainerService == null) {
                            break;
                        }
                        String name = packageName;
                        int falCurUser = curUser;
                        boolean falAllData = allData;
                        final Object lock = new Object();
                        boolean badCached = false;
                        final String str = packageName;
                        final boolean z = allData;
                        Thread clearDirectoryThread = new Thread(new Runnable() {
                            public void run() {
                                Slog.i(PackageManagerService.TAG, "clearDirectoryThread start running " + str);
                                UserEnvironment userEnv = new UserEnvironment(curUser);
                                PackageManagerService.clearDirectory(conn.mContainerService, userEnv.buildExternalStorageAppCacheDirs(str));
                                if (z) {
                                    PackageManagerService.clearDirectory(conn.mContainerService, userEnv.buildExternalStorageAppDataDirs(str));
                                    PackageManagerService.clearDirectory(conn.mContainerService, userEnv.buildExternalStorageAppMediaDirs(str));
                                }
                                synchronized (lock) {
                                    PackageManagerService.this.backgroundClearIsRunning = false;
                                    lock.notify();
                                }
                            }
                        });
                        synchronized (lock) {
                            if (this.mbadClearPackageCache.size() > 0) {
                                Slog.w(TAG, "clearDirectoryThread badCache is not empty");
                                for (String cacheName : this.mbadClearPackageCache) {
                                    if (cacheName.equals(packageName)) {
                                        Slog.w(TAG, "clearDirectoryThread current package " + packageName + " is in the badCached");
                                        badCached = true;
                                        break;
                                    }
                                }
                            }
                            if (!badCached) {
                                try {
                                    this.backgroundClearIsRunning = true;
                                    clearDirectoryThread.start();
                                    lock.wait(30000);
                                    if (this.backgroundClearIsRunning) {
                                        Slog.w(TAG, "clearDirectoryThread is running, clearDirectory 30s timeout so forceStop com.android.defcontainer");
                                        clearDirectoryThread.interrupt();
                                        ((ActivityManager) this.mContext.getSystemService("activity")).forceStopPackage(DEFAULT_CONTAINER_PACKAGE);
                                        this.mbadClearPackageCache.add(packageName);
                                    }
                                } catch (InterruptedException e2) {
                                    e2.printStackTrace();
                                }
                            }
                        }
                        i = i2 + 1;
                    }
                }
            }
        }
    }

    /* JADX WARNING: Missing block: B:29:0x0038, code:
            r3 = move-exception;
     */
    /* JADX WARNING: Missing block: B:30:0x0039, code:
            r6 = r3;
            r3 = r2;
            r2 = r6;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void clearApplicationProfileData(String packageName) {
        Package pkg;
        Throwable th = null;
        enforceSystemOrRoot("Only the system can clear all profile data");
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(packageName);
        }
        PackageFreezer packageFreezer = null;
        try {
            packageFreezer = freezePackage(packageName, "clearApplicationProfileData");
            synchronized (this.mInstallLock) {
                clearAppProfilesLIF(pkg, -1);
                destroyAppReferenceProfileLeafLIF(pkg, -1, true);
            }
            if (packageFreezer != null) {
                try {
                    packageFreezer.close();
                } catch (Throwable th2) {
                    th = th2;
                }
            }
            if (th != null) {
                throw th;
            }
        } catch (Throwable th3) {
            Throwable th4 = th3;
            if (packageFreezer != null) {
                try {
                    packageFreezer.close();
                } catch (Throwable th5) {
                    if (th == null) {
                        th = th5;
                    } else if (th != th5) {
                        th.addSuppressed(th5);
                    }
                }
            }
            if (th != null) {
                throw th;
            }
            throw th4;
        }
    }

    public void clearApplicationUserData(final String packageName, final IPackageDataObserver observer, final int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_USER_DATA", null);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "clear application data");
        if (this.mProtectedPackages.isPackageDataProtected(userId, packageName)) {
            throw new SecurityException("Cannot clear data for a protected package: " + packageName);
        }
        this.mHandler.post(new Runnable() {
            /* JADX WARNING: Missing block: B:21:0x003b, code:
            r5 = move-exception;
     */
            /* JADX WARNING: Missing block: B:22:0x003c, code:
            r9 = r5;
            r5 = r4;
            r4 = r9;
     */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                Throwable th = null;
                PackageManagerService.this.mHandler.removeCallbacks(this);
                PackageFreezer packageFreezer = null;
                try {
                    boolean succeeded;
                    packageFreezer = PackageManagerService.this.freezePackage(packageName, "clearApplicationUserData");
                    synchronized (PackageManagerService.this.mInstallLock) {
                        succeeded = PackageManagerService.this.clearApplicationUserDataLIF(packageName, userId);
                    }
                    PackageManagerService.this.clearExternalStorageDataSync(packageName, userId, true);
                    if (packageFreezer != null) {
                        try {
                            packageFreezer.close();
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    if (th != null) {
                        throw th;
                    }
                    if (succeeded) {
                        DeviceStorageMonitorInternal dsm = (DeviceStorageMonitorInternal) LocalServices.getService(DeviceStorageMonitorInternal.class);
                        if (dsm != null) {
                            dsm.checkMemory();
                        }
                    }
                    if (observer != null) {
                        try {
                            observer.onRemoveCompleted(packageName, succeeded);
                        } catch (RemoteException e) {
                            Log.i(PackageManagerService.TAG, "Observer no longer exists.");
                        }
                    }
                } catch (Throwable th3) {
                    Throwable th4 = th3;
                    if (packageFreezer != null) {
                        try {
                            packageFreezer.close();
                        } catch (Throwable th5) {
                            if (th == null) {
                                th = th5;
                            } else if (th != th5) {
                                th.addSuppressed(th5);
                            }
                        }
                    }
                    if (th != null) {
                        throw th;
                    }
                    throw th4;
                }
            }
        });
    }

    /* JADX WARNING: Missing block: B:19:0x0055, code:
            clearAppDataLIF(r2, r12, 3);
            removeKeystoreDataIfNeeded(r12, android.os.UserHandle.getAppId(r2.applicationInfo.uid));
            r4 = getUserManagerInternal();
     */
    /* JADX WARNING: Missing block: B:20:0x006c, code:
            if (r4.isUserUnlockingOrUnlocked(r12) == false) goto L_0x0077;
     */
    /* JADX WARNING: Missing block: B:21:0x006e, code:
            r1 = 3;
     */
    /* JADX WARNING: Missing block: B:22:0x006f, code:
            prepareAppDataContentsLIF(r2, r12, r1);
     */
    /* JADX WARNING: Missing block: B:23:0x0073, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:28:0x007b, code:
            if (r4.isUserRunning(r12) == false) goto L_0x007f;
     */
    /* JADX WARNING: Missing block: B:29:0x007d, code:
            r1 = 1;
     */
    /* JADX WARNING: Missing block: B:30:0x007f, code:
            r1 = 0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean clearApplicationUserDataLIF(String packageName, int userId) {
        if (packageName == null) {
            Slog.w(TAG, "Attempt to delete null packageName.");
            return false;
        }
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (ps != null) {
                    pkg = ps.pkg;
                }
            }
            if (pkg == null) {
                Slog.w(TAG, "Package named '" + packageName + "' doesn't exist.");
                return false;
            }
            resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting) pkg.mExtras, userId);
        }
    }

    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(int userId) {
        int packageCount = this.mPackages.size();
        for (int i = 0; i < packageCount; i++) {
            resetUserChangesToRuntimePermissionsAndFlagsLPw(((Package) this.mPackages.valueAt(i)).mExtras, userId);
        }
    }

    private void resetNetworkPolicies(int userId) {
        ((NetworkPolicyManagerInternal) LocalServices.getService(NetworkPolicyManagerInternal.class)).resetUserState(userId);
    }

    /* JADX WARNING: Removed duplicated region for block: B:77:0x00a1 A:{SYNTHETIC} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(PackageSetting ps, int userId) {
        if (ps.pkg != null) {
            if (userId == 999 && ps.pkg.packageName != null && OppoMultiLauncherUtil.getInstance().isMultiApp(ps.pkg.packageName)) {
                String stackTraceString = Log.getStackTraceString(new Throwable());
                if (stackTraceString != null && stackTraceString.contains("deletePackageLI")) {
                    return;
                }
            }
            boolean writeInstallPermissions = false;
            boolean writeRuntimePermissions = false;
            int permissionCount = ps.pkg.requestedPermissions.size();
            boolean pkgReviewRequired = isPackageNeedsReview(ps.pkg);
            for (int i = 0; i < permissionCount; i++) {
                String permission = (String) ps.pkg.requestedPermissions.get(i);
                BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(permission);
                if (bp != null) {
                    if (ps.sharedUser != null) {
                        boolean used = false;
                        int packageCount = ps.sharedUser.packages.size();
                        int j = 0;
                        while (j < packageCount) {
                            PackageSetting pkg = (PackageSetting) ps.sharedUser.packages.valueAt(j);
                            if (pkg.pkg == null || pkg.pkg.packageName.equals(ps.pkg.packageName) || !pkg.pkg.requestedPermissions.contains(permission)) {
                                j++;
                            } else {
                                used = true;
                                if (used) {
                                }
                            }
                        }
                        if (used) {
                        }
                    }
                    PermissionsState permissionsState = ps.getPermissionsState();
                    int oldFlags = permissionsState.getPermissionFlags(bp.name, userId);
                    boolean hasInstallState = permissionsState.getInstallPermissionState(bp.name) != null;
                    int flags = 0;
                    if (CtaUtils.isCtaSupported()) {
                        if (pkgReviewRequired && bp.isRuntime() && CtaUtils.isPlatformPermission(bp.sourcePackage, bp.name) && (oldFlags & 16) == 0) {
                            flags = 64;
                        }
                    } else if (Build.isPermissionReviewRequired() && ps.pkg.applicationInfo.targetSdkVersion < 23) {
                        flags = 64;
                    }
                    if (permissionsState.updatePermissionFlags(bp, userId, 75, flags)) {
                        if (hasInstallState) {
                            writeInstallPermissions = true;
                        } else {
                            writeRuntimePermissions = true;
                        }
                    }
                    if (bp.isRuntime() && (oldFlags & 20) == 0) {
                        if ((oldFlags & 32) != 0) {
                            if (permissionsState.grantRuntimePermission(bp, userId) != -1) {
                                writeRuntimePermissions = true;
                            }
                        } else if ((flags & 64) == 0) {
                            switch (permissionsState.revokeRuntimePermission(bp, userId)) {
                                case 0:
                                case 1:
                                    writeRuntimePermissions = true;
                                    final int appId = ps.appId;
                                    final int i2 = userId;
                                    this.mHandler.post(new Runnable() {
                                        public void run() {
                                            PackageManagerService.this.killUid(appId, i2, PackageManagerService.KILL_APP_REASON_PERMISSIONS_REVOKED);
                                        }
                                    });
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
            if (writeRuntimePermissions) {
                this.mSettings.writeRuntimePermissionsForUserLPr(userId, true);
            }
            if (writeInstallPermissions) {
                this.mSettings.writeLPr();
            }
        }
    }

    private static void removeKeystoreDataIfNeeded(int userId, int appId) {
        if (appId >= 0) {
            KeyStore keyStore = KeyStore.getInstance();
            if (keyStore == null) {
                Slog.w(TAG, "Could not contact keystore to clear entries for app id " + appId);
            } else if (userId == -1) {
                for (int individual : sUserManager.getUserIds()) {
                    keyStore.clearUid(UserHandle.getUid(individual, appId));
                }
            } else {
                keyStore.clearUid(UserHandle.getUid(userId, appId));
            }
        }
    }

    public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer) {
        deleteApplicationCacheFilesAsUser(packageName, UserHandle.getCallingUserId(), observer);
    }

    public void deleteApplicationCacheFilesCrossUser(String packageName, IPackageDataObserver observer, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_CACHE_FILES", null);
        deleteApplicationCacheFilesAsUser(packageName, userId, observer);
    }

    public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer) {
        final Package pkg;
        this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_CACHE_FILES", null);
        enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "delete application cache files");
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(packageName);
        }
        final int i = userId;
        final String str = packageName;
        final IPackageDataObserver iPackageDataObserver = observer;
        this.mHandler.post(new Runnable() {
            public void run() {
                synchronized (PackageManagerService.this.mInstallLock) {
                    PackageManagerService.this.clearAppDataLIF(pkg, i, 259);
                    PackageManagerService.this.clearAppDataLIF(pkg, i, 515);
                }
                PackageManagerService.this.clearExternalStorageDataSync(str, i, false);
                if (iPackageDataObserver != null) {
                    try {
                        iPackageDataObserver.onRemoveCompleted(str, true);
                    } catch (RemoteException e) {
                        Log.i(PackageManagerService.TAG, "Observer no longer exists.");
                    }
                }
            }
        });
    }

    public void getPackageSizeInfo(String packageName, int userHandle, IPackageStatsObserver observer) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.GET_PACKAGE_SIZE", null);
        if (packageName == null) {
            throw new IllegalArgumentException("Attempt to get size of null packageName");
        }
        PackageStats stats = new PackageStats(packageName, userHandle);
        Message msg = this.mHandler.obtainMessage(5);
        msg.obj = new MeasureParams(stats, observer);
        this.mHandler.sendMessage(msg);
    }

    /* JADX WARNING: Missing block: B:10:?, code:
            r12.mInstaller.getAppSize(r10.volumeUuid, r13, r14, 3, r10.getCeDataInode(r14), r10.codePathString, r15);
     */
    /* JADX WARNING: Missing block: B:12:0x0042, code:
            if (isSystemApp(r10) == false) goto L_0x004a;
     */
    /* JADX WARNING: Missing block: B:14:0x0048, code:
            if (isUpdatedSystemApp(r10) == false) goto L_0x005b;
     */
    /* JADX WARNING: Missing block: B:16:0x004b, code:
            return true;
     */
    /* JADX WARNING: Missing block: B:20:0x004f, code:
            r0 = move-exception;
     */
    /* JADX WARNING: Missing block: B:21:0x0050, code:
            android.util.Slog.w(TAG, java.lang.String.valueOf(r0));
     */
    /* JADX WARNING: Missing block: B:22:0x005a, code:
            return false;
     */
    /* JADX WARNING: Missing block: B:23:0x005b, code:
            r15.codeSize = 0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean getPackageSizeInfoLI(String packageName, int userId, PackageStats stats) {
        synchronized (this.mPackages) {
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                Slog.w(TAG, "Failed to find settings for " + packageName);
                return false;
            }
        }
    }

    private int getUidTargetSdkVersionLockedLPr(int uid) {
        SharedUserSetting obj = this.mSettings.getUserIdLPr(uid);
        PackageSetting ps;
        if (obj instanceof SharedUserSetting) {
            int vers = 10000;
            Iterator<PackageSetting> it = obj.packages.iterator();
            while (it.hasNext()) {
                ps = (PackageSetting) it.next();
                if (ps.pkg != null) {
                    int v = ps.pkg.applicationInfo.targetSdkVersion;
                    if (v < vers) {
                        vers = v;
                    }
                }
            }
            return vers;
        }
        if (obj instanceof PackageSetting) {
            ps = (PackageSetting) obj;
            if (ps.pkg != null) {
                return ps.pkg.applicationInfo.targetSdkVersion;
            }
        }
        return 10000;
    }

    public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId) {
        String callingPkg = OppoPackageManagerHelper.getProcessNameByPid(Binder.getCallingPid());
        if (callingPkg != null && callingPkg.equals("system:ui") && ColorPackageManagerHelper.isSetContainsOppoDefaultPkg(set, activity)) {
            Slog.d(TAG, "addPreferredActivity called from ResolverActivity and contains oppo default package, skip!");
        } else if (!ColorPackageManagerHelper.forbiddenSetPreferredActivity(this, filter)) {
            addPreferredActivityInternal(filter, match, set, activity, true, userId, "Adding preferred");
        }
    }

    private void addPreferredActivityInternal(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, boolean always, int userId, String opname) {
        int callingUid = Binder.getCallingUid();
        enforceCrossUserPermission(callingUid, userId, true, false, "add preferred activity");
        try {
            if (filter.countActions() == 0) {
                Slog.w(TAG, "Cannot set a preferred activity with no filter actions");
                return;
            }
            synchronized (this.mPackages) {
                if (this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0) {
                    if (getUidTargetSdkVersionLockedLPr(callingUid) < 8) {
                        Slog.w(TAG, "Ignoring addPreferredActivity() from uid " + callingUid);
                        return;
                    }
                    this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
                }
                PreferredIntentResolver pir = this.mSettings.editPreferredActivitiesLPw(userId);
                if (DEBUG_PMS) {
                    Slog.i(TAG, opname + " activity " + activity.flattenToShortString() + " for user " + userId + ":");
                    filter.dump(new LogPrinter(4, TAG), "  ");
                }
                pir.addFilter(new PreferredActivity(filter, match, set, activity, always));
                scheduleWritePackageRestrictionsLocked(userId);
                postPreferredActivityChangedBroadcast(userId);
            }
        } catch (NullPointerException e) {
            Slog.i(TAG, "Cannot set a preferred activity with no filter ");
        }
    }

    private void postPreferredActivityChangedBroadcast(int userId) {
        this.mHandler.post(new -void_postPreferredActivityChangedBroadcast_int_userId_LambdaImpl0(userId));
    }

    /* renamed from: -com_android_server_pm_PackageManagerService_lambda$1 */
    static /* synthetic */ void m5-com_android_server_pm_PackageManagerService_lambda$1(int userId) {
        IActivityManager am = ActivityManagerNative.getDefault();
        if (am != null) {
            Intent intent = new Intent("android.intent.action.ACTION_PREFERRED_ACTIVITY_CHANGED");
            intent.putExtra("android.intent.extra.user_handle", userId);
            try {
                am.broadcastIntent(null, intent, null, null, 0, null, null, null, -1, null, false, false, userId);
            } catch (RemoteException e) {
            }
        }
    }

    /* JADX WARNING: Missing block: B:52:0x0153, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void replacePreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId) {
        if (filter.countActions() != 1) {
            throw new IllegalArgumentException("replacePreferredActivity expects filter to have only 1 action.");
        } else if (filter.countDataAuthorities() == 0 && filter.countDataPaths() == 0 && filter.countDataSchemes() <= 1 && filter.countDataTypes() == 0) {
            int callingUid = Binder.getCallingUid();
            if (!ColorPackageManagerHelper.forbiddenSetPreferredActivity(this, filter)) {
                enforceCrossUserPermission(callingUid, userId, true, false, "replace preferred activity");
                synchronized (this.mPackages) {
                    if (this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0) {
                        if (getUidTargetSdkVersionLockedLPr(callingUid) < 8) {
                            Slog.w(TAG, "Ignoring replacePreferredActivity() from uid " + Binder.getCallingUid());
                            return;
                        }
                        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
                    }
                    PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.get(userId);
                    if (pir != null) {
                        ArrayList<PreferredActivity> existing = pir.findFilters(filter);
                        if (existing != null && existing.size() == 1) {
                            PreferredActivity cur = (PreferredActivity) existing.get(0);
                            if (DEBUG_PREFERRED) {
                                Slog.i(TAG, "Checking replace of preferred:");
                                filter.dump(new LogPrinter(4, TAG), "  ");
                                if (cur.mPref.mAlways) {
                                    Slog.i(TAG, "  -- CUR: mMatch=" + cur.mPref.mMatch);
                                    Slog.i(TAG, "  -- CUR: mSet=" + Arrays.toString(cur.mPref.mSetComponents));
                                    Slog.i(TAG, "  -- CUR: mComponent=" + cur.mPref.mShortComponent);
                                    Slog.i(TAG, "  -- NEW: mMatch=" + (268369920 & match));
                                    Slog.i(TAG, "  -- CUR: mSet=" + Arrays.toString(set));
                                    Slog.i(TAG, "  -- CUR: mComponent=" + activity.flattenToShortString());
                                } else {
                                    Slog.i(TAG, "  -- CUR; not mAlways!");
                                }
                            }
                            if (cur.mPref.mAlways && cur.mPref.mComponent.equals(activity) && cur.mPref.mMatch == (268369920 & match) && cur.mPref.sameSet(set)) {
                                if (DEBUG_PREFERRED) {
                                    Slog.i(TAG, "Replacing with same preferred activity " + cur.mPref.mShortComponent + " for user " + userId + ":");
                                    filter.dump(new LogPrinter(4, TAG), "  ");
                                }
                            }
                        }
                        if (existing != null) {
                            if (DEBUG_PREFERRED) {
                                Slog.i(TAG, existing.size() + " existing preferred matches for:");
                                filter.dump(new LogPrinter(4, TAG), "  ");
                            }
                            for (int i = 0; i < existing.size(); i++) {
                                PreferredActivity pa = (PreferredActivity) existing.get(i);
                                if (DEBUG_PREFERRED) {
                                    Slog.i(TAG, "Removing existing preferred activity " + pa.mPref.mComponent + ":");
                                    pa.dump(new LogPrinter(4, TAG), "  ");
                                }
                                pir.removeFilter(pa);
                            }
                        }
                    }
                    addPreferredActivityInternal(filter, match, set, activity, true, userId, "Replacing preferred");
                }
            }
        } else {
            throw new IllegalArgumentException("replacePreferredActivity expects filter to have no data authorities, paths, or types; and at most one scheme.");
        }
    }

    /* JADX WARNING: Missing block: B:20:0x0065, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void clearPackagePreferredActivities(String packageName) {
        int uid = Binder.getCallingUid();
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            if ((pkg == null || pkg.applicationInfo.uid != uid) && this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0) {
                if (getUidTargetSdkVersionLockedLPr(Binder.getCallingUid()) < 8) {
                    Slog.w(TAG, "Ignoring clearPackagePreferredActivities() from uid " + Binder.getCallingUid());
                    return;
                }
                this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
            }
            int user = UserHandle.getCallingUserId();
            if (clearPackagePreferredActivitiesLPw(packageName, user)) {
                scheduleWritePackageRestrictionsLocked(user);
            }
        }
    }

    boolean clearPackagePreferredActivitiesLPw(String packageName, int userId) {
        ArrayList removed = null;
        boolean changed = false;
        for (int i = 0; i < this.mSettings.mPreferredActivities.size(); i++) {
            int thisUserId = this.mSettings.mPreferredActivities.keyAt(i);
            PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.valueAt(i);
            if (userId == -1 || userId == thisUserId) {
                Iterator<PreferredActivity> it = pir.filterIterator();
                while (it.hasNext()) {
                    PreferredActivity pa = (PreferredActivity) it.next();
                    if (packageName == null || (pa.mPref.mComponent.getPackageName().equals(packageName) && pa.mPref.mAlways)) {
                        if (removed == null) {
                            removed = new ArrayList();
                        }
                        removed.add(pa);
                    }
                }
                if (removed != null) {
                    for (int j = 0; j < removed.size(); j++) {
                        pir.removeFilter((PreferredActivity) removed.get(j));
                    }
                    changed = true;
                }
            }
        }
        if (changed) {
            postPreferredActivityChangedBroadcast(userId);
        }
        return changed;
    }

    private void clearIntentFilterVerificationsLPw(int userId) {
        int packageCount = this.mPackages.size();
        for (int i = 0; i < packageCount; i++) {
            clearIntentFilterVerificationsLPw(((Package) this.mPackages.valueAt(i)).packageName, userId);
        }
    }

    void clearIntentFilterVerificationsLPw(String packageName, int userId) {
        if (userId == -1) {
            if (this.mSettings.removeIntentFilterVerificationLPw(packageName, sUserManager.getUserIds())) {
                for (int oneUserId : sUserManager.getUserIds()) {
                    scheduleWritePackageRestrictionsLocked(oneUserId);
                }
            }
        } else if (this.mSettings.removeIntentFilterVerificationLPw(packageName, userId)) {
            scheduleWritePackageRestrictionsLocked(userId);
        }
    }

    void clearDefaultBrowserIfNeeded(String packageName) {
        for (int oneUserId : sUserManager.getUserIds()) {
            String defaultBrowserPackageName = getDefaultBrowserPackageName(oneUserId);
            if (!TextUtils.isEmpty(defaultBrowserPackageName) && packageName.equals(defaultBrowserPackageName)) {
                setDefaultBrowserPackageName(null, oneUserId);
            }
        }
    }

    public void resetApplicationPreferences(int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
        long identity = Binder.clearCallingIdentity();
        try {
            synchronized (this.mPackages) {
                clearPackagePreferredActivitiesLPw(null, userId);
                this.mSettings.applyDefaultPreferredAppsLPw(this, userId);
                applyFactoryDefaultBrowserLPw(userId);
                clearIntentFilterVerificationsLPw(userId);
                primeDomainVerificationsLPw(userId);
                resetUserChangesToRuntimePermissionsAndFlagsLPw(userId);
                scheduleWritePackageRestrictionsLocked(userId);
            }
            resetNetworkPolicies(userId);
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName) {
        int userId = UserHandle.getCallingUserId();
        synchronized (this.mPackages) {
            PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.get(userId);
            if (pir != null) {
                Iterator<PreferredActivity> it = pir.filterIterator();
                while (it.hasNext()) {
                    PreferredActivity pa = (PreferredActivity) it.next();
                    if (packageName == null || (pa.mPref.mComponent.getPackageName().equals(packageName) && pa.mPref.mAlways)) {
                        if (outFilters != null) {
                            outFilters.add(new IntentFilter(pa));
                        }
                        if (outActivities != null) {
                            outActivities.add(pa.mPref.mComponent);
                        }
                    }
                }
            }
        }
        return 0;
    }

    public void addPersistentPreferredActivity(IntentFilter filter, ComponentName activity, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("addPersistentPreferredActivity can only be run by the system");
        } else if (filter.countActions() == 0) {
            Slog.w(TAG, "Cannot set a preferred activity with no filter actions");
        } else {
            synchronized (this.mPackages) {
                Slog.i(TAG, "Adding persistent preferred activity " + activity + " for user " + userId + ":");
                filter.dump(new LogPrinter(4, TAG), "  ");
                this.mSettings.editPersistentPreferredActivitiesLPw(userId).addFilter(new PersistentPreferredActivity(filter, activity));
                scheduleWritePackageRestrictionsLocked(userId);
                postPreferredActivityChangedBroadcast(userId);
            }
        }
    }

    /* JADX WARNING: Missing block: B:24:0x0061, code:
            if (r8 == null) goto L_0x0089;
     */
    /* JADX WARNING: Missing block: B:25:0x0063, code:
            r4 = 0;
     */
    /* JADX WARNING: Missing block: B:28:0x0068, code:
            if (r4 >= r8.size()) goto L_0x0076;
     */
    /* JADX WARNING: Missing block: B:29:0x006a, code:
            r6.removeFilter((com.android.server.pm.PersistentPreferredActivity) r8.get(r4));
     */
    /* JADX WARNING: Missing block: B:30:0x0073, code:
            r4 = r4 + 1;
     */
    /* JADX WARNING: Missing block: B:31:0x0076, code:
            r1 = true;
            r7 = r8;
     */
    /* JADX WARNING: Missing block: B:36:0x0082, code:
            return;
     */
    /* JADX WARNING: Missing block: B:39:0x0085, code:
            throw r10;
     */
    /* JADX WARNING: Missing block: B:40:0x0086, code:
            r10 = th;
     */
    /* JADX WARNING: Missing block: B:41:0x0087, code:
            r7 = r8;
     */
    /* JADX WARNING: Missing block: B:42:0x0089, code:
            r7 = r8;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void clearPackagePersistentPreferredActivities(String packageName, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("clearPackagePersistentPreferredActivities can only be run by the system");
        }
        ArrayList<PersistentPreferredActivity> removed = null;
        boolean changed = false;
        synchronized (this.mPackages) {
            int i = 0;
            while (i < this.mSettings.mPersistentPreferredActivities.size()) {
                try {
                    PersistentPreferredIntentResolver ppir = (PersistentPreferredIntentResolver) this.mSettings.mPersistentPreferredActivities.valueAt(i);
                    if (userId == this.mSettings.mPersistentPreferredActivities.keyAt(i)) {
                        Iterator<PersistentPreferredActivity> it = ppir.filterIterator();
                        while (true) {
                            ArrayList<PersistentPreferredActivity> removed2 = removed;
                            if (!it.hasNext()) {
                                break;
                            }
                            PersistentPreferredActivity ppa = (PersistentPreferredActivity) it.next();
                            if (ppa.mComponent.getPackageName().equals(packageName)) {
                                if (removed2 == null) {
                                    removed = new ArrayList();
                                } else {
                                    removed = removed2;
                                }
                                removed.add(ppa);
                            } else {
                                removed = removed2;
                            }
                        }
                    }
                    i++;
                } catch (Throwable th) {
                    Throwable th2 = th;
                }
            }
            if (changed) {
                scheduleWritePackageRestrictionsLocked(userId);
                postPreferredActivityChangedBroadcast(userId);
            }
        }
    }

    private void restoreFromXml(XmlPullParser parser, int userId, String expectedStartTag, BlobXmlRestorer functor) throws IOException, XmlPullParserException {
        int type;
        do {
            type = parser.next();
            if (type == 2) {
                break;
            }
        } while (type != 1);
        if (type != 2) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Didn't find start tag during restore");
            }
            return;
        }
        Slog.v(TAG, ":: restoreFromXml() : got to tag " + parser.getName());
        if (expectedStartTag.equals(parser.getName())) {
            do {
            } while (parser.next() == 4);
            Slog.v(TAG, ":: stepped forward, applying functor at tag " + parser.getName());
            functor.apply(parser, userId);
            return;
        }
        if (DEBUG_BACKUP) {
            Slog.e(TAG, "Found unexpected tag " + parser.getName());
        }
    }

    public byte[] getPreferredActivityBackup(int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call getPreferredActivityBackup()");
        }
        ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
        try {
            XmlSerializer serializer = new FastXmlSerializer();
            serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
            serializer.startDocument(null, Boolean.valueOf(true));
            serializer.startTag(null, TAG_PREFERRED_BACKUP);
            synchronized (this.mPackages) {
                this.mSettings.writePreferredActivitiesLPr(serializer, userId, true);
            }
            serializer.endTag(null, TAG_PREFERRED_BACKUP);
            serializer.endDocument();
            serializer.flush();
            return dataStream.toByteArray();
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Unable to write preferred activities for backup", e);
            }
            return null;
        }
    }

    public void restorePreferredActivities(byte[] backup, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call restorePreferredActivities()");
        }
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
            restoreFromXml(parser, userId, TAG_PREFERRED_BACKUP, new BlobXmlRestorer() {
                public void apply(XmlPullParser parser, int userId) throws XmlPullParserException, IOException {
                    synchronized (PackageManagerService.this.mPackages) {
                        PackageManagerService.this.mSettings.readPreferredActivitiesLPw(parser, userId);
                    }
                }
            });
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Exception restoring preferred activities: " + e.getMessage());
            }
        }
    }

    public byte[] getDefaultAppsBackup(int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call getDefaultAppsBackup()");
        }
        ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
        try {
            XmlSerializer serializer = new FastXmlSerializer();
            serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
            serializer.startDocument(null, Boolean.valueOf(true));
            serializer.startTag(null, TAG_DEFAULT_APPS);
            synchronized (this.mPackages) {
                this.mSettings.writeDefaultAppsLPr(serializer, userId);
            }
            serializer.endTag(null, TAG_DEFAULT_APPS);
            serializer.endDocument();
            serializer.flush();
            return dataStream.toByteArray();
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Unable to write default apps for backup", e);
            }
            return null;
        }
    }

    public void restoreDefaultApps(byte[] backup, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call restoreDefaultApps()");
        }
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
            restoreFromXml(parser, userId, TAG_DEFAULT_APPS, new BlobXmlRestorer() {
                public void apply(XmlPullParser parser, int userId) throws XmlPullParserException, IOException {
                    synchronized (PackageManagerService.this.mPackages) {
                        PackageManagerService.this.mSettings.readDefaultAppsLPw(parser, userId);
                    }
                }
            });
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Exception restoring default apps: " + e.getMessage());
            }
        }
    }

    public byte[] getIntentFilterVerificationBackup(int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call getIntentFilterVerificationBackup()");
        }
        ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
        try {
            XmlSerializer serializer = new FastXmlSerializer();
            serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
            serializer.startDocument(null, Boolean.valueOf(true));
            serializer.startTag(null, TAG_INTENT_FILTER_VERIFICATION);
            synchronized (this.mPackages) {
                this.mSettings.writeAllDomainVerificationsLPr(serializer, userId);
            }
            serializer.endTag(null, TAG_INTENT_FILTER_VERIFICATION);
            serializer.endDocument();
            serializer.flush();
            return dataStream.toByteArray();
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Unable to write default apps for backup", e);
            }
            return null;
        }
    }

    public void restoreIntentFilterVerification(byte[] backup, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call restorePreferredActivities()");
        }
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
            restoreFromXml(parser, userId, TAG_INTENT_FILTER_VERIFICATION, new BlobXmlRestorer() {
                public void apply(XmlPullParser parser, int userId) throws XmlPullParserException, IOException {
                    synchronized (PackageManagerService.this.mPackages) {
                        PackageManagerService.this.mSettings.readAllDomainVerificationsLPr(parser, userId);
                        PackageManagerService.this.mSettings.writeLPr();
                    }
                }
            });
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Exception restoring preferred activities: " + e.getMessage());
            }
        }
    }

    public byte[] getPermissionGrantBackup(int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call getPermissionGrantBackup()");
        }
        ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
        try {
            XmlSerializer serializer = new FastXmlSerializer();
            serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
            serializer.startDocument(null, Boolean.valueOf(true));
            serializer.startTag(null, TAG_PERMISSION_BACKUP);
            synchronized (this.mPackages) {
                serializeRuntimePermissionGrantsLPr(serializer, userId);
            }
            serializer.endTag(null, TAG_PERMISSION_BACKUP);
            serializer.endDocument();
            serializer.flush();
            return dataStream.toByteArray();
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Unable to write default apps for backup", e);
            }
            return null;
        }
    }

    public void restorePermissionGrants(byte[] backup, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system may call restorePermissionGrants()");
        }
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
            restoreFromXml(parser, userId, TAG_PERMISSION_BACKUP, new BlobXmlRestorer() {
                public void apply(XmlPullParser parser, int userId) throws XmlPullParserException, IOException {
                    synchronized (PackageManagerService.this.mPackages) {
                        PackageManagerService.this.processRestoredPermissionGrantsLPr(parser, userId);
                    }
                }
            });
        } catch (Exception e) {
            if (DEBUG_BACKUP) {
                Slog.e(TAG, "Exception restoring preferred activities: " + e.getMessage());
            }
        }
    }

    private void serializeRuntimePermissionGrantsLPr(XmlSerializer serializer, int userId) throws IOException {
        serializer.startTag(null, TAG_ALL_GRANTS);
        int N = this.mSettings.mPackages.size();
        for (int i = 0; i < N; i++) {
            boolean pkgGrantsKnown = false;
            for (PermissionState state : ((PackageSetting) this.mSettings.mPackages.valueAt(i)).getPermissionsState().getRuntimePermissionStates(userId)) {
                int grantFlags = state.getFlags();
                if ((grantFlags & 52) == 0) {
                    boolean isGranted = state.isGranted();
                    if (isGranted || (grantFlags & 11) != 0) {
                        String packageName = (String) this.mSettings.mPackages.keyAt(i);
                        if (!pkgGrantsKnown) {
                            serializer.startTag(null, TAG_GRANT);
                            serializer.attribute(null, ATTR_PACKAGE_NAME, packageName);
                            pkgGrantsKnown = true;
                        }
                        boolean userSet = (grantFlags & 1) != 0;
                        boolean userFixed = (grantFlags & 2) != 0;
                        boolean revoke = (grantFlags & 8) != 0;
                        serializer.startTag(null, TAG_PERMISSION);
                        serializer.attribute(null, ATTR_PERMISSION_NAME, state.getName());
                        if (isGranted) {
                            serializer.attribute(null, ATTR_IS_GRANTED, "true");
                        }
                        if (userSet) {
                            serializer.attribute(null, ATTR_USER_SET, "true");
                        }
                        if (userFixed) {
                            serializer.attribute(null, ATTR_USER_FIXED, "true");
                        }
                        if (revoke) {
                            serializer.attribute(null, ATTR_REVOKE_ON_UPGRADE, "true");
                        }
                        serializer.endTag(null, TAG_PERMISSION);
                    }
                }
            }
            if (pkgGrantsKnown) {
                serializer.endTag(null, TAG_GRANT);
            }
        }
        serializer.endTag(null, TAG_ALL_GRANTS);
    }

    private void processRestoredPermissionGrantsLPr(XmlPullParser parser, int userId) throws XmlPullParserException, IOException {
        String pkgName = null;
        int outerDepth = parser.getDepth();
        while (true) {
            int type = parser.next();
            if (type == 1 || (type == 3 && parser.getDepth() <= outerDepth)) {
                scheduleWriteSettingsLocked();
                this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
            } else if (!(type == 3 || type == 4)) {
                String tagName = parser.getName();
                if (tagName.equals(TAG_GRANT)) {
                    pkgName = parser.getAttributeValue(null, ATTR_PACKAGE_NAME);
                    if (DEBUG_BACKUP) {
                        Slog.v(TAG, "+++ Restoring grants for package " + pkgName);
                    }
                } else if (tagName.equals(TAG_PERMISSION)) {
                    boolean isGranted = "true".equals(parser.getAttributeValue(null, ATTR_IS_GRANTED));
                    String permName = parser.getAttributeValue(null, ATTR_PERMISSION_NAME);
                    int newFlagSet = 0;
                    if ("true".equals(parser.getAttributeValue(null, ATTR_USER_SET))) {
                        newFlagSet = 1;
                    }
                    if ("true".equals(parser.getAttributeValue(null, ATTR_USER_FIXED))) {
                        newFlagSet |= 2;
                    }
                    if ("true".equals(parser.getAttributeValue(null, ATTR_REVOKE_ON_UPGRADE))) {
                        newFlagSet |= 8;
                    }
                    if (DEBUG_BACKUP) {
                        Slog.v(TAG, "  + Restoring grant: pkg=" + pkgName + " perm=" + permName + " granted=" + isGranted + " bits=0x" + Integer.toHexString(newFlagSet));
                    }
                    PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                    if (ps != null) {
                        if (DEBUG_BACKUP) {
                            Slog.v(TAG, "        + already installed; applying");
                        }
                        PermissionsState perms = ps.getPermissionsState();
                        BasePermission bp = (BasePermission) this.mSettings.mPermissions.get(permName);
                        if (bp != null) {
                            if (isGranted) {
                                perms.grantRuntimePermission(bp, userId);
                            }
                            if (newFlagSet != 0) {
                                perms.updatePermissionFlags(bp, userId, 11, newFlagSet);
                            }
                        }
                    } else {
                        if (DEBUG_BACKUP) {
                            Slog.v(TAG, "        - not yet installed; saving for later");
                        }
                        this.mSettings.processRestoredPermissionGrantLPr(pkgName, permName, isGranted, newFlagSet, userId);
                    }
                } else {
                    reportSettingsProblem(5, "Unknown element under <perm-grant-backup>: " + tagName);
                    XmlUtils.skipCurrentTag(parser);
                }
            }
        }
        scheduleWriteSettingsLocked();
        this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
    }

    public void addCrossProfileIntentFilter(IntentFilter intentFilter, String ownerPackage, int sourceUserId, int targetUserId, int flags) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
        int callingUid = Binder.getCallingUid();
        enforceOwnerRights(ownerPackage, callingUid);
        enforceShellRestriction("no_debugging_features", callingUid, sourceUserId);
        if (intentFilter.countActions() == 0) {
            Slog.w(TAG, "Cannot set a crossProfile intent filter with no filter actions");
            return;
        }
        synchronized (this.mPackages) {
            CrossProfileIntentFilter newFilter = new CrossProfileIntentFilter(intentFilter, ownerPackage, targetUserId, flags);
            CrossProfileIntentResolver resolver = this.mSettings.editCrossProfileIntentResolverLPw(sourceUserId);
            ArrayList<CrossProfileIntentFilter> existing = resolver.findFilters(intentFilter);
            if (existing != null) {
                int size = existing.size();
                for (int i = 0; i < size; i++) {
                    if (newFilter.equalsIgnoreFilter((CrossProfileIntentFilter) existing.get(i))) {
                        return;
                    }
                }
            }
            resolver.addFilter(newFilter);
            scheduleWritePackageRestrictionsLocked(sourceUserId);
        }
    }

    public void clearCrossProfileIntentFilters(int sourceUserId, String ownerPackage) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
        int callingUid = Binder.getCallingUid();
        enforceOwnerRights(ownerPackage, callingUid);
        enforceShellRestriction("no_debugging_features", callingUid, sourceUserId);
        synchronized (this.mPackages) {
            CrossProfileIntentResolver resolver = this.mSettings.editCrossProfileIntentResolverLPw(sourceUserId);
            for (CrossProfileIntentFilter filter : new ArraySet(resolver.filterSet())) {
                if (filter.getOwnerPackage().equals(ownerPackage)) {
                    resolver.removeFilter(filter);
                }
            }
            scheduleWritePackageRestrictionsLocked(sourceUserId);
        }
    }

    private void enforceOwnerRights(String pkg, int callingUid) {
        if (UserHandle.getAppId(callingUid) != 1000) {
            int callingUserId = UserHandle.getUserId(callingUid);
            PackageInfo pi = getPackageInfo(pkg, 0, callingUserId);
            if (pi == null) {
                throw new IllegalArgumentException("Unknown package " + pkg + " on user " + callingUserId);
            } else if (!UserHandle.isSameApp(pi.applicationInfo.uid, callingUid)) {
                throw new SecurityException("Calling uid " + callingUid + " does not own package " + pkg);
            }
        }
    }

    public ComponentName getHomeActivities(List<ResolveInfo> allHomeCandidates) {
        return getHomeActivitiesAsUser(allHomeCandidates, UserHandle.getCallingUserId());
    }

    private Intent getHomeIntent() {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.HOME");
        intent.addCategory("android.intent.category.DEFAULT");
        return intent;
    }

    private IntentFilter getHomeFilter() {
        IntentFilter filter = new IntentFilter("android.intent.action.MAIN");
        filter.addCategory("android.intent.category.HOME");
        filter.addCategory("android.intent.category.DEFAULT");
        return filter;
    }

    ComponentName getHomeActivitiesAsUser(List<ResolveInfo> allHomeCandidates, int userId) {
        Intent intent = getHomeIntent();
        List<ResolveInfo> list = queryIntentActivitiesInternal(intent, null, 128, userId);
        ResolveInfo preferred = findPreferredActivity(intent, null, 0, list, 0, true, false, false, userId);
        allHomeCandidates.clear();
        if (list != null) {
            for (ResolveInfo ri : list) {
                allHomeCandidates.add(ri);
            }
        }
        if (preferred == null || preferred.activityInfo == null) {
            return null;
        }
        return new ComponentName(preferred.activityInfo.packageName, preferred.activityInfo.name);
    }

    public void setHomeActivity(ComponentName comp, int userId) {
        ArrayList<ResolveInfo> homeActivities = new ArrayList();
        getHomeActivitiesAsUser(homeActivities, userId);
        boolean found = false;
        int size = homeActivities.size();
        ComponentName[] set = new ComponentName[size];
        for (int i = 0; i < size; i++) {
            ActivityInfo info = ((ResolveInfo) homeActivities.get(i)).activityInfo;
            ComponentName activityName = new ComponentName(info.packageName, info.name);
            set[i] = activityName;
            if (!found && activityName.equals(comp)) {
                found = true;
            }
        }
        if (found) {
            replacePreferredActivity(getHomeFilter(), DumpState.DUMP_DEXOPT, set, comp, userId);
            return;
        }
        throw new IllegalArgumentException("Component " + comp + " cannot be home on user " + userId);
    }

    private String getSetupWizardPackageName() {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.SETUP_WIZARD");
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, null, 1835520, UserHandle.myUserId());
        if (matches.size() == 1) {
            return ((ResolveInfo) matches.get(0)).getComponentInfo().packageName;
        }
        Slog.e(TAG, "There should probably be exactly one setup wizard; found " + matches.size() + ": matches=" + matches);
        return null;
    }

    private String getStorageManagerPackageName() {
        List<ResolveInfo> matches = queryIntentActivitiesInternal(new Intent("android.os.storage.action.MANAGE_STORAGE"), null, 1835520, UserHandle.myUserId());
        if (matches.size() == 1) {
            return ((ResolveInfo) matches.get(0)).getComponentInfo().packageName;
        }
        Slog.e(TAG, "There should probably be exactly one storage manager; found " + matches.size() + ": matches=" + matches);
        return null;
    }

    public void setApplicationEnabledSetting(String appPackageName, int newState, int flags, int userId, String callingPackage) {
        if (sUserManager.exists(userId)) {
            if (callingPackage == null) {
                callingPackage = Integer.toString(Binder.getCallingUid());
            }
            setEnabledSetting(appPackageName, null, newState, flags, userId, callingPackage);
        }
    }

    public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags, int userId) {
        if (sUserManager.exists(userId)) {
            setEnabledSetting(componentName.getPackageName(), componentName.getClassName(), newState, flags, userId, null);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:141:0x030c  */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x01da  */
    /* JADX WARNING: Removed duplicated region for block: B:89:0x01de  */
    /* JADX WARNING: Removed duplicated region for block: B:92:0x01e9  */
    /* JADX WARNING: Removed duplicated region for block: B:142:0x0310  */
    /* JADX WARNING: Removed duplicated region for block: B:95:0x01f0  */
    /* JADX WARNING: Missing block: B:97:0x01fe, code:
            r14 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Missing block: B:98:0x0202, code:
            if (r22 == false) goto L_0x021a;
     */
    /* JADX WARNING: Missing block: B:100:?, code:
            r10 = android.os.UserHandle.getUid(r31, r21.appId);
     */
    /* JADX WARNING: Missing block: B:101:0x0210, code:
            if ((r30 & 1) == 0) goto L_0x0336;
     */
    /* JADX WARNING: Missing block: B:102:0x0212, code:
            r8 = true;
     */
    /* JADX WARNING: Missing block: B:103:0x0213, code:
            sendOppoPackageChangedBroadcast(r27, r8, r9, r10, r11);
     */
    /* JADX WARNING: Missing block: B:104:0x021a, code:
            android.os.Binder.restoreCallingIdentity(r14);
     */
    /* JADX WARNING: Missing block: B:105:0x021d, code:
            return;
     */
    /* JADX WARNING: Missing block: B:148:0x0336, code:
            r8 = false;
     */
    /* JADX WARNING: Missing block: B:150:0x033a, code:
            android.os.Binder.restoreCallingIdentity(r14);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @OppoHook(level = OppoHookType.CHANGE_CODE, note = "Bin.Wang@Plf.Framework, 2017.02.21: modify for guest mode", property = OppoRomType.ROM)
    private void setEnabledSetting(String packageName, String className, int newState, int flags, int userId, String callingPackage) {
        if (newState == 0 || newState == 1 || newState == 2 || newState == 3 || newState == 4) {
            int permission;
            PackageSetting pkgSetting;
            int uid = Binder.getCallingUid();
            int pid = Binder.getCallingPid();
            if (uid == 1000) {
                permission = 0;
            } else {
                permission = this.mContext.checkCallingOrSelfPermission("android.permission.CHANGE_COMPONENT_ENABLED_STATE");
            }
            enforceCrossUserPermission(uid, userId, false, true, "set enabled");
            boolean allowedByPermission = permission == 0;
            boolean sendNow = false;
            String componentName = className == null ? packageName : className;
            synchronized (this.mPackages) {
                pkgSetting = (PackageSetting) this.mSettings.mPackages.get(packageName);
                if (pkgSetting != null) {
                } else if (className == null) {
                    throw new IllegalArgumentException("Unknown package: " + packageName);
                } else {
                    throw new IllegalArgumentException("Unknown component: " + packageName + "/" + className);
                }
            }
            if (!UserHandle.isSameApp(uid, pkgSetting.appId)) {
                if (!allowedByPermission) {
                    throw new SecurityException("Permission Denial: attempt to change component state from pid=" + Binder.getCallingPid() + ", uid=" + uid + ", package uid=" + pkgSetting.appId);
                } else if (this.mProtectedPackages.isPackageStateProtected(userId, packageName)) {
                    throw new SecurityException("Cannot disable a protected package: " + packageName);
                }
            }
            synchronized (this.mPackages) {
                ArrayList<String> components;
                boolean newPackage;
                if (uid == SHELL_UID) {
                    int oldState = pkgSetting.getEnabled(userId);
                    if (!(className == null && ((oldState == 3 || oldState == 0 || oldState == 1) && (newState == 3 || newState == 0 || newState == 1)))) {
                        throw new SecurityException("Shell cannot change component state for " + packageName + "/" + className + " to " + newState);
                    }
                }
                if (className != null) {
                    Package pkg = pkgSetting.pkg;
                    if (pkg == null || !pkg.hasComponentClassName(className)) {
                        if (pkg != null) {
                            if (pkg.applicationInfo != null) {
                                if (pkg == null || pkg.applicationInfo.targetSdkVersion < 16) {
                                    Slog.w(TAG, "Failed setComponentEnabledSetting: component class " + className + " does not exist in " + packageName);
                                } else {
                                    throw new IllegalArgumentException("Component class " + className + " does not exist in " + packageName);
                                }
                            }
                        }
                        throw new IllegalArgumentException("Unknown component: " + packageName + "/" + className);
                    }
                    switch (newState) {
                        case 0:
                            if (!pkgSetting.restoreComponentLPw(className, userId)) {
                                return;
                            }
                        case 1:
                            if (!pkgSetting.enableComponentLPw(className, userId)) {
                                return;
                            }
                            immediatelyWritePackageRestrictionsLocked(userId);
                            components = this.mPendingBroadcasts.get(userId, packageName);
                            newPackage = components != null;
                            if (newPackage) {
                                components = new ArrayList();
                            }
                            if (!components.contains(componentName)) {
                                components.add(componentName);
                            }
                            if ((flags & 1) == 0) {
                                if (newPackage) {
                                    this.mPendingBroadcasts.put(userId, packageName, components);
                                }
                                if (!this.mHandler.hasMessages(1)) {
                                    this.mHandler.sendEmptyMessageDelayed(1, 10000);
                                    break;
                                }
                            }
                            sendNow = true;
                            this.mPendingBroadcasts.remove(userId, packageName);
                            break;
                            break;
                        case 2:
                            if (!pkgSetting.disableComponentLPw(className, userId)) {
                                return;
                            }
                        default:
                            Slog.e(TAG, "Invalid new component state: " + newState);
                            return;
                    }
                } else if (pkgSetting.getEnabled(userId) == newState) {
                    return;
                } else {
                    if (newState == 0 || newState == 1) {
                        callingPackage = null;
                    }
                    pkgSetting.setEnabled(newState, userId, callingPackage);
                }
                immediatelyWritePackageRestrictionsLocked(userId);
                components = this.mPendingBroadcasts.get(userId, packageName);
                if (components != null) {
                }
                if (newPackage) {
                }
                if (components.contains(componentName)) {
                }
                if ((flags & 1) == 0) {
                }
            }
        } else {
            throw new IllegalArgumentException("Invalid new component state: " + newState);
        }
    }

    public void flushPackageRestrictionsAsUser(int userId) {
        if (sUserManager.exists(userId)) {
            enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "flushPackageRestrictions");
            synchronized (this.mPackages) {
                this.mSettings.writePackageRestrictionsLPr(userId);
                this.mDirtyUsers.remove(Integer.valueOf(userId));
                if (this.mDirtyUsers.isEmpty()) {
                    this.mHandler.removeMessages(14);
                }
            }
        }
    }

    private void sendPackageChangedBroadcast(String packageName, boolean killFlag, ArrayList<String> componentNames, int packageUid) {
        if (DEBUG_INSTALL) {
            Log.v(TAG, "Sending package changed: package=" + packageName + " components=" + componentNames);
        }
        Bundle extras = new Bundle(4);
        extras.putString("android.intent.extra.changed_component_name", (String) componentNames.get(0));
        String[] nameList = new String[componentNames.size()];
        componentNames.toArray(nameList);
        extras.putStringArray("android.intent.extra.changed_component_name_list", nameList);
        extras.putBoolean("android.intent.extra.DONT_KILL_APP", killFlag);
        extras.putInt("android.intent.extra.UID", packageUid);
        int flags = !componentNames.contains(packageName) ? 1073741824 : 0;
        int[] iArr = new int[1];
        iArr[0] = UserHandle.getUserId(packageUid);
        sendPackageBroadcast("android.intent.action.PACKAGE_CHANGED", packageName, extras, flags, null, null, iArr);
    }

    public void setPackageStoppedState(String packageName, boolean stopped, int userId) {
        if (sUserManager.exists(userId)) {
            int uid = Binder.getCallingUid();
            boolean allowedByPermission = this.mContext.checkCallingOrSelfPermission("android.permission.CHANGE_COMPONENT_ENABLED_STATE") == 0;
            enforceCrossUserPermission(uid, userId, true, true, "stop package");
            synchronized (this.mPackages) {
                if (this.mSettings.setPackageStoppedStateLPw(this, packageName, stopped, allowedByPermission, uid, userId)) {
                    scheduleWritePackageRestrictionsLocked(userId);
                }
            }
        }
    }

    public String getInstallerPackageName(String packageName) {
        String installerPackageNameLPr;
        synchronized (this.mPackages) {
            installerPackageNameLPr = this.mSettings.getInstallerPackageNameLPr(packageName);
        }
        return installerPackageNameLPr;
    }

    public boolean isOrphaned(String packageName) {
        boolean isOrphaned;
        synchronized (this.mPackages) {
            isOrphaned = this.mSettings.isOrphaned(packageName);
        }
        return isOrphaned;
    }

    public int getApplicationEnabledSetting(String packageName, int userId) {
        if (!sUserManager.exists(userId)) {
            return 2;
        }
        int applicationEnabledSettingLPr;
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get enabled");
        synchronized (this.mPackages) {
            applicationEnabledSettingLPr = this.mSettings.getApplicationEnabledSettingLPr(packageName, userId);
        }
        return applicationEnabledSettingLPr;
    }

    public int getComponentEnabledSetting(ComponentName componentName, int userId) {
        if (!sUserManager.exists(userId)) {
            return 2;
        }
        int componentEnabledSettingLPr;
        enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get component enabled");
        synchronized (this.mPackages) {
            componentEnabledSettingLPr = this.mSettings.getComponentEnabledSettingLPr(componentName, userId);
        }
        return componentEnabledSettingLPr;
    }

    public void enterSafeMode() {
        enforceSystemOrRoot("Only the system can request entering safe mode");
        if (!this.mSystemReady) {
            this.mSafeMode = true;
        }
    }

    public void systemReady() {
        this.mSystemReady = true;
        CarrierAppUtils.disableCarrierAppsUntilPrivileged(this.mContext.getOpPackageName(), this, this.mContext.getContentResolver(), 0);
        boolean compatibilityModeEnabled = Global.getInt(this.mContext.getContentResolver(), "compatibility_mode", 1) == 1;
        PackageParser.setCompatibilityModeEnabled(compatibilityModeEnabled);
        if (DEBUG_SETTINGS) {
            Log.d(TAG, "compatibility mode:" + compatibilityModeEnabled);
        }
        int[] grantPermissionsUserIds = EMPTY_INT_ARRAY;
        synchronized (this.mPackages) {
            ArrayList<PreferredActivity> removed = new ArrayList();
            for (int i = 0; i < this.mSettings.mPreferredActivities.size(); i++) {
                PreferredActivity pa;
                PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.valueAt(i);
                removed.clear();
                for (PreferredActivity pa2 : pir.filterSet()) {
                    if (this.mActivities.mActivities.get(pa2.mPref.mComponent) == null) {
                        removed.add(pa2);
                    }
                }
                if (removed.size() > 0) {
                    for (int r = 0; r < removed.size(); r++) {
                        pa2 = (PreferredActivity) removed.get(r);
                        Slog.w(TAG, "Removing dangling preferred activity: " + pa2.mPref.mComponent);
                        pir.removeFilter(pa2);
                    }
                    this.mSettings.writePackageRestrictionsLPr(this.mSettings.mPreferredActivities.keyAt(i));
                }
            }
            for (int userId : UserManagerService.getInstance().getUserIds()) {
                if (!this.mSettings.areDefaultRuntimePermissionsGrantedLPr(userId)) {
                    grantPermissionsUserIds = ArrayUtils.appendInt(grantPermissionsUserIds, userId);
                }
            }
        }
        sUserManager.systemReady();
        for (int userId2 : grantPermissionsUserIds) {
            this.mDefaultPermissionPolicy.grantDefaultPermissions(userId2);
        }
        boolean supportRuntimeAlert = hasSystemFeature("oppo.runtime.permission.alert.support", 0);
        this.mDefaultPermissionPolicy.grantOppoFixRuntimePermssion(0, supportRuntimeAlert);
        if (supportRuntimeAlert) {
            this.mDefaultPermissionPolicy.grantOppoNonFixRuntimePermssion(0, supportRuntimeAlert);
        } else {
            this.mDefaultPermissionPolicy.grantNonFixedPermToOtherSystemApps(0);
        }
        if (supportRuntimeAlert) {
            for (int userId22 : UserManagerService.getInstance().getUserIds()) {
                try {
                    UserInfo info = sUserManager.getUserInfo(userId22);
                    if (info != null && info.isManagedProfile()) {
                        Slog.d(TAG, "PMS start grant runtime for managed profile user " + userId22);
                        this.mDefaultPermissionPolicy.grantOppoFixRuntimePermssion(userId22, supportRuntimeAlert);
                        this.mDefaultPermissionPolicy.grantOppoNonFixRuntimePermssion(userId22, supportRuntimeAlert);
                    }
                } catch (Exception e) {
                }
            }
        }
        if (grantPermissionsUserIds == EMPTY_INT_ARRAY) {
            this.mDefaultPermissionPolicy.scheduleReadDefaultPermissionExceptions();
        }
        if (this.mPostSystemReadyMessages != null) {
            for (Message msg : this.mPostSystemReadyMessages) {
                msg.sendToTarget();
            }
            this.mPostSystemReadyMessages = null;
        }
        this.mCompatibilityHelper.initUpdateBroadcastReceiver();
        if (ColorPackageManagerHelper.dataAppContainCtsPkg()) {
            this.mIsCtsAppInstall = true;
        }
        if (hasSystemFeature(OPPO_SECURITYPAY_FEATURE, 0)) {
            Slog.i(TAG, "start init SandboxApp ");
            ColorSecurePayManager.getInstance().monitorSecurePay();
        }
        ((StorageManager) this.mContext.getSystemService(StorageManager.class)).registerListener(this.mStorageListener);
        this.mInstallerService.systemReady();
        this.mPackageDexOptimizer.systemReady();
        ((MountServiceInternal) LocalServices.getService(MountServiceInternal.class)).addExternalStoragePolicy(new ExternalStorageMountPolicy() {
            public int getMountMode(int uid, String packageName) {
                if (Process.isIsolated(uid)) {
                    return 0;
                }
                if (PackageManagerService.this.checkUidPermission("android.permission.WRITE_MEDIA_STORAGE", uid) == 0 || PackageManagerService.this.checkUidPermission("android.permission.READ_EXTERNAL_STORAGE", uid) == -1) {
                    return 1;
                }
                if (PackageManagerService.this.checkUidPermission("android.permission.WRITE_EXTERNAL_STORAGE", uid) == -1) {
                    return 2;
                }
                return 3;
            }

            public boolean hasExternalStorage(int uid, String packageName) {
                return true;
            }
        });
        reconcileUsers(StorageManager.UUID_PRIVATE_INTERNAL);
        reconcileApps(StorageManager.UUID_PRIVATE_INTERNAL);
        if (this.mCtaPermsController != null) {
            this.mCtaPermsController.systemReady();
        }
        this.mLowRamFeature = hasSystemFeature(OPPO_LOWRAM_FEATURE, 0);
        this.mHandler.post(this.mReadSystemDefaultApp);
        if (!this.mLowRamFeature) {
            IntentFilter intentFilterSkinChanged = new IntentFilter();
            intentFilterSkinChanged.addAction(ACTION_SKIN_CHANGED);
            this.mContext.registerReceiver(this.mSkinChangedReceiver, intentFilterSkinChanged);
        }
        if (EXP_VERSION) {
            this.mBlackAppInstallHelper = new BlackAppInstallHelper(this.mContext);
            this.mBlackAppInstallHelper.initUpdateBroadcastReceiver();
        }
    }

    private void onPackageAdded(String packageName) {
        if (!this.mLowRamFeature && !TextUtils.isEmpty(packageName)) {
            try {
                Drawable cacheIcon = getApplicationInfo(packageName, 0, this.mContext.getUserId()).loadIcon(this.mContext.getPackageManager());
                int h = (((int) this.mContext.getResources().getDimension(17104896)) * 3) / 4;
                int w = h;
                int width = cacheIcon.getIntrinsicWidth();
                int height = cacheIcon.getIntrinsicHeight();
                int maxCacheNum = ColorPackageManagerHelper.getIconCacheMaxNum();
                Bitmap bitmap = drawableToBitmap(cacheIcon);
                if (bitmap != null) {
                    if (mAppIconsCache.size() < maxCacheNum) {
                        mAppIconsCache.put(packageName, bitmap);
                    }
                    Matrix matrix = new Matrix();
                    matrix.postScale(((float) h) / ((float) width), ((float) h) / ((float) height));
                    Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
                    if (mAppIconsCacheCompress.size() < maxCacheNum) {
                        mAppIconsCacheCompress.put(packageName, newbmp);
                    }
                    Log.i(TAG, "add appIconsCache:" + packageName);
                }
                if (mActivityIconsCache.size() < maxCacheNum) {
                    cacheActivityIconsData(packageName);
                }
            } catch (Exception e) {
                Log.e(TAG, "add appIconsCache failed!" + packageName + e.getMessage());
            }
        }
    }

    private void onPackageRemoved(String packageName) {
        if (!TextUtils.isEmpty(packageName)) {
            try {
                if (mAppIconsCache.get(packageName) != null) {
                    mAppIconsCache.remove(packageName);
                }
                if (mAppIconsCacheCompress.get(packageName) != null) {
                    mAppIconsCacheCompress.remove(packageName);
                }
                ArrayList<String> deleteList = new ArrayList();
                for (Entry entry : mActivityIconsCache.entrySet()) {
                    String key = (String) entry.getKey();
                    if (packageName.equals(key.split("/")[0])) {
                        deleteList.add(key);
                    }
                }
                for (String deleteName : deleteList) {
                    mActivityIconsCache.remove(deleteName);
                }
                Log.d(TAG, "remove appIconsCache:" + packageName);
                for (Entry entryObserver : this.mPackageDeleteList.entrySet()) {
                    final IPackageDeleteObserver observer = (IPackageDeleteObserver) entryObserver.getValue();
                    try {
                        new IPackageDeleteObserver.Stub() {
                            public void packageDeleted(String packageName, int returnCode) {
                                if (observer != null) {
                                    try {
                                        observer.packageDeleted(packageName, returnCode);
                                    } catch (RemoteException e) {
                                    }
                                }
                            }
                        }.packageDeleted(packageName, 1);
                    } catch (RemoteException re) {
                        re.printStackTrace();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void cacheAppIconsData() {
        if (!this.mLowRamFeature) {
            if (this.mThemeIconsChanged) {
                Log.d(TAG, "cacheAppIconsData. The theme icons file has changed! Not to cache.");
                return;
            }
            Log.d(TAG, "cacheAppIconsData. start");
            try {
                PackageManager pm = this.mContext.getPackageManager();
                Bitmap defaultBitmap = ((BitmapDrawable) pm.getDefaultActivityIcon()).getBitmap();
                List<PackageInfo> apps = getInstalledPackages(0, this.mContext.getUserId()).getList();
                int h = (((int) this.mContext.getResources().getDimension(17104896)) * 3) / 4;
                int w = h;
                int num = 0;
                int maxCacheNum = ColorPackageManagerHelper.getIconCacheMaxNum();
                if (maxCacheNum != 0) {
                    this.mThemeIconsFileObserver.startWatching();
                    Iterator app$iterator = apps.iterator();
                    while (true) {
                        int num2 = num;
                        if (!app$iterator.hasNext()) {
                            num = num2;
                            break;
                        }
                        PackageInfo app = (PackageInfo) app$iterator.next();
                        if (this.mThemeIconsChanged) {
                            Log.d(TAG, "cacheAppIconsData. The theme icons file has changed!");
                            mAppIconsCache.clear();
                            mAppIconsCacheCompress.clear();
                            num = num2;
                            break;
                        }
                        try {
                            Drawable cacheIcon = app.applicationInfo.loadIcon(pm);
                            int width = cacheIcon.getIntrinsicWidth();
                            int height = cacheIcon.getIntrinsicHeight();
                            Bitmap bitmap = drawableToBitmap(cacheIcon);
                            if (bitmap == null || bitmap.sameAs(defaultBitmap)) {
                                num = num2;
                            } else {
                                mAppIconsCache.put(app.packageName, bitmap);
                                Matrix matrix = new Matrix();
                                matrix.postScale(((float) h) / ((float) width), ((float) h) / ((float) height));
                                mAppIconsCacheCompress.put(app.packageName, Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true));
                                num = num2 + 1;
                                if (num2 >= maxCacheNum) {
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            Slog.e(TAG, "init appIconsCache!" + e.getMessage());
                            num = num2;
                        }
                    }
                    this.mThemeIconsFileObserver.stopWatching();
                    Log.d(TAG, "cacheAppIconsData. end");
                }
            } catch (Exception e2) {
                Slog.e(TAG, "init appIconsCache failed!" + e2.getMessage());
            }
        }
    }

    public static Bitmap drawableToBitmap(Drawable drawable) {
        Bitmap bitmap;
        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if (bitmapDrawable.getBitmap() != null) {
                return bitmapDrawable.getBitmap();
            }
        }
        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
            bitmap = Bitmap.createBitmap(1, 1, Config.ARGB_8888);
        } else {
            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Config.ARGB_8888);
        }
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        return bitmap;
    }

    private void cacheActivityIconsData(String packageName) {
        if (!this.mLowRamFeature) {
            if (this.mThemeIconsChanged) {
                Log.d(TAG, "cacheActivityIconsData. The theme icons file has changed! Not to cache.");
                return;
            }
            Log.d(TAG, "cacheActivityIconsData. start");
            try {
                List<LauncherActivityInfo> installApps = ((LauncherApps) this.mContext.getSystemService("launcherapps")).getActivityList(packageName, UserHandle.OWNER);
                int densityDpi = this.mContext.getResources().getDisplayMetrics().densityDpi;
                int count = 0;
                int maxCacheNum = ColorPackageManagerHelper.getIconCacheMaxNum();
                if (maxCacheNum != 0) {
                    this.mThemeIconsFileObserver.startWatching();
                    for (LauncherActivityInfo launcherActivityInfo : installApps) {
                        if (this.mThemeIconsChanged) {
                            Log.d(TAG, "cacheActivityIconsData. The theme icons file has changed!");
                            mActivityIconsCache.clear();
                            break;
                        }
                        try {
                            ComponentName componentName = launcherActivityInfo.getComponentName();
                            String keyName = componentName.getPackageName() + "/" + componentName.getClassName();
                            Bitmap bitmap = drawableToBitmap(launcherActivityInfo.getBadgedIcon(densityDpi));
                            if (bitmap != null) {
                                mActivityIconsCache.put(keyName, bitmap);
                                count++;
                                if (count >= maxCacheNum) {
                                    break;
                                }
                            } else {
                                continue;
                            }
                        } catch (Exception ex) {
                            Slog.e(TAG, "init activityIconsCache!" + ex.getMessage());
                        }
                    }
                    this.mThemeIconsFileObserver.stopWatching();
                    Log.d(TAG, "cacheActivityIconsData. end");
                }
            } catch (Exception e) {
                Slog.e(TAG, "init activityIconsCache failed!" + e.getMessage());
            }
        }
    }

    public boolean isSafeMode() {
        return this.mSafeMode;
    }

    public boolean hasSystemUidErrors() {
        return this.mHasSystemUidErrors;
    }

    static String arrayToString(int[] array) {
        StringBuffer buf = new StringBuffer(128);
        buf.append('[');
        if (array != null) {
            for (int i = 0; i < array.length; i++) {
                if (i > 0) {
                    buf.append(", ");
                }
                buf.append(array[i]);
            }
        }
        buf.append(']');
        return buf.toString();
    }

    public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ResultReceiver resultReceiver) {
        new PackageManagerShellCommand(this).exec(this, in, out, err, args, resultReceiver);
    }

    /* JADX WARNING: Removed duplicated region for block: B:604:0x0f55 A:{SYNTHETIC, EDGE_INSN: B:604:0x0f55->B:540:0x0f55 ?: BREAK  , EDGE_INSN: B:604:0x0f55->B:540:0x0f55 ?: BREAK  } */
    /* JADX WARNING: Removed duplicated region for block: B:521:0x0f07 A:{Catch:{ IOException -> 0x0f22, all -> 0x0f5e }} */
    /* JADX WARNING: Removed duplicated region for block: B:521:0x0f07 A:{Catch:{ IOException -> 0x0f22, all -> 0x0f5e }} */
    /* JADX WARNING: Removed duplicated region for block: B:604:0x0f55 A:{SYNTHETIC, EDGE_INSN: B:604:0x0f55->B:540:0x0f55 ?: BREAK  , EDGE_INSN: B:604:0x0f55->B:540:0x0f55 ?: BREAK  , EDGE_INSN: B:604:0x0f55->B:540:0x0f55 ?: BREAK  } */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        BufferedReader in;
        AutoCloseable in2;
        Throwable th;
        if (this.mContext.checkCallingOrSelfPermission("android.permission.DUMP") != 0) {
            pw.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
            return;
        }
        int user;
        String name;
        DumpState dumpState = new DumpState();
        boolean fullPreferred = false;
        boolean checkin = false;
        String packageName = null;
        ArraySet<String> permissionNames = null;
        int opti = 0;
        while (opti < args.length) {
            String opt = args[opti];
            if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
                break;
            }
            opti++;
            if (!"-a".equals(opt)) {
                if ("-h".equals(opt)) {
                    pw.println("Package manager dump options:");
                    pw.println("  [-h] [-f] [--checkin] [cmd] ...");
                    pw.println("    --checkin: dump for a checkin");
                    pw.println("    -f: print details of intent filters");
                    pw.println("    -h: print this help");
                    pw.println("  cmd may be one of:");
                    pw.println("    l[ibraries]: list known shared libraries");
                    pw.println("    f[eatures]: list device features");
                    pw.println("    k[eysets]: print known keysets");
                    pw.println("    r[esolvers] [activity|service|receiver|content]: dump intent resolvers");
                    pw.println("    perm[issions]: dump permissions");
                    pw.println("    permission [name ...]: dump declaration and use of given permission");
                    pw.println("    pref[erred]: print preferred package settings");
                    pw.println("    preferred-xml [--full]: print preferred package settings as xml");
                    pw.println("    prov[iders]: dump content providers");
                    pw.println("    p[ackages]: dump installed packages");
                    pw.println("    s[hared-users]: dump shared user IDs");
                    pw.println("    m[essages]: print collected runtime messages");
                    pw.println("    v[erifiers]: print package verifier info");
                    pw.println("    d[omain-preferred-apps]: print domains preferred apps");
                    pw.println("    i[ntent-filter-verifiers]|ifv: print intent filter verifier info");
                    pw.println("    version: print database version info");
                    pw.println("    write: write current settings now");
                    pw.println("    installs: details about install sessions");
                    pw.println("    check-permission <permission> <package> [<user>]: does pkg hold perm?");
                    pw.println("    dexopt: dump dexopt state");
                    pw.println("    compiler-stats: dump compiler statistics");
                    pw.println("    <package.name>: info about given package");
                    return;
                } else if ("--checkin".equals(opt)) {
                    checkin = true;
                } else if ("-f".equals(opt)) {
                    dumpState.setOptionEnabled(1);
                } else {
                    pw.println("Unknown argument: " + opt + "; use -h for help");
                }
            }
        }
        if (opti < args.length) {
            String cmd = args[opti];
            opti++;
            if (PLATFORM_PACKAGE_NAME.equals(cmd) || cmd.contains(".")) {
                packageName = cmd;
                dumpState.setOptionEnabled(1);
            } else if ("check-permission".equals(cmd)) {
                if (opti >= args.length) {
                    pw.println("Error: check-permission missing permission argument");
                    return;
                }
                String perm = args[opti];
                opti++;
                if (opti >= args.length) {
                    pw.println("Error: check-permission missing package argument");
                    return;
                }
                String pkg = args[opti];
                opti++;
                user = UserHandle.getUserId(Binder.getCallingUid());
                if (opti < args.length) {
                    try {
                        user = Integer.parseInt(args[opti]);
                    } catch (NumberFormatException e) {
                        pw.println("Error: check-permission user argument is not a number: " + args[opti]);
                        return;
                    }
                }
                pw.println(checkPermission(perm, pkg, user));
                return;
            } else if ("l".equals(cmd) || "libraries".equals(cmd)) {
                dumpState.setDump(1);
            } else if (OppoCrashClearManager.FEATURE.equals(cmd) || "features".equals(cmd)) {
                dumpState.setDump(2);
            } else if ("r".equals(cmd) || "resolvers".equals(cmd)) {
                if (opti >= args.length) {
                    dumpState.setDump(60);
                } else {
                    while (opti < args.length) {
                        name = args[opti];
                        if ("a".equals(name) || "activity".equals(name)) {
                            dumpState.setDump(4);
                        } else if ("s".equals(name) || OppoProcessManager.RESUME_REASON_SERVICE_STR.equals(name)) {
                            dumpState.setDump(8);
                        } else if ("r".equals(name) || "receiver".equals(name)) {
                            dumpState.setDump(16);
                        } else if (OppoCrashClearManager.CLEAR_TIME.equals(name) || "content".equals(name)) {
                            dumpState.setDump(32);
                        } else {
                            pw.println("Error: unknown resolver table type: " + name);
                            return;
                        }
                        opti++;
                    }
                }
            } else if (TAG_PERMISSION.equals(cmd) || "permissions".equals(cmd)) {
                dumpState.setDump(64);
            } else if ("permission".equals(cmd)) {
                if (opti >= args.length) {
                    pw.println("Error: permission requires permission name");
                    return;
                }
                permissionNames = new ArraySet();
                while (opti < args.length) {
                    permissionNames.add(args[opti]);
                    opti++;
                }
                dumpState.setDump(448);
            } else if ("pref".equals(cmd) || "preferred".equals(cmd)) {
                dumpState.setDump(4096);
            } else if ("preferred-xml".equals(cmd)) {
                dumpState.setDump(8192);
                if (opti < args.length && "--full".equals(args[opti])) {
                    fullPreferred = true;
                    opti++;
                }
            } else if ("d".equals(cmd) || "domain-preferred-apps".equals(cmd)) {
                dumpState.setDump(262144);
            } else if (OppoCrashClearManager.CRASH_CLEAR_NAME.equals(cmd) || "packages".equals(cmd)) {
                dumpState.setDump(128);
            } else if ("s".equals(cmd) || "shared-users".equals(cmd)) {
                dumpState.setDump(256);
            } else if ("prov".equals(cmd) || "providers".equals(cmd)) {
                dumpState.setDump(1024);
            } else if ("m".equals(cmd) || "messages".equals(cmd)) {
                dumpState.setDump(512);
            } else if ("v".equals(cmd) || "verifiers".equals(cmd)) {
                dumpState.setDump(2048);
            } else if ("i".equals(cmd) || "ifv".equals(cmd) || "intent-filter-verifiers".equals(cmd)) {
                dumpState.setDump(131072);
            } else if ("version".equals(cmd)) {
                dumpState.setDump(32768);
            } else if ("k".equals(cmd) || "keysets".equals(cmd)) {
                dumpState.setDump(16384);
            } else if ("installs".equals(cmd)) {
                dumpState.setDump(65536);
            } else if ("log".equals(cmd)) {
                configLogTag(pw, args, opti);
                return;
            } else if ("frozen".equals(cmd)) {
                dumpState.setDump(DumpState.DUMP_FROZEN);
            } else if ("dexopt".equals(cmd)) {
                dumpState.setDump(DumpState.DUMP_DEXOPT);
            } else if ("compiler-stats".equals(cmd)) {
                dumpState.setDump(DumpState.DUMP_COMPILER_STATS);
            } else if ("write".equals(cmd)) {
                synchronized (this.mPackages) {
                    this.mSettings.writeLPr();
                    pw.println("Settings written.");
                }
                return;
            } else if ("whitelist".equals(cmd)) {
                if (args.length == 1) {
                    pw.print(this.mCompatibilityHelper.dumpToString());
                    return;
                }
                this.mCompatibilityHelper.dump(pw, args, opti);
                return;
            }
        }
        if (checkin) {
            pw.println("vers,1");
        }
        synchronized (this.mPackages) {
            ActivityIntentResolver activityIntentResolver;
            String str;
            int i;
            BufferedReader bufferedReader;
            String line;
            if (dumpState.isDumping(32768) && packageName == null && !checkin) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                pw.println("Database versions:");
                this.mSettings.dumpVersionLPr(new IndentingPrintWriter(pw, "  "));
            }
            if (dumpState.isDumping(2048) && packageName == null) {
                if (!checkin) {
                    if (dumpState.onTitlePrinted()) {
                        pw.println();
                    }
                    pw.println("Verifiers:");
                    pw.print("  Required: ");
                    pw.print(this.mRequiredVerifierPackage);
                    pw.print(" (uid=");
                    pw.print(getPackageUid(this.mRequiredVerifierPackage, 268435456, 0));
                    pw.println(")");
                } else if (this.mRequiredVerifierPackage != null) {
                    pw.print("vrfy,");
                    pw.print(this.mRequiredVerifierPackage);
                    pw.print(",");
                    pw.println(getPackageUid(this.mRequiredVerifierPackage, 268435456, 0));
                }
            }
            if (dumpState.isDumping(131072) && packageName == null) {
                if (this.mIntentFilterVerifierComponent != null) {
                    String verifierPackageName = this.mIntentFilterVerifierComponent.getPackageName();
                    if (!checkin) {
                        if (dumpState.onTitlePrinted()) {
                            pw.println();
                        }
                        pw.println("Intent Filter Verifier:");
                        pw.print("  Using: ");
                        pw.print(verifierPackageName);
                        pw.print(" (uid=");
                        pw.print(getPackageUid(verifierPackageName, 268435456, 0));
                        pw.println(")");
                    } else if (verifierPackageName != null) {
                        pw.print("ifv,");
                        pw.print(verifierPackageName);
                        pw.print(",");
                        pw.println(getPackageUid(verifierPackageName, 268435456, 0));
                    }
                } else {
                    pw.println();
                    pw.println("No Intent Filter Verifier available!");
                }
            }
            if (dumpState.isDumping(1) && packageName == null) {
                boolean printedHeader = false;
                for (String name2 : this.mSharedLibraries.keySet()) {
                    SharedLibraryEntry ent = (SharedLibraryEntry) this.mSharedLibraries.get(name2);
                    if (checkin) {
                        pw.print("lib,");
                    } else {
                        if (!printedHeader) {
                            if (dumpState.onTitlePrinted()) {
                                pw.println();
                            }
                            pw.println("Libraries:");
                            printedHeader = true;
                        }
                        pw.print("  ");
                    }
                    pw.print(name2);
                    if (!checkin) {
                        pw.print(" -> ");
                    }
                    if (ent.path != null) {
                        if (checkin) {
                            pw.print(",jar,");
                            pw.print(ent.path);
                        } else {
                            pw.print("(jar) ");
                            pw.print(ent.path);
                        }
                    } else if (checkin) {
                        pw.print(",apk,");
                        pw.print(ent.apk);
                    } else {
                        pw.print("(apk) ");
                        pw.print(ent.apk);
                    }
                    pw.println();
                }
            }
            if (dumpState.isDumping(2) && packageName == null) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                if (!checkin) {
                    pw.println("Features:");
                }
                for (FeatureInfo feat : this.mAvailableFeatures.values()) {
                    if (checkin) {
                        pw.print("feat,");
                        pw.print(feat.name);
                        pw.print(",");
                        pw.println(feat.version);
                    } else {
                        pw.print("  ");
                        pw.print(feat.name);
                        if (feat.version > 0) {
                            pw.print(" version=");
                            pw.print(feat.version);
                        }
                        pw.println();
                    }
                }
            }
            if (!checkin && dumpState.isDumping(4)) {
                activityIntentResolver = this.mActivities;
                if (dumpState.getTitlePrinted()) {
                    str = "\nActivity Resolver Table:";
                } else {
                    str = "Activity Resolver Table:";
                }
                if (activityIntentResolver.dump(pw, str, "  ", packageName, dumpState.isOptionEnabled(1), true)) {
                    dumpState.setTitlePrinted(true);
                }
            }
            if (!checkin && dumpState.isDumping(16)) {
                activityIntentResolver = this.mReceivers;
                if (dumpState.getTitlePrinted()) {
                    str = "\nReceiver Resolver Table:";
                } else {
                    str = "Receiver Resolver Table:";
                }
                if (activityIntentResolver.dump(pw, str, "  ", packageName, dumpState.isOptionEnabled(1), true)) {
                    dumpState.setTitlePrinted(true);
                }
            }
            if (!checkin && dumpState.isDumping(8)) {
                ServiceIntentResolver serviceIntentResolver = this.mServices;
                if (dumpState.getTitlePrinted()) {
                    str = "\nService Resolver Table:";
                } else {
                    str = "Service Resolver Table:";
                }
                if (serviceIntentResolver.dump(pw, str, "  ", packageName, dumpState.isOptionEnabled(1), true)) {
                    dumpState.setTitlePrinted(true);
                }
            }
            if (!checkin && dumpState.isDumping(32)) {
                ProviderIntentResolver providerIntentResolver = this.mProviders;
                if (dumpState.getTitlePrinted()) {
                    str = "\nProvider Resolver Table:";
                } else {
                    str = "Provider Resolver Table:";
                }
                if (providerIntentResolver.dump(pw, str, "  ", packageName, dumpState.isOptionEnabled(1), true)) {
                    dumpState.setTitlePrinted(true);
                }
            }
            if (!checkin && dumpState.isDumping(4096)) {
                for (i = 0; i < this.mSettings.mPreferredActivities.size(); i++) {
                    PreferredIntentResolver pir = (PreferredIntentResolver) this.mSettings.mPreferredActivities.valueAt(i);
                    user = this.mSettings.mPreferredActivities.keyAt(i);
                    if (dumpState.getTitlePrinted()) {
                        str = "\nPreferred Activities User " + user + ":";
                    } else {
                        str = "Preferred Activities User " + user + ":";
                    }
                    if (pir.dump(pw, str, "  ", packageName, true, false)) {
                        dumpState.setTitlePrinted(true);
                    }
                }
            }
            if (!checkin && dumpState.isDumping(8192)) {
                pw.flush();
                OutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(fd));
                XmlSerializer serializer = new FastXmlSerializer();
                try {
                    serializer.setOutput(bufferedOutputStream, StandardCharsets.UTF_8.name());
                    serializer.startDocument(null, Boolean.valueOf(true));
                    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", true);
                    this.mSettings.writePreferredActivitiesLPr(serializer, 0, fullPreferred);
                    serializer.endDocument();
                    serializer.flush();
                } catch (IllegalArgumentException e2) {
                    pw.println("Failed writing: " + e2);
                } catch (IllegalStateException e3) {
                    pw.println("Failed writing: " + e3);
                } catch (IOException e4) {
                    pw.println("Failed writing: " + e4);
                }
            }
            if (!checkin) {
                if (dumpState.isDumping(262144) && packageName == null) {
                    pw.println();
                    if (this.mSettings.mPackages.size() == 0) {
                        pw.println("No applications!");
                        pw.println();
                    } else {
                        String prefix = "  ";
                        Collection<PackageSetting> allPackageSettings = this.mSettings.mPackages.values();
                        if (allPackageSettings.size() == 0) {
                            pw.println("No domain preferred apps!");
                            pw.println();
                        } else {
                            pw.println("App verification status:");
                            pw.println();
                            int count = 0;
                            for (PackageSetting ps : allPackageSettings) {
                                IntentFilterVerificationInfo ivi = ps.getIntentFilterVerificationInfo();
                                if (!(ivi == null || ivi.getPackageName() == null)) {
                                    pw.println("  Package: " + ivi.getPackageName());
                                    pw.println("  Domains: " + ivi.getDomainsString());
                                    pw.println("  Status:  " + ivi.getStatusString());
                                    pw.println();
                                    count++;
                                }
                            }
                            if (count == 0) {
                                pw.println("  No app verification established.");
                                pw.println();
                            }
                            for (int userId : sUserManager.getUserIds()) {
                                pw.println("App linkages for user " + userId + ":");
                                pw.println();
                                count = 0;
                                for (PackageSetting ps2 : allPackageSettings) {
                                    long status = ps2.getDomainVerificationStatusForUser(userId);
                                    if ((status >> 32) != 0) {
                                        pw.println("  Package: " + ps2.name);
                                        pw.println("  Domains: " + dumpDomainString(ps2.name));
                                        pw.println("  Status:  " + IntentFilterVerificationInfo.getStatusStringFromValue(status));
                                        pw.println();
                                        count++;
                                    }
                                }
                                if (count == 0) {
                                    pw.println("  No configured app linkages.");
                                    pw.println();
                                }
                            }
                        }
                    }
                }
            }
            if (!checkin && dumpState.isDumping(64)) {
                this.mSettings.dumpPermissionsLPr(pw, packageName, permissionNames, dumpState);
                if (packageName == null && permissionNames == null) {
                    for (int iperm = 0; iperm < this.mAppOpPermissionPackages.size(); iperm++) {
                        if (iperm == 0) {
                            if (dumpState.onTitlePrinted()) {
                                pw.println();
                            }
                            pw.println("AppOp Permissions:");
                        }
                        pw.print("  AppOp Permission ");
                        pw.print((String) this.mAppOpPermissionPackages.keyAt(iperm));
                        pw.println(":");
                        ArraySet<String> pkgs = (ArraySet) this.mAppOpPermissionPackages.valueAt(iperm);
                        for (int ipkg = 0; ipkg < pkgs.size(); ipkg++) {
                            pw.print("    ");
                            pw.println((String) pkgs.valueAt(ipkg));
                        }
                    }
                }
            }
            if (!checkin && dumpState.isDumping(1024)) {
                Provider p;
                boolean printedSomething = false;
                for (Provider p2 : this.mProviders.mProviders.values()) {
                    if (packageName == null || packageName.equals(p2.info.packageName)) {
                        if (!printedSomething) {
                            if (dumpState.onTitlePrinted()) {
                                pw.println();
                            }
                            pw.println("Registered ContentProviders:");
                            printedSomething = true;
                        }
                        pw.print("  ");
                        p2.printComponentShortName(pw);
                        pw.println(":");
                        pw.print("    ");
                        pw.println(p2.toString());
                    }
                }
                printedSomething = false;
                for (Entry<String, Provider> entry : this.mProvidersByAuthority.entrySet()) {
                    p2 = (Provider) entry.getValue();
                    if (packageName == null || packageName.equals(p2.info.packageName)) {
                        if (!printedSomething) {
                            if (dumpState.onTitlePrinted()) {
                                pw.println();
                            }
                            pw.println("ContentProvider Authorities:");
                            printedSomething = true;
                        }
                        pw.print("  [");
                        pw.print((String) entry.getKey());
                        pw.println("]:");
                        pw.print("    ");
                        pw.println(p2.toString());
                        if (!(p2.info == null || p2.info.applicationInfo == null)) {
                            String appInfo = p2.info.applicationInfo.toString();
                            pw.print("      applicationInfo=");
                            pw.println(appInfo);
                        }
                    }
                }
            }
            if (!checkin && dumpState.isDumping(16384)) {
                this.mSettings.mKeySetManagerService.dumpLPr(pw, packageName, dumpState);
            }
            if (dumpState.isDumping(128)) {
                this.mSettings.dumpPackagesLPr(pw, packageName, permissionNames, dumpState, checkin);
            }
            if (dumpState.isDumping(256)) {
                this.mSettings.dumpSharedUsersLPr(pw, packageName, permissionNames, dumpState, checkin);
            }
            if (!checkin && dumpState.isDumping(64) && packageName == null) {
                this.mSettings.dumpRestoredPermissionGrantsLPr(pw, dumpState);
            }
            if (!checkin && dumpState.isDumping(65536) && packageName == null) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                this.mInstallerService.dump(new IndentingPrintWriter(pw, "  ", 120));
            }
            if (!checkin && dumpState.isDumping(DumpState.DUMP_FROZEN) && packageName == null) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                IndentingPrintWriter indentingPrintWriter = new IndentingPrintWriter(pw, "  ", 120);
                indentingPrintWriter.println();
                indentingPrintWriter.println("Frozen packages:");
                indentingPrintWriter.increaseIndent();
                if (this.mFrozenPackages.size() == 0) {
                    indentingPrintWriter.println("(none)");
                } else {
                    for (i = 0; i < this.mFrozenPackages.size(); i++) {
                        indentingPrintWriter.println((String) this.mFrozenPackages.valueAt(i));
                    }
                }
                indentingPrintWriter.decreaseIndent();
            }
            if (!checkin && dumpState.isDumping(DumpState.DUMP_DEXOPT)) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                dumpDexoptStateLPr(pw, packageName);
            }
            if (!checkin && dumpState.isDumping(DumpState.DUMP_COMPILER_STATS)) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                dumpCompilerStatsLPr(pw, packageName);
            }
            if (!checkin && dumpState.isDumping(512) && packageName == null) {
                if (dumpState.onTitlePrinted()) {
                    pw.println();
                }
                this.mSettings.dumpReadMessagesLPr(pw, dumpState);
                pw.println();
                pw.println("Package warning messages:");
                in = null;
                try {
                    bufferedReader = new BufferedReader(new FileReader(getSettingsProblemFile()));
                    while (true) {
                        try {
                            line = bufferedReader.readLine();
                            if (line == null) {
                                break;
                            }
                            if (!line.contains("ignored: updated version")) {
                                pw.println(line);
                            }
                        } catch (IOException e5) {
                            in2 = bufferedReader;
                            IoUtils.closeQuietly(in2);
                            in = null;
                            try {
                                bufferedReader = new BufferedReader(new FileReader(getSettingsProblemFile()));
                                while (true) {
                                    try {
                                        line = bufferedReader.readLine();
                                        if (line == null) {
                                        }
                                    } catch (IOException e6) {
                                        in2 = bufferedReader;
                                        IoUtils.closeQuietly(in2);
                                    } catch (Throwable th2) {
                                        th = th2;
                                        in = bufferedReader;
                                        IoUtils.closeQuietly(in);
                                        throw th;
                                    }
                                }
                                IoUtils.closeQuietly(bufferedReader);
                            } catch (IOException e7) {
                                IoUtils.closeQuietly(in2);
                            } catch (Throwable th3) {
                                th = th3;
                                IoUtils.closeQuietly(in);
                                throw th;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            in = bufferedReader;
                            IoUtils.closeQuietly(in);
                            throw th;
                        }
                    }
                    IoUtils.closeQuietly(bufferedReader);
                } catch (IOException e8) {
                    IoUtils.closeQuietly(in2);
                    in = null;
                    bufferedReader = new BufferedReader(new FileReader(getSettingsProblemFile()));
                    while (true) {
                        line = bufferedReader.readLine();
                        if (line == null) {
                        }
                    }
                    IoUtils.closeQuietly(bufferedReader);
                } catch (Throwable th5) {
                    th = th5;
                    IoUtils.closeQuietly(in);
                    throw th;
                }
            }
            if (checkin && dumpState.isDumping(512)) {
                in = null;
                bufferedReader = new BufferedReader(new FileReader(getSettingsProblemFile()));
                while (true) {
                    line = bufferedReader.readLine();
                    if (line == null) {
                        break;
                    }
                    if (!line.contains("ignored: updated version")) {
                        pw.print("msg,");
                        pw.println(line);
                    }
                }
                IoUtils.closeQuietly(bufferedReader);
            }
        }
    }

    protected void configLogTag(PrintWriter pw, String[] args, int opti) {
        if (opti + 1 >= args.length) {
            pw.println("  Invalid argument!");
            return;
        }
        String tag = args[opti];
        boolean on = "on".equals(args[opti + 1]);
        DBG_IS_LOGGABLE = Log.isLoggable(TAG, 3);
        if (tag.equals("a")) {
            DEBUG_SETTINGS = on;
            DEBUG_PREFERRED = on;
            DEBUG_UPGRADE = on;
            DEBUG_DOMAIN_VERIFICATION = on;
            DEBUG_BACKUP = on;
            DEBUG_INSTALL = on;
            DEBUG_SD_INSTALL = on;
            DEBUG_REMOVE = on;
            DEBUG_SHOW_INFO = on;
            DEBUG_PACKAGE_INFO = on;
            DEBUG_INTENT_MATCHING = on;
            DEBUG_PACKAGE_SCANNING = on;
            DEBUG_VERIFY = on;
            DEBUG_BROADCASTS = on;
            DEBUG_DEXOPT = on;
            DEBUG_ABI_SELECTION = on;
            DEBUG_EPHEMERAL = on;
            DEBUG_TRIAGED_MISSING = on;
            DEBUG_APP_DATA = on;
            if (this.mCtaPermsController != null) {
                this.mCtaPermsController.configDebugFlag(on);
            }
        } else if (tag.equals("se")) {
            DEBUG_SETTINGS = on;
        } else if (tag.equals("pr")) {
            DEBUG_PREFERRED = on;
        } else if (tag.equals("up")) {
            DEBUG_UPGRADE = on;
        } else if (tag.equals("in")) {
            DEBUG_INSTALL = on;
            DEBUG_SD_INSTALL = on;
            DEBUG_BROADCASTS = on;
        }
    }

    private void dumpDexoptStateLPr(PrintWriter pw, String packageName) {
        IndentingPrintWriter ipw = new IndentingPrintWriter(pw, "  ", 120);
        ipw.println();
        ipw.println("Dexopt state:");
        ipw.increaseIndent();
        Collection<Package> packages;
        if (packageName != null) {
            Package targetPackage = (Package) this.mPackages.get(packageName);
            if (targetPackage != null) {
                packages = Collections.singletonList(targetPackage);
            } else {
                ipw.println("Unable to find package: " + packageName);
                return;
            }
        }
        packages = this.mPackages.values();
        for (Package pkg : packages) {
            ipw.println("[" + pkg.packageName + "]");
            ipw.increaseIndent();
            this.mPackageDexOptimizer.dumpDexoptState(ipw, pkg);
            ipw.decreaseIndent();
        }
    }

    private void dumpCompilerStatsLPr(PrintWriter pw, String packageName) {
        IndentingPrintWriter ipw = new IndentingPrintWriter(pw, "  ", 120);
        ipw.println();
        ipw.println("Compiler stats:");
        ipw.increaseIndent();
        Collection<Package> packages;
        if (packageName != null) {
            Package targetPackage = (Package) this.mPackages.get(packageName);
            if (targetPackage != null) {
                packages = Collections.singletonList(targetPackage);
            } else {
                ipw.println("Unable to find package: " + packageName);
                return;
            }
        }
        packages = this.mPackages.values();
        for (Package pkg : packages) {
            ipw.println("[" + pkg.packageName + "]");
            ipw.increaseIndent();
            PackageStats stats = getCompilerPackageStats(pkg.packageName);
            if (stats == null) {
                ipw.println("(No recorded stats)");
            } else {
                stats.dump(ipw);
            }
            ipw.decreaseIndent();
        }
    }

    private String dumpDomainString(String packageName) {
        List<IntentFilterVerificationInfo> iviList = getIntentFilterVerifications(packageName).getList();
        List<IntentFilter> filters = getAllIntentFilters(packageName).getList();
        ArraySet<String> result = new ArraySet();
        if (iviList.size() > 0) {
            for (IntentFilterVerificationInfo ivi : iviList) {
                for (String host : ivi.getDomains()) {
                    result.add(host);
                }
            }
        }
        if (filters != null && filters.size() > 0) {
            for (IntentFilter filter : filters) {
                if (filter.hasCategory("android.intent.category.BROWSABLE") && (filter.hasDataScheme("http") || filter.hasDataScheme("https"))) {
                    result.addAll(filter.getHostsList());
                }
            }
        }
        StringBuilder sb = new StringBuilder(result.size() * 16);
        for (String domain : result) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(domain);
        }
        return sb.toString();
    }

    static String getEncryptKey() {
        try {
            String sdEncKey = SystemKeyStore.getInstance().retrieveKeyHexString(SD_ENCRYPTION_KEYSTORE_NAME);
            if (sdEncKey == null) {
                sdEncKey = SystemKeyStore.getInstance().generateNewKeyHexString(128, SD_ENCRYPTION_ALGORITHM, SD_ENCRYPTION_KEYSTORE_NAME);
                if (sdEncKey == null) {
                    Slog.e(TAG, "Failed to create encryption keys");
                    return null;
                }
            }
            return sdEncKey;
        } catch (NoSuchAlgorithmException nsae) {
            Slog.e(TAG, "Failed to create encryption keys with exception: " + nsae);
            return null;
        } catch (IOException ioe) {
            Slog.e(TAG, "Failed to retrieve encryption keys with exception: " + ioe);
            return null;
        }
    }

    public void updateExternalMediaStatus(final boolean mediaStatus, final boolean reportStatus) {
        int i = 0;
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000) {
            synchronized (this.mPackages) {
                Log.i(TAG, "Updating external media status from " + (this.mMediaMounted ? "mounted" : "unmounted") + " to " + (mediaStatus ? "mounted" : "unmounted"));
                if (DEBUG_SD_INSTALL) {
                    Log.i(TAG, "updateExternalMediaStatus:: mediaStatus=" + mediaStatus + ", mMediaMounted=" + this.mMediaMounted);
                }
                if (mediaStatus == this.mMediaMounted) {
                    PackageHandler packageHandler = this.mHandler;
                    if (reportStatus) {
                        i = 1;
                    }
                    this.mHandler.sendMessage(packageHandler.obtainMessage(12, i, -1));
                    return;
                }
                this.mMediaMounted = mediaStatus;
                this.mHandler.post(new Runnable() {
                    public void run() {
                        PackageManagerService.this.updateExternalMediaStatusInner(mediaStatus, reportStatus, true);
                    }
                });
                return;
            }
        }
        throw new SecurityException("Media status can only be updated by the system");
    }

    public void scanAvailableAsecs() {
        updateExternalMediaStatusInner(true, false, false);
    }

    private void updateExternalMediaStatusInner(boolean isMounted, boolean reportStatus, boolean externalStorage) {
        ArrayMap<AsecInstallArgs, String> processCids = new ArrayMap();
        int[] uidArr = EmptyArray.INT;
        String[] list = PackageHelper.getSecureContainerList();
        if (ArrayUtils.isEmpty(list)) {
            Log.i(TAG, "No secure containers found");
        } else {
            synchronized (this.mPackages) {
                for (String cid : list) {
                    if (!PackageInstallerService.isStageName(cid)) {
                        if (DEBUG_SD_INSTALL) {
                            Log.i(TAG, "Processing container " + cid);
                        }
                        String pkgName = getAsecPackageName(cid);
                        if (pkgName == null) {
                            Slog.i(TAG, "Found stale container " + cid + " with no package name");
                        } else {
                            if (DEBUG_SD_INSTALL) {
                                Log.i(TAG, "Looking for pkg : " + pkgName);
                            }
                            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(pkgName);
                            if (ps == null) {
                                Slog.i(TAG, "Found stale container " + cid + " with no matching settings");
                            } else if (!externalStorage || isMounted || isExternal(ps)) {
                                AsecInstallArgs args = new AsecInstallArgs(cid, InstructionSets.getAppDexInstructionSets(ps), ps.isForwardLocked());
                                if (ps.codePathString == null || !ps.codePathString.startsWith(args.getCodePath())) {
                                    Slog.i(TAG, "Found stale container " + cid + ": expected codePath=" + ps.codePathString);
                                } else {
                                    if (DEBUG_SD_INSTALL) {
                                        Log.i(TAG, "Container : " + cid + " corresponds to pkg : " + pkgName + " at code path: " + ps.codePathString);
                                    }
                                    processCids.put(args, ps.codePathString);
                                    int uid = ps.appId;
                                    if (uid != -1) {
                                        uidArr = ArrayUtils.appendInt(uidArr, uid);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Arrays.sort(uidArr);
        }
        if (isMounted) {
            if (DEBUG_SD_INSTALL) {
                Log.i(TAG, "Loading packages");
            }
            loadMediaPackages(processCids, uidArr, externalStorage);
            startCleaningPackages();
            this.mInstallerService.onSecureContainersAvailable();
            return;
        }
        if (DEBUG_SD_INSTALL) {
            Log.i(TAG, "Unloading packages");
        }
        unloadMediaPackages(processCids, uidArr, reportStatus);
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, ArrayList<ApplicationInfo> infos, IIntentReceiver finishedReceiver) {
        int size = infos.size();
        String[] packageNames = new String[size];
        int[] packageUids = new int[size];
        for (int i = 0; i < size; i++) {
            ApplicationInfo info = (ApplicationInfo) infos.get(i);
            packageNames[i] = info.packageName;
            packageUids[i] = info.uid;
        }
        sendResourcesChangedBroadcast(mediaStatus, replacing, packageNames, packageUids, finishedReceiver);
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, ArrayList<String> pkgList, int[] uidArr, IIntentReceiver finishedReceiver) {
        sendResourcesChangedBroadcast(mediaStatus, replacing, (String[]) pkgList.toArray(new String[pkgList.size()]), uidArr, finishedReceiver);
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, String[] pkgList, int[] uidArr, IIntentReceiver finishedReceiver) {
        if (pkgList.length > 0) {
            String action;
            Bundle extras = new Bundle();
            extras.putStringArray("android.intent.extra.changed_package_list", pkgList);
            if (uidArr != null) {
                extras.putIntArray("android.intent.extra.changed_uid_list", uidArr);
            }
            if (replacing) {
                extras.putBoolean("android.intent.extra.REPLACING", replacing);
            }
            if (mediaStatus) {
                action = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";
            } else {
                action = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";
            }
            sendPackageBroadcast(action, null, extras, 0, null, finishedReceiver, null);
        }
    }

    private void loadMediaPackages(ArrayMap<AsecInstallArgs, String> processCids, int[] uidArr, boolean externalStorage) {
        ArrayList<String> pkgList = new ArrayList();
        for (AsecInstallArgs args : processCids.keySet()) {
            String codePath = (String) processCids.get(args);
            if (DEBUG_SD_INSTALL) {
                Log.i(TAG, "Loading container : " + args.cid);
            }
            int retCode = -18;
            if (args.doPreInstall(1) != 1) {
                Slog.e(TAG, "Failed to mount cid : " + args.cid + " when installing from sdcard");
                Log.w(TAG, "Container " + args.cid + " is stale, retCode=" + -18);
            } else {
                if (codePath != null) {
                    if (codePath.startsWith(args.getCodePath())) {
                        int parseFlags = this.mDefParseFlags;
                        if (args.isExternalAsec()) {
                            parseFlags |= 32;
                        }
                        if (args.isFwdLocked()) {
                            parseFlags |= 16;
                        }
                        synchronized (this.mInstallLock) {
                            Package pkg = null;
                            try {
                                pkg = scanPackageTracedLI(new File(codePath), parseFlags, 262144, 0, null);
                            } catch (PackageManagerException e) {
                                Slog.w(TAG, "Failed to scan " + codePath + ": " + e.getMessage());
                            }
                            if (pkg != null) {
                                synchronized (this.mPackages) {
                                    retCode = 1;
                                    pkgList.add(pkg.packageName);
                                    args.doPostInstall(1, pkg.applicationInfo.uid);
                                }
                            } else {
                                Slog.i(TAG, "Failed to install pkg from  " + codePath + " from sdcard");
                            }
                            try {
                            } catch (Throwable th) {
                                if (retCode != 1) {
                                    Log.w(TAG, "Container " + args.cid + " is stale, retCode=" + retCode);
                                }
                            }
                        }
                        if (retCode != 1) {
                            Log.w(TAG, "Container " + args.cid + " is stale, retCode=" + retCode);
                        }
                    }
                }
                Slog.e(TAG, "Container " + args.cid + " cachepath " + args.getCodePath() + " does not match one in settings " + codePath);
                Log.w(TAG, "Container " + args.cid + " is stale, retCode=" + -18);
            }
        }
        synchronized (this.mPackages) {
            VersionInfo ver;
            String volumeUuid;
            if (externalStorage) {
                ver = this.mSettings.getExternalVersion();
            } else {
                ver = this.mSettings.getInternalVersion();
            }
            if (externalStorage) {
                volumeUuid = "primary_physical";
            } else {
                volumeUuid = StorageManager.UUID_PRIVATE_INTERNAL;
            }
            int updateFlags = 1;
            if (ver.sdkVersion != this.mSdkVersion) {
                logCriticalInfo(4, "Platform changed from " + ver.sdkVersion + " to " + this.mSdkVersion + "; regranting permissions for external");
                updateFlags = 7;
            }
            updatePermissionsLPw(null, null, volumeUuid, updateFlags);
            ver.forceCurrent();
            this.mSettings.writeLPr();
        }
        if (pkgList.size() > 0) {
            sendResourcesChangedBroadcast(true, false, (ArrayList) pkgList, uidArr, null);
        }
    }

    private void unloadAllContainers(Set<AsecInstallArgs> cidArgs) {
        for (AsecInstallArgs arg : cidArgs) {
            synchronized (this.mInstallLock) {
                arg.doPostDeleteLI(false);
            }
        }
    }

    private void unloadMediaPackages(ArrayMap<AsecInstallArgs, String> processCids, int[] uidArr, boolean reportStatus) {
        PackageFreezer packageFreezer;
        Throwable th;
        Throwable th2;
        if (DEBUG_SD_INSTALL) {
            Log.i(TAG, "unloading media packages");
        }
        ArrayList pkgList = new ArrayList();
        ArrayList<AsecInstallArgs> failedList = new ArrayList();
        Set<AsecInstallArgs> keys = processCids.keySet();
        for (AsecInstallArgs args : keys) {
            String pkgName = args.getPackageName();
            if (DEBUG_SD_INSTALL) {
                Log.i(TAG, "Trying to unload pkg : " + pkgName);
            }
            PackageRemovedInfo outInfo = new PackageRemovedInfo();
            synchronized (this.mInstallLock) {
                Throwable th3 = null;
                packageFreezer = null;
                try {
                    packageFreezer = freezePackageForDelete(pkgName, 1, "unloadMediaPackages");
                    boolean res = deletePackageLIF(pkgName, null, false, null, 1, outInfo, false, null);
                    if (packageFreezer != null) {
                        try {
                            packageFreezer.close();
                        } catch (Throwable th4) {
                            th3 = th4;
                        }
                    }
                    if (th3 != null) {
                        throw th3;
                    } else {
                        if (res) {
                            pkgList.add(pkgName);
                        } else {
                            Slog.e(TAG, "Failed to delete pkg from sdcard : " + pkgName);
                            failedList.add(args);
                        }
                    }
                } catch (Throwable th22) {
                    Throwable th5 = th22;
                    th22 = th;
                    th = th5;
                }
            }
        }
        synchronized (this.mPackages) {
            if (pkgList.size() > 0) {
                if (DEBUG_SD_INSTALL) {
                    Log.i(TAG, "update mSettings.writeLP ");
                }
                this.mSettings.writeLPr();
            }
        }
        if (pkgList.size() > 0) {
            final boolean z = reportStatus;
            final Set<AsecInstallArgs> set = keys;
            sendResourcesChangedBroadcast(false, false, pkgList, uidArr, new IIntentReceiver.Stub() {
                public void performReceive(Intent intent, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) throws RemoteException {
                    PackageManagerService.this.mHandler.sendMessage(PackageManagerService.this.mHandler.obtainMessage(12, z ? 1 : 0, 1, set));
                }
            });
            return;
        }
        this.mHandler.sendMessage(this.mHandler.obtainMessage(12, reportStatus ? 1 : 0, -1, keys));
        return;
        if (packageFreezer != null) {
            try {
                packageFreezer.close();
            } catch (Throwable th6) {
                if (th22 == null) {
                    th22 = th6;
                } else if (th22 != th6) {
                    th22.addSuppressed(th6);
                }
            }
        }
        if (th22 != null) {
            throw th22;
        }
        throw th;
    }

    private void loadPrivatePackages(final VolumeInfo vol) {
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerService.this.loadPrivatePackagesInner(vol);
            }
        });
    }

    private void loadPrivatePackagesInner(VolumeInfo vol) {
        String volumeUuid = vol.fsUuid;
        if (TextUtils.isEmpty(volumeUuid)) {
            Slog.e(TAG, "Loading internal storage is probably a mistake; ignoring");
            return;
        }
        VersionInfo ver;
        ArrayList<PackageFreezer> freezers = new ArrayList();
        ArrayList<ApplicationInfo> loaded = new ArrayList();
        int parseFlags = this.mDefParseFlags | 32;
        synchronized (this.mPackages) {
            ver = this.mSettings.findOrCreateVersion(volumeUuid);
            List<PackageSetting> packages = this.mSettings.getVolumePackagesLPr(volumeUuid);
        }
        for (PackageSetting ps : packages) {
            freezers.add(freezePackage(ps.name, "loadPrivatePackagesInner"));
            synchronized (this.mInstallLock) {
                try {
                    loaded.add(scanPackageTracedLI(ps.codePath, parseFlags, 16384, 0, null).applicationInfo);
                } catch (PackageManagerException e) {
                    Slog.w(TAG, "Failed to scan " + ps.codePath + ": " + e.getMessage());
                }
                if (!Build.FINGERPRINT.equals(ver.fingerprint)) {
                    clearAppDataLIF(ps.pkg, -1, 515);
                }
            }
        }
        StorageManager sm = (StorageManager) this.mContext.getSystemService(StorageManager.class);
        UserManager um = (UserManager) this.mContext.getSystemService(UserManager.class);
        UserManagerInternal umInternal = getUserManagerInternal();
        for (UserInfo user : um.getUsers()) {
            int flags;
            if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
                flags = 3;
            } else {
                if (umInternal.isUserRunning(user.id)) {
                    flags = 1;
                } else {
                    continue;
                }
            }
            try {
                sm.prepareUserStorage(volumeUuid, user.id, user.serialNumber, flags);
                synchronized (this.mInstallLock) {
                    reconcileAppsDataLI(volumeUuid, user.id, flags);
                }
            } catch (IllegalStateException e2) {
                Slog.w(TAG, "Failed to prepare storage: " + e2);
            }
        }
        synchronized (this.mPackages) {
            int updateFlags = 1;
            if (ver.sdkVersion != this.mSdkVersion) {
                logCriticalInfo(4, "Platform changed from " + ver.sdkVersion + " to " + this.mSdkVersion + "; regranting permissions for " + volumeUuid);
                updateFlags = 7;
            }
            updatePermissionsLPw(null, null, volumeUuid, updateFlags);
            ver.forceCurrent();
            this.mSettings.writeLPr();
        }
        for (PackageFreezer freezer : freezers) {
            freezer.close();
        }
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "Loaded packages " + loaded);
        }
        sendResourcesChangedBroadcast(true, false, loaded, null);
    }

    private void unloadPrivatePackages(final VolumeInfo vol) {
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerService.this.unloadPrivatePackagesInner(vol);
            }
        });
    }

    private void unloadPrivatePackagesInner(VolumeInfo vol) {
        PackageFreezer packageFreezer;
        Throwable th;
        Throwable th2;
        String volumeUuid = vol.fsUuid;
        if (TextUtils.isEmpty(volumeUuid)) {
            Slog.e(TAG, "Unloading internal storage is probably a mistake; ignoring");
            return;
        }
        ArrayList<ApplicationInfo> unloaded = new ArrayList();
        synchronized (this.mInstallLock) {
            synchronized (this.mPackages) {
                for (PackageSetting ps : this.mSettings.getVolumePackagesLPr(volumeUuid)) {
                    if (ps.pkg != null) {
                        ApplicationInfo info = ps.pkg.applicationInfo;
                        PackageRemovedInfo outInfo = new PackageRemovedInfo();
                        Throwable th3 = null;
                        packageFreezer = null;
                        try {
                            packageFreezer = freezePackageForDelete(ps.name, 1, "unloadPrivatePackagesInner");
                            if (deletePackageLIF(ps.name, null, false, null, 1, outInfo, false, null)) {
                                unloaded.add(info);
                            } else {
                                Slog.w(TAG, "Failed to unload " + ps.codePath);
                            }
                            if (packageFreezer != null) {
                                try {
                                    packageFreezer.close();
                                } catch (Throwable th4) {
                                    th3 = th4;
                                }
                            }
                            if (th3 != null) {
                                throw th3;
                            } else {
                                AttributeCache.instance().removePackage(ps.name);
                            }
                        } catch (Throwable th22) {
                            Throwable th5 = th22;
                            th22 = th;
                            th = th5;
                        }
                    }
                }
                this.mSettings.writeLPr();
            }
        }
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "Unloaded packages " + unloaded);
        }
        sendResourcesChangedBroadcast(false, false, unloaded, null);
        ResourcesManager.getInstance().invalidatePath(vol.getPath().getAbsolutePath());
        for (int i = 0; i < 3; i++) {
            System.gc();
            System.runFinalization();
        }
        return;
        if (packageFreezer != null) {
            try {
                packageFreezer.close();
            } catch (Throwable th6) {
                if (th22 == null) {
                    th22 = th6;
                } else if (th22 != th6) {
                    th22.addSuppressed(th6);
                }
            }
        }
        if (th22 != null) {
            throw th22;
        }
        throw th;
    }

    void prepareUserData(int userId, int userSerial, int flags) {
        synchronized (this.mInstallLock) {
            for (VolumeInfo vol : ((StorageManager) this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes()) {
                prepareUserDataLI(vol.getFsUuid(), userId, userSerial, flags, true);
            }
        }
    }

    private void prepareUserDataLI(String volumeUuid, int userId, int userSerial, int flags, boolean allowRecover) {
        try {
            ((StorageManager) this.mContext.getSystemService(StorageManager.class)).prepareUserStorage(volumeUuid, userId, userSerial, flags);
            if (!((flags & 1) == 0 || this.mOnlyCore)) {
                UserManagerService.enforceSerialNumber(Environment.getDataUserDeDirectory(volumeUuid, userId), userSerial);
                if (Objects.equals(volumeUuid, StorageManager.UUID_PRIVATE_INTERNAL)) {
                    UserManagerService.enforceSerialNumber(Environment.getDataSystemDeDirectory(userId), userSerial);
                }
            }
            if (!((flags & 2) == 0 || this.mOnlyCore)) {
                UserManagerService.enforceSerialNumber(Environment.getDataUserCeDirectory(volumeUuid, userId), userSerial);
                if (Objects.equals(volumeUuid, StorageManager.UUID_PRIVATE_INTERNAL)) {
                    UserManagerService.enforceSerialNumber(Environment.getDataSystemCeDirectory(userId), userSerial);
                }
            }
            synchronized (this.mInstallLock) {
                this.mInstaller.createUserData(volumeUuid, userId, userSerial, flags);
            }
        } catch (Exception e) {
            logCriticalInfo(5, "Destroying user " + userId + " on volume " + volumeUuid + " because we failed to prepare: " + e);
            destroyUserDataLI(volumeUuid, userId, 3);
            if (allowRecover) {
                prepareUserDataLI(volumeUuid, userId, userSerial, flags, false);
            }
        }
    }

    void destroyUserData(int userId, int flags) {
        synchronized (this.mInstallLock) {
            for (VolumeInfo vol : ((StorageManager) this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes()) {
                destroyUserDataLI(vol.getFsUuid(), userId, flags);
            }
        }
    }

    private void destroyUserDataLI(String volumeUuid, int userId, int flags) {
        StorageManager storage = (StorageManager) this.mContext.getSystemService(StorageManager.class);
        try {
            this.mInstaller.destroyUserData(volumeUuid, userId, flags);
            if (Objects.equals(volumeUuid, StorageManager.UUID_PRIVATE_INTERNAL)) {
                if ((flags & 1) != 0) {
                    FileUtils.deleteContentsAndDir(Environment.getUserSystemDirectory(userId));
                    FileUtils.deleteContentsAndDir(Environment.getDataSystemDeDirectory(userId));
                }
                if ((flags & 2) != 0) {
                    FileUtils.deleteContentsAndDir(Environment.getDataSystemCeDirectory(userId));
                }
            }
            storage.destroyUserStorage(volumeUuid, userId, flags);
        } catch (Exception e) {
            logCriticalInfo(5, "Failed to destroy user " + userId + " on volume " + volumeUuid + ": " + e);
        }
    }

    private void reconcileUsers(String volumeUuid) {
        List<File> files = new ArrayList();
        Collections.addAll(files, FileUtils.listFilesOrEmpty(Environment.getDataUserDeDirectory(volumeUuid)));
        Collections.addAll(files, FileUtils.listFilesOrEmpty(Environment.getDataUserCeDirectory(volumeUuid)));
        Collections.addAll(files, FileUtils.listFilesOrEmpty(Environment.getDataSystemDeDirectory()));
        Collections.addAll(files, FileUtils.listFilesOrEmpty(Environment.getDataSystemCeDirectory()));
        for (File file : files) {
            if (file.isDirectory()) {
                try {
                    int userId = Integer.parseInt(file.getName());
                    UserInfo info = sUserManager.getUserInfo(userId);
                    boolean destroyUser = false;
                    if (info == null) {
                        logCriticalInfo(5, "Destroying user directory " + file + " because no matching user was found");
                        destroyUser = true;
                    } else if (!this.mOnlyCore) {
                        try {
                            UserManagerService.enforceSerialNumber(file, info.serialNumber);
                        } catch (IOException e) {
                            logCriticalInfo(5, "Destroying user directory " + file + " because we failed to enforce serial number: " + e);
                            destroyUser = true;
                        }
                    }
                    if (destroyUser) {
                        synchronized (this.mInstallLock) {
                            destroyUserDataLI(volumeUuid, userId, 3);
                        }
                    } else {
                        continue;
                    }
                } catch (NumberFormatException e2) {
                    Slog.w(TAG, "Invalid user directory " + file);
                }
            }
        }
    }

    private void assertPackageKnown(String volumeUuid, String packageName) throws PackageManagerException {
        synchronized (this.mPackages) {
            packageName = normalizePackageNameLPr(packageName);
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                throw new PackageManagerException("Package " + packageName + " is unknown");
            } else if (TextUtils.equals(volumeUuid, ps.volumeUuid)) {
            } else {
                throw new PackageManagerException("Package " + packageName + " found on unknown volume " + volumeUuid + "; expected volume " + ps.volumeUuid);
            }
        }
    }

    private void assertPackageKnownAndInstalled(String volumeUuid, String packageName, int userId) throws PackageManagerException {
        synchronized (this.mPackages) {
            packageName = normalizePackageNameLPr(packageName);
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                throw new PackageManagerException("Package " + packageName + " is unknown");
            } else if (!TextUtils.equals(volumeUuid, ps.volumeUuid)) {
                throw new PackageManagerException("Package " + packageName + " found on unknown volume " + volumeUuid + "; expected volume " + ps.volumeUuid);
            } else if (ps.getInstalled(userId)) {
            } else {
                throw new PackageManagerException("Package " + packageName + " not installed for user " + userId);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:16:0x003a A:{Splitter: B:14:0x0030, ExcHandler: android.content.pm.PackageParser.PackageParserException (r0_0 'e' java.lang.Exception)} */
    /* JADX WARNING: Missing block: B:16:0x003a, code:
            r0 = move-exception;
     */
    /* JADX WARNING: Missing block: B:17:0x003b, code:
            logCriticalInfo(5, "Destroying " + r1 + " due to: " + r0);
     */
    /* JADX WARNING: Missing block: B:18:0x0060, code:
            monitor-enter(r10.mInstallLock);
     */
    /* JADX WARNING: Missing block: B:20:?, code:
            removeCodePathLI(r1);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reconcileApps(String volumeUuid) {
        for (File file : FileUtils.listFilesOrEmpty(Environment.getDataAppDirectory(volumeUuid))) {
            boolean isPackage = (PackageParser.isApkFile(file) || file.isDirectory()) ? !PackageInstallerService.isStageName(file.getName()) : false;
            if (isPackage) {
                try {
                    assertPackageKnown(volumeUuid, PackageParser.parsePackageLite(file, 4).packageName);
                } catch (Exception e) {
                }
            }
        }
    }

    void reconcileAppsData(int userId, int flags) {
        for (VolumeInfo vol : ((StorageManager) this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes()) {
            String volumeUuid = vol.getFsUuid();
            synchronized (this.mInstallLock) {
                reconcileAppsDataLI(volumeUuid, userId, flags);
            }
        }
    }

    private void reconcileAppsDataLI(String volumeUuid, int userId, int flags) {
        File[] files;
        int i;
        int length;
        int i2;
        File file;
        String packageName;
        Slog.v(TAG, "reconcileAppsData for " + volumeUuid + " u" + userId + " 0x" + Integer.toHexString(flags));
        addBootEvent("PMS:reconcileAppsDataLI");
        SystemProperties.set("persist.sys.reconcile.finish", "false");
        File ceDir = Environment.getDataUserCeDirectory(volumeUuid, userId);
        File deDir = Environment.getDataUserDeDirectory(volumeUuid, userId);
        if ((flags & 2) != 0) {
            if (!StorageManager.isFileEncryptedNativeOrEmulated() || StorageManager.isUserKeyUnlocked(userId)) {
                files = FileUtils.listFilesOrEmpty(ceDir);
                i = 0;
                length = files.length;
                while (true) {
                    i2 = i;
                    if (i2 >= length) {
                        break;
                    }
                    file = files[i2];
                    packageName = file.getName();
                    try {
                        assertPackageKnownAndInstalled(volumeUuid, packageName, userId);
                    } catch (PackageManagerException e) {
                        logCriticalInfo(5, "Destroying " + file + " due to: " + e);
                        try {
                            this.mInstaller.destroyAppData(volumeUuid, packageName, userId, 2, 0);
                        } catch (InstallerException e2) {
                            logCriticalInfo(5, "Failed to destroy: " + e2);
                        }
                    }
                    i = i2 + 1;
                }
            } else {
                throw new RuntimeException("Yikes, someone asked us to reconcile CE storage while " + userId + " was still locked; this would have caused massive data loss!");
            }
        }
        if ((flags & 1) != 0) {
            files = FileUtils.listFilesOrEmpty(deDir);
            i = 0;
            length = files.length;
            while (true) {
                i2 = i;
                if (i2 >= length) {
                    break;
                }
                file = files[i2];
                packageName = file.getName();
                try {
                    assertPackageKnownAndInstalled(volumeUuid, packageName, userId);
                } catch (PackageManagerException e3) {
                    logCriticalInfo(5, "Destroying " + file + " due to: " + e3);
                    try {
                        this.mInstaller.destroyAppData(volumeUuid, packageName, userId, 1, 0);
                    } catch (InstallerException e22) {
                        logCriticalInfo(5, "Failed to destroy: " + e22);
                    }
                }
                i = i2 + 1;
            }
        }
        synchronized (this.mPackages) {
            List<PackageSetting> packages = this.mSettings.getVolumePackagesLPr(volumeUuid);
        }
        int preparedCount = 0;
        for (PackageSetting ps : packages) {
            packageName = ps.name;
            if (ps.pkg == null) {
                Slog.w(TAG, "Odd, missing scanned package " + packageName);
            } else if (ps.getInstalled(userId)) {
                prepareAppDataLIF(ps.pkg, userId, flags);
                if (maybeMigrateAppDataLIF(ps.pkg, userId)) {
                    prepareAppDataLIF(ps.pkg, userId, flags);
                }
                preparedCount++;
            }
        }
        SystemProperties.set("persist.sys.reconcile.finish", "true");
        Slog.v(TAG, "reconcileAppsData finished " + preparedCount + " packages");
    }

    private void prepareAppDataAfterInstallLIF(Package pkg) {
        PackageSetting ps;
        synchronized (this.mPackages) {
            ps = (PackageSetting) this.mSettings.mPackages.get(pkg.packageName);
            this.mSettings.writeKernelMappingLPr(ps);
        }
        UserManager um = (UserManager) this.mContext.getSystemService(UserManager.class);
        UserManagerInternal umInternal = getUserManagerInternal();
        for (UserInfo user : um.getUsers()) {
            int flags;
            if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
                flags = 3;
            } else if (umInternal.isUserRunning(user.id)) {
                flags = 1;
            }
            if (ps.getInstalled(user.id)) {
                prepareAppDataLIF(pkg, user.id, flags);
            }
        }
    }

    private void prepareAppDataLIF(Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        prepareAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            prepareAppDataLeafLIF((Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void prepareAppDataLeafLIF(Package pkg, int userId, int flags) {
        if (DEBUG_APP_DATA) {
            Slog.v(TAG, "prepareAppData for " + pkg.packageName + " u" + userId + " 0x" + Integer.toHexString(flags));
        }
        String volumeUuid = pkg.volumeUuid;
        String packageName = pkg.packageName;
        ApplicationInfo app = pkg.applicationInfo;
        int appId = UserHandle.getAppId(app.uid);
        Preconditions.checkNotNull(app.seinfo);
        try {
            this.mInstaller.createAppData(volumeUuid, packageName, userId, flags, appId, app.seinfo, app.targetSdkVersion);
        } catch (InstallerException e) {
            if (app.isSystemApp()) {
                logCriticalInfo(6, "Failed to create app data for " + packageName + ", but trying to recover: " + e);
                destroyAppDataLeafLIF(pkg, userId, flags);
                try {
                    this.mInstaller.createAppData(volumeUuid, packageName, userId, flags, appId, app.seinfo, app.targetSdkVersion);
                    logCriticalInfo(3, "Recovery succeeded!");
                } catch (InstallerException e2) {
                    logCriticalInfo(3, "Recovery failed!");
                }
            } else {
                Slog.e(TAG, "Failed to create app data for " + packageName + ": " + e);
            }
        }
        if ((flags & 2) != 0) {
            try {
                long ceDataInode = this.mInstaller.getAppDataInode(volumeUuid, packageName, userId, 2);
                synchronized (this.mPackages) {
                    PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
                    if (ps != null) {
                        ps.setCeDataInode(ceDataInode, userId);
                    }
                }
            } catch (InstallerException e3) {
                Slog.e(TAG, "Failed to find inode for " + packageName + ": " + e3);
            }
        }
        prepareAppDataContentsLeafLIF(pkg, userId, flags);
    }

    private void prepareAppDataContentsLIF(Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        prepareAppDataContentsLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            prepareAppDataContentsLeafLIF((Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void prepareAppDataContentsLeafLIF(Package pkg, int userId, int flags) {
        String volumeUuid = pkg.volumeUuid;
        String packageName = pkg.packageName;
        ApplicationInfo app = pkg.applicationInfo;
        if ((flags & 2) != 0 && app.primaryCpuAbi != null && !VMRuntime.is64BitAbi(app.primaryCpuAbi)) {
            try {
                this.mInstaller.linkNativeLibraryDirectory(volumeUuid, packageName, app.nativeLibraryDir, userId);
            } catch (InstallerException e) {
                Slog.e(TAG, "Failed to link native for " + packageName + ": " + e);
            }
        }
    }

    private boolean maybeMigrateAppDataLIF(Package pkg, int userId) {
        if (!pkg.isSystemApp() || StorageManager.isFileEncryptedNativeOrEmulated()) {
            return false;
        }
        try {
            this.mInstaller.migrateAppData(pkg.volumeUuid, pkg.packageName, userId, pkg.applicationInfo.isDefaultToDeviceProtectedStorage() ? 1 : 2);
        } catch (InstallerException e) {
            logCriticalInfo(5, "Failed to migrate " + pkg.packageName + ": " + e.getMessage());
        }
        return true;
    }

    public PackageFreezer freezePackage(String packageName, String killReason) {
        return freezePackage(packageName, -1, killReason);
    }

    public PackageFreezer freezePackage(String packageName, int userId, String killReason) {
        return new PackageFreezer(packageName, userId, killReason);
    }

    public PackageFreezer freezePackageForInstall(String packageName, int installFlags, String killReason) {
        return freezePackageForInstall(packageName, -1, installFlags, killReason);
    }

    public PackageFreezer freezePackageForInstall(String packageName, int userId, int installFlags, String killReason) {
        if ((installFlags & 4096) != 0) {
            return new PackageFreezer();
        }
        return freezePackage(packageName, userId, killReason);
    }

    public PackageFreezer freezePackageForDelete(String packageName, int deleteFlags, String killReason) {
        return freezePackageForDelete(packageName, -1, deleteFlags, killReason);
    }

    public PackageFreezer freezePackageForDelete(String packageName, int userId, int deleteFlags, String killReason) {
        if ((deleteFlags & 8) != 0) {
            return new PackageFreezer();
        }
        return freezePackage(packageName, userId, killReason);
    }

    private void checkPackageFrozen(String packageName) {
        synchronized (this.mPackages) {
            if (!this.mFrozenPackages.contains(packageName)) {
                Slog.wtf(TAG, "Expected " + packageName + " to be frozen!", new Throwable());
            }
        }
    }

    public int movePackage(String packageName, String volumeUuid) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", null);
        final UserHandle user = new UserHandle(UserHandle.getCallingUserId());
        final int moveId = this.mNextMoveId.getAndIncrement();
        final String str = packageName;
        final String str2 = volumeUuid;
        this.mHandler.post(new Runnable() {
            public void run() {
                try {
                    PackageManagerService.this.movePackageInternal(str, str2, moveId, user);
                } catch (PackageManagerException e) {
                    Slog.w(PackageManagerService.TAG, "Failed to move " + str, e);
                    PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(moveId, -6);
                }
            }
        });
        return moveId;
    }

    private void movePackageInternal(String packageName, String volumeUuid, int moveId, UserHandle user) throws PackageManagerException {
        boolean currentAsec;
        String currentVolumeUuid;
        File file;
        String installerPackageName;
        String packageAbiOverride;
        int appId;
        String seinfo;
        String label;
        int targetSdkVersion;
        PackageFreezer freezer;
        int[] installedUserIds;
        int installFlags;
        boolean moveCompleteApp;
        File measurePath;
        long sizeBytes;
        StorageManager storage = (StorageManager) this.mContext.getSystemService(StorageManager.class);
        PackageManager pm = this.mContext.getPackageManager();
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
            if (pkg == null || ps == null) {
                throw new PackageManagerException(-2, "Missing package");
            } else if (pkg.applicationInfo.isSystemApp()) {
                throw new PackageManagerException(-3, "Cannot move system application");
            } else {
                if (pkg.applicationInfo.isExternalAsec()) {
                    currentAsec = true;
                    currentVolumeUuid = "primary_physical";
                } else if (pkg.applicationInfo.isForwardLocked()) {
                    currentAsec = true;
                    currentVolumeUuid = "forward_locked";
                } else {
                    currentAsec = false;
                    currentVolumeUuid = ps.volumeUuid;
                    file = new File(pkg.codePath);
                    file = new File(file, "oat");
                    if (!(file.isDirectory() && file.isDirectory())) {
                        throw new PackageManagerException(-6, "Move only supported for modern cluster style installs");
                    }
                }
                if (Objects.equals(currentVolumeUuid, volumeUuid)) {
                    throw new PackageManagerException(-6, "Package already moved to " + volumeUuid);
                } else if (pkg.applicationInfo.isInternal() && isPackageDeviceAdminOnAnyUser(packageName)) {
                    throw new PackageManagerException(-8, "Device admin cannot be moved");
                } else if (this.mFrozenPackages.contains(packageName)) {
                    throw new PackageManagerException(-7, "Failed to move already frozen package");
                } else {
                    file = new File(pkg.codePath);
                    installerPackageName = ps.installerPackageName;
                    packageAbiOverride = ps.cpuAbiOverrideString;
                    appId = UserHandle.getAppId(pkg.applicationInfo.uid);
                    seinfo = pkg.applicationInfo.seinfo;
                    label = String.valueOf(pm.getApplicationLabel(pkg.applicationInfo));
                    targetSdkVersion = pkg.applicationInfo.targetSdkVersion;
                    freezer = freezePackage(packageName, "movePackageInternal");
                    installedUserIds = ps.queryInstalledUsers(sUserManager.getUserIds(), true);
                }
            }
        }
        Bundle extras = new Bundle();
        extras.putString("android.intent.extra.PACKAGE_NAME", packageName);
        extras.putString("android.intent.extra.TITLE", label);
        this.mMoveCallbacks.notifyCreated(moveId, extras);
        if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, volumeUuid)) {
            installFlags = 16;
            moveCompleteApp = !currentAsec;
            measurePath = Environment.getDataAppDirectory(volumeUuid);
        } else if (Objects.equals("primary_physical", volumeUuid)) {
            installFlags = 8;
            moveCompleteApp = false;
            measurePath = storage.getPrimaryPhysicalVolume().getPath();
        } else {
            VolumeInfo volume = storage.findVolumeByUuid(volumeUuid);
            if (volume != null && volume.getType() == 1 && volume.isMountedWritable()) {
                Preconditions.checkState(!currentAsec);
                installFlags = 16;
                moveCompleteApp = true;
                measurePath = Environment.getDataAppDirectory(volumeUuid);
            } else {
                freezer.close();
                throw new PackageManagerException(-6, "Move location not mounted private volume");
            }
        }
        PackageStats packageStats = new PackageStats(null, -1);
        synchronized (this.mInstaller) {
            int i = 0;
            int length = installedUserIds.length;
            while (i < length) {
                if (getPackageSizeInfoLI(packageName, installedUserIds[i], packageStats)) {
                    i++;
                } else {
                    freezer.close();
                    throw new PackageManagerException(-6, "Failed to measure package size");
                }
            }
        }
        if (DEBUG_INSTALL) {
            Slog.d(TAG, "Measured code size " + packageStats.codeSize + ", data size " + packageStats.dataSize);
        }
        final long startFreeBytes = measurePath.getFreeSpace();
        if (moveCompleteApp) {
            sizeBytes = packageStats.codeSize + packageStats.dataSize;
        } else {
            sizeBytes = packageStats.codeSize;
        }
        if (sizeBytes > storage.getStorageBytesUntilLow(measurePath)) {
            freezer.close();
            throw new PackageManagerException(-6, "Not enough free space to move");
        }
        MoveInfo move;
        this.mMoveCallbacks.notifyStatusChanged(moveId, 10);
        final CountDownLatch installedLatch = new CountDownLatch(1);
        final PackageFreezer packageFreezer = freezer;
        final int i2 = moveId;
        IPackageInstallObserver2 anonymousClass36 = new IPackageInstallObserver2.Stub() {
            public void onUserActionRequired(Intent intent) throws RemoteException {
                throw new IllegalStateException();
            }

            public void onPackageInstalled(String basePackageName, int returnCode, String msg, Bundle extras) throws RemoteException {
                if (PackageManagerService.DEBUG_INSTALL) {
                    Slog.d(PackageManagerService.TAG, "Install result for move: " + PackageManager.installStatusToString(returnCode, msg));
                }
                installedLatch.countDown();
                packageFreezer.close();
                switch (PackageManager.installStatusToPublicStatus(returnCode)) {
                    case 0:
                        PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(i2, -100);
                        return;
                    case 6:
                        PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(i2, -1);
                        return;
                    default:
                        PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(i2, -6);
                        return;
                }
            }
        };
        if (moveCompleteApp) {
            final int i3 = moveId;
            new Thread() {
                public void run() {
                    while (!installedLatch.await(1, TimeUnit.SECONDS)) {
                        try {
                        } catch (InterruptedException e) {
                        }
                        PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(i3, ((int) MathUtils.constrain(((startFreeBytes - measurePath.getFreeSpace()) * 80) / sizeBytes, 0, 80)) + 10);
                    }
                }
            }.start();
            move = new MoveInfo(moveId, currentVolumeUuid, volumeUuid, packageName, file.getName(), appId, seinfo, targetSdkVersion);
        } else {
            move = null;
        }
        installFlags |= 2;
        Message msg = this.mHandler.obtainMessage(5);
        InstallParams params = new InstallParams(OriginInfo.fromExistingFile(file), move, anonymousClass36, installFlags, installerPackageName, volumeUuid, null, user, packageAbiOverride, null, null);
        params.setTraceMethod("movePackage").setTraceCookie(System.identityHashCode(params));
        msg.obj = params;
        Trace.asyncTraceBegin(1048576, "movePackage", System.identityHashCode(msg.obj));
        Trace.asyncTraceBegin(1048576, "queueInstall", System.identityHashCode(msg.obj));
        this.mHandler.sendMessage(msg);
    }

    public int movePrimaryStorage(String volumeUuid) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", null);
        final int realMoveId = this.mNextMoveId.getAndIncrement();
        Bundle extras = new Bundle();
        extras.putString("android.os.storage.extra.FS_UUID", volumeUuid);
        this.mMoveCallbacks.notifyCreated(realMoveId, extras);
        ((StorageManager) this.mContext.getSystemService(StorageManager.class)).setPrimaryStorageUuid(volumeUuid, new IPackageMoveObserver.Stub() {
            public void onCreated(int moveId, Bundle extras) {
            }

            public void onStatusChanged(int moveId, int status, long estMillis) {
                PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(realMoveId, status, estMillis);
            }
        });
        return realMoveId;
    }

    public int getMoveStatus(int moveId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
        return this.mMoveCallbacks.mLastStatus.get(moveId);
    }

    public void registerMoveCallback(IPackageMoveObserver callback) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
        this.mMoveCallbacks.register(callback);
    }

    public void unregisterMoveCallback(IPackageMoveObserver callback) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
        this.mMoveCallbacks.unregister(callback);
    }

    public boolean setInstallLocation(int loc) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.WRITE_SECURE_SETTINGS", null);
        if (getInstallLocation() == loc) {
            return true;
        }
        if (loc == 2 && hasSystemFeature("oppo.app2sd.disabled", 0)) {
            Slog.w(TAG, "if oppo.app2sd.disabled setInstallLocation APP_INSTALL_EXTERNAL do nothing ");
            return true;
        } else if (loc != 0 && loc != 1 && loc != 2) {
            return false;
        } else {
            Global.putInt(this.mContext.getContentResolver(), "default_install_location", loc);
            return true;
        }
    }

    public int getInstallLocation() {
        return Global.getInt(this.mContext.getContentResolver(), "default_install_location", 0);
    }

    void cleanUpUser(UserManagerService userManager, int userHandle) {
        synchronized (this.mPackages) {
            this.mDirtyUsers.remove(Integer.valueOf(userHandle));
            this.mUserNeedsBadging.delete(userHandle);
            this.mSettings.removeUserLPw(userHandle);
            this.mPendingBroadcasts.remove(userHandle);
            this.mEphemeralApplicationRegistry.onUserRemovedLPw(userHandle);
            removeUnusedPackagesLPw(userManager, userHandle);
        }
    }

    private void removeUnusedPackagesLPw(UserManagerService userManager, final int userHandle) {
        int[] users = userManager.getUserIds();
        for (PackageSetting ps : this.mSettings.mPackages.values()) {
            if (ps.pkg != null) {
                final String packageName = ps.pkg.packageName;
                if ((ps.pkgFlags & 1) == 0) {
                    boolean keep = shouldKeepUninstalledPackageLPr(packageName);
                    if (!keep) {
                        int i = 0;
                        while (i < users.length) {
                            if (users[i] != userHandle && ps.getInstalled(users[i])) {
                                keep = true;
                                break;
                            }
                            i++;
                        }
                    }
                    if (!keep) {
                        this.mHandler.post(new Runnable() {
                            public void run() {
                                PackageManagerService.this.deletePackageX(packageName, userHandle, 0);
                            }
                        });
                    }
                }
            }
        }
    }

    void createNewUser(int userId) {
        synchronized (this.mInstallLock) {
            this.mSettings.createNewUserLI(this, this.mInstaller, userId);
        }
        synchronized (this.mPackages) {
            scheduleWritePackageRestrictionsLocked(userId);
            scheduleWritePackageListLocked(userId);
            applyFactoryDefaultBrowserLPw(userId);
            primeDomainVerificationsLPw(userId);
        }
    }

    void onNewUserCreated(int userId) {
        this.mDefaultPermissionPolicy.grantDefaultPermissions(userId);
        boolean supportRuntimeAlert = hasSystemFeature("oppo.runtime.permission.alert.support", 0);
        if (supportRuntimeAlert) {
            try {
                UserInfo createdInfo = sUserManager.getUserInfo(userId);
                if (createdInfo != null && createdInfo.isManagedProfile()) {
                    Slog.d(TAG, "pm.onNewUserCreated isManagedProfile " + userId);
                    this.mDefaultPermissionPolicy.grantOppoFixRuntimePermssion(userId, supportRuntimeAlert);
                    this.mDefaultPermissionPolicy.grantOppoNonFixRuntimePermssion(userId, supportRuntimeAlert);
                }
            } catch (Exception e) {
            }
        }
        if (Build.isPermissionReviewRequired()) {
            updatePermissionsLPw(null, null, 5);
        }
    }

    public int checkAPKSignatures(String pkg) {
        if (checkSignatures(pkg, PLATFORM_PACKAGE_NAME) == 0) {
            return 1;
        }
        if (checkSignatures(pkg, "com.android.providers.media") == 0) {
            return 2;
        }
        if (checkSignatures(pkg, "com.android.contacts") == 0) {
            return 3;
        }
        if (checkSignatures(pkg, "com.android.mms") == 0) {
            return 4;
        }
        return 5;
    }

    public VerifierDeviceIdentity getVerifierDeviceIdentity() throws RemoteException {
        VerifierDeviceIdentity verifierDeviceIdentityLPw;
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can read the verifier device identity");
        synchronized (this.mPackages) {
            verifierDeviceIdentityLPw = this.mSettings.getVerifierDeviceIdentityLPw();
        }
        return verifierDeviceIdentityLPw;
    }

    public void setPermissionEnforced(String permission, boolean enforced) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS", "setPermissionEnforced");
        if ("android.permission.READ_EXTERNAL_STORAGE".equals(permission)) {
            synchronized (this.mPackages) {
                if (this.mSettings.mReadExternalStorageEnforced == null || this.mSettings.mReadExternalStorageEnforced.booleanValue() != enforced) {
                    this.mSettings.mReadExternalStorageEnforced = Boolean.valueOf(enforced);
                    this.mSettings.writeLPr();
                }
            }
            IActivityManager am = ActivityManagerNative.getDefault();
            if (am != null) {
                long token = Binder.clearCallingIdentity();
                try {
                    am.killProcessesBelowForeground("setPermissionEnforcement");
                } catch (RemoteException e) {
                } finally {
                    Binder.restoreCallingIdentity(token);
                }
                return;
            }
            return;
        }
        throw new IllegalArgumentException("No selective enforcement for " + permission);
    }

    @Deprecated
    public boolean isPermissionEnforced(String permission) {
        return true;
    }

    public boolean isStorageLow() {
        long token = Binder.clearCallingIdentity();
        try {
            DeviceStorageMonitorInternal dsm = (DeviceStorageMonitorInternal) LocalServices.getService(DeviceStorageMonitorInternal.class);
            if (dsm != null) {
                boolean isMemoryLow = dsm.isMemoryLow();
                return isMemoryLow;
            }
            Binder.restoreCallingIdentity(token);
            return false;
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    public static boolean isGmoROM() {
        boolean enabled = LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get(MTK_GMO_ROM_OPTIMIZE));
        Log.d(TAG, "isGmoROM() return " + enabled);
        return enabled;
    }

    public static boolean isGmoRAM() {
        boolean enabled = LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON.equals(SystemProperties.get(MTK_GMO_RAM_OPTIMIZE));
        Log.d(TAG, "isGmoROM() return " + enabled);
        return enabled;
    }

    public IPackageInstaller getPackageInstaller() {
        return this.mInstallerService;
    }

    private boolean userNeedsBadging(int userId) {
        int index = this.mUserNeedsBadging.indexOfKey(userId);
        if (index >= 0) {
            return this.mUserNeedsBadging.valueAt(index);
        }
        long token = Binder.clearCallingIdentity();
        try {
            boolean b;
            UserInfo userInfo = sUserManager.getUserInfo(userId);
            if (userInfo == null || !userInfo.isManagedProfile()) {
                b = false;
            } else {
                b = true;
            }
            this.mUserNeedsBadging.put(userId, b);
            return b;
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    public KeySet getKeySetByAlias(String packageName, String alias) {
        if (packageName == null || alias == null) {
            return null;
        }
        KeySet keySet;
        synchronized (this.mPackages) {
            if (((Package) this.mPackages.get(packageName)) == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
            keySet = new KeySet(this.mSettings.mKeySetManagerService.getKeySetByAliasAndPackageNameLPr(packageName, alias));
        }
        return keySet;
    }

    public KeySet getSigningKeySet(String packageName) {
        if (packageName == null) {
            return null;
        }
        KeySet keySet;
        synchronized (this.mPackages) {
            Package pkg = (Package) this.mPackages.get(packageName);
            if (pkg == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            } else if (pkg.applicationInfo.uid == Binder.getCallingUid() || 1000 == Binder.getCallingUid()) {
                keySet = new KeySet(this.mSettings.mKeySetManagerService.getSigningKeySetByPackageNameLPr(packageName));
            } else {
                throw new SecurityException("May not access signing KeySet of other apps.");
            }
        }
        return keySet;
    }

    public boolean isPackageSignedByKeySet(String packageName, KeySet ks) {
        if (packageName == null || ks == null) {
            return false;
        }
        synchronized (this.mPackages) {
            if (((Package) this.mPackages.get(packageName)) == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
            IBinder ksh = ks.getToken();
            if (ksh instanceof KeySetHandle) {
                boolean packageIsSignedByLPr = this.mSettings.mKeySetManagerService.packageIsSignedByLPr(packageName, (KeySetHandle) ksh);
                return packageIsSignedByLPr;
            }
            return false;
        }
    }

    public boolean isPackageSignedByKeySetExactly(String packageName, KeySet ks) {
        if (packageName == null || ks == null) {
            return false;
        }
        synchronized (this.mPackages) {
            if (((Package) this.mPackages.get(packageName)) == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
            IBinder ksh = ks.getToken();
            if (ksh instanceof KeySetHandle) {
                boolean packageIsSignedByExactlyLPr = this.mSettings.mKeySetManagerService.packageIsSignedByExactlyLPr(packageName, (KeySetHandle) ksh);
                return packageIsSignedByExactlyLPr;
            }
            return false;
        }
    }

    private void deletePackageIfUnusedLPr(final String packageName) {
        PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(packageName);
        if (!(ps == null || ps.isAnyInstalled(sUserManager.getUserIds()))) {
            this.mHandler.post(new Runnable() {
                public void run() {
                    PackageManagerService.this.deletePackageX(packageName, 0, 2);
                }
            });
        }
    }

    private static void checkDowngrade(Package before, PackageInfoLite after) throws PackageManagerException {
        if (after.versionCode < before.mVersionCode) {
            throw new PackageManagerException(-25, "Update version code " + after.versionCode + " is older than current " + before.mVersionCode);
        } else if (after.versionCode != before.mVersionCode) {
        } else {
            if (after.baseRevisionCode < before.baseRevisionCode) {
                throw new PackageManagerException(-25, "Update base revision code " + after.baseRevisionCode + " is older than current " + before.baseRevisionCode);
            } else if (!ArrayUtils.isEmpty(after.splitNames)) {
                int i = 0;
                while (i < after.splitNames.length) {
                    String splitName = after.splitNames[i];
                    int j = ArrayUtils.indexOf(before.splitNames, splitName);
                    if (j == -1 || after.splitRevisionCodes[i] >= before.splitRevisionCodes[j]) {
                        i++;
                    } else {
                        throw new PackageManagerException(-25, "Update split " + splitName + " revision code " + after.splitRevisionCodes[i] + " is older than current " + before.splitRevisionCodes[j]);
                    }
                }
            }
        }
    }

    public void grantDefaultPermissionsToEnabledCarrierApps(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("grantPermissionsToEnabledCarrierApps");
        synchronized (this.mPackages) {
            long identity = Binder.clearCallingIdentity();
            try {
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToEnabledCarrierAppsLPr(packageNames, userId);
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    private static void enforceSystemOrPhoneCaller(String tag) {
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1001 && callingUid != 1000) {
            throw new SecurityException("Cannot call " + tag + " from UID " + callingUid);
        }
    }

    boolean isHistoricalPackageUsageAvailable() {
        return this.mPackageUsage.isHistoricalPackageUsageAvailable();
    }

    Collection<Package> getPackages() {
        Collection arrayList;
        synchronized (this.mPackages) {
            arrayList = new ArrayList(this.mPackages.values());
        }
        return arrayList;
    }

    public void logAppProcessStartIfNeeded(String processName, int uid, String seinfo, String apkFile, int pid) {
        if (SecurityLog.isLoggingEnabled()) {
            Bundle data = new Bundle();
            data.putLong("startTimestamp", System.currentTimeMillis());
            data.putString("processName", processName);
            data.putInt(PackageProcessList.KEY_UID, uid);
            data.putString("seinfo", seinfo);
            data.putString("apkFile", apkFile);
            data.putInt("pid", pid);
            Message msg = this.mProcessLoggingHandler.obtainMessage(1);
            msg.setData(data);
            this.mProcessLoggingHandler.sendMessage(msg);
        }
    }

    @OppoHook(level = OppoHookType.NEW_METHOD, note = "Bin.Wang@Plf.Framework,2017.02.21:modify for guest mode", property = OppoRomType.ROM)
    private void sendOppoPackageChangedBroadcast(String packageName, boolean killFlag, ArrayList<String> componentNames, int packageUid, int callPid) {
        if (DEBUG_INSTALL) {
            Log.v(TAG, "Sending package changed: package=" + packageName + " components=" + componentNames);
        }
        Bundle extras = new Bundle(5);
        extras.putString("android.intent.extra.changed_component_name", (String) componentNames.get(0));
        String[] nameList = new String[componentNames.size()];
        componentNames.toArray(nameList);
        extras.putStringArray("android.intent.extra.changed_component_name_list", nameList);
        extras.putBoolean("android.intent.extra.DONT_KILL_APP", killFlag);
        extras.putInt("android.intent.extra.UID", packageUid);
        extras.putInt("android.intent.action.TRIGGER_PACKAGE", callPid);
        int flags = !componentNames.contains(packageName) ? 1073741824 : 0;
        int[] iArr = new int[1];
        iArr[0] = UserHandle.getUserId(packageUid);
        sendPackageBroadcast("android.intent.action.PACKAGE_CHANGED", packageName, extras, flags, null, null, iArr);
    }

    private boolean isBootFromOTA() {
        String otaFilePath = "/cache/recovery/intent";
        File file = new File(otaFilePath);
        String OTA_UPDATE_OK = "0";
        String OTA_UPDATE_FAILED = LocationManagerService.OPPO_FAKE_LOCATOIN_SWITCH_ON;
        String RECOVER_UPDATE_OK = "2";
        String RECOVER_UPDATE_FAILED = "3";
        if (file.exists()) {
            Slog.i(TAG, "/cache/recovery/intent file is exist!!!");
            String otaResultStr = readOTAUpdateResult(otaFilePath);
            if (OTA_UPDATE_OK.equals(otaResultStr)) {
                if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.i(TAG, "is boot from OTA");
                }
                return true;
            } else if (OTA_UPDATE_FAILED.equals(otaResultStr)) {
                if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.i(TAG, "not boot from OTA,normal boot");
                }
                return false;
            } else if (RECOVER_UPDATE_OK.equals(otaResultStr)) {
                if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.i(TAG, "is boot from recover");
                }
                return true;
            } else if (RECOVER_UPDATE_FAILED.equals(otaResultStr)) {
                if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.i(TAG, "not boot from recover,normal boot");
                }
                return false;
            } else {
                if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
                    Slog.i(TAG, "OTA update file's date is invalid,normal boot");
                }
                return false;
            }
        }
        if (DEBUG_PMS || DEBUG_PACKAGE_SCANNING) {
            Slog.i(TAG, "OTA file path is no exist,normal boot");
        }
        return false;
    }

    /* JADX WARNING: Removed duplicated region for block: B:22:0x0045 A:{SYNTHETIC, Splitter: B:22:0x0045} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static String readOTAUpdateResult(String fileName) {
        IOException e;
        Throwable th;
        String resultStr = null;
        BufferedReader reader = null;
        try {
            BufferedReader reader2 = new BufferedReader(new FileReader(new File(fileName)));
            try {
                resultStr = reader2.readLine();
                if (reader2 != null) {
                    try {
                        reader2.close();
                    } catch (IOException e1) {
                        Slog.e(TAG, "readOTAUpdateResult close the reader failed!!!", e1);
                    }
                }
                reader = reader2;
            } catch (IOException e2) {
                e = e2;
                reader = reader2;
            } catch (Throwable th2) {
                th = th2;
                reader = reader2;
                if (reader != null) {
                }
                throw th;
            }
        } catch (IOException e3) {
            e = e3;
            try {
                Slog.e(TAG, "readOTAUpdateResult failed!!!", e);
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException e12) {
                        Slog.e(TAG, "readOTAUpdateResult close the reader failed!!!", e12);
                    }
                }
                return resultStr;
            } catch (Throwable th3) {
                th = th3;
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException e122) {
                        Slog.e(TAG, "readOTAUpdateResult close the reader failed!!!", e122);
                    }
                }
                throw th;
            }
        }
        return resultStr;
    }

    public boolean isFullFunctionMode() {
        return this.mIsCtsAppInstall;
    }

    public Bitmap getAppIconBitmap(String packageName) {
        return (Bitmap) mAppIconsCache.get(packageName);
    }

    public Map<String, Bitmap> getAppIconsCache(boolean compress) {
        if (compress) {
            return mAppIconsCacheCompress;
        }
        return mAppIconsCache;
    }

    public boolean isSecurePayApp(String pkg) {
        if (ColorPackageManagerHelper.isSupportSecurePay()) {
            return ColorSecurePayManager.getInstance().isSecurePayApp(pkg);
        }
        Slog.d(TAG, "this is not support securepay");
        return false;
    }

    private boolean isSystemAppCall() {
        boolean isSystemCaller = true;
        if (!hasSystemFeature(OPPO_SECURITYPAY_FEATURE, 0)) {
            return true;
        }
        int callingUid = Binder.getCallingUid();
        String callerName = getNameForUid(callingUid);
        if (callingUid < 10000) {
            isSystemCaller = true;
        } else if (callerName != null) {
            if (callerName.contains(":")) {
                String[] shareName = callerName.split(":");
                if (!(shareName[0] == null || shareName[1] == null)) {
                    Slog.d(TAG, " getInstalledPackages shareName = " + shareName[0]);
                    if (OppoPackageManagerHelper.IsShareUid(shareName[0])) {
                        return true;
                    }
                    String[] shareUidPkg = getPackagesForUid(Integer.parseInt(shareName[1]));
                    if (!(shareUidPkg == null || shareUidPkg[0] == null)) {
                        Slog.d(TAG, " getInstalledPackages shareUidPkg = " + shareUidPkg[0]);
                        isSystemCaller = ColorPackageManagerHelper.IsOppoApkList(shareUidPkg[0]);
                    }
                }
            } else {
                isSystemCaller = !ColorPackageManagerHelper.IsOppoApkList(callerName) ? isSecurePayApp(callerName) : true;
            }
            if (DEBUG_INSTALL) {
                Slog.d(TAG, " getInstalledPackages callerName = " + callerName);
            }
        }
        return isSystemCaller;
    }

    public void restoreAllSandboxApp() {
        synchronized (this.mPackages) {
            String reason = "restoreAllSandboxApp";
            for (Package pkg : this.mPackages.values()) {
                if (!(pkg == null || pkg.isSystemApp() || !"safespace".equals(pkg.applicationInfo.seinfo))) {
                    String originSeinfo = pkg.applicationInfo.seinfo;
                    pkg.applicationInfo.seinfo = "default";
                    if (DEBUG_INSTALL) {
                        Slog.d(TAG, "restore pkgName = " + pkg.applicationInfo.packageName + " seinfo = " + pkg.applicationInfo.seinfo);
                    }
                    restoreAppContext(pkg, originSeinfo, reason);
                }
            }
            int sandboxState = SystemProperties.getInt("persist.sys.coloros.sandbox", -1);
            if (DEBUG_INSTALL) {
                Slog.d(TAG, "restoreSandboxAppContext sandboxState = " + sandboxState);
            }
            if (2 == sandboxState) {
                SystemProperties.set("persist.sys.coloros.sandbox", String.valueOf(0));
            }
        }
    }

    public void restoreSingleSandboxApp(String pkgName) {
        int sandboxState = SystemProperties.getInt("persist.sys.coloros.sandbox", -1);
        if (2 == sandboxState) {
            Slog.d(TAG, "restoreSingleSandboxApp sandboxState = " + sandboxState);
            return;
        }
        String reason = "restoreSingleSandboxApp";
        if (pkgName != null && this.mSystemReady) {
            synchronized (this.mPackages) {
                Package pkg = (Package) this.mPackages.get(pkgName);
                if (pkg != null) {
                    String originSeinfo;
                    if ("safespace".equals(pkg.applicationInfo.seinfo) && !ColorSecurePayManager.getInstance().isSecurePayApp(pkgName)) {
                        originSeinfo = "safespace";
                        pkg.applicationInfo.seinfo = "default";
                        if (DEBUG_INSTALL) {
                            Slog.d(TAG, "restore safespace pkgName = " + pkgName + " seinfo = " + pkg.applicationInfo.seinfo);
                        }
                        restoreAppContext(pkg, originSeinfo, reason);
                    } else if ("default".equals(pkg.applicationInfo.seinfo) && ColorSecurePayManager.getInstance().isSecurePayApp(pkgName)) {
                        originSeinfo = "default";
                        SELinuxMMAC.assignSeinfoValue(pkg);
                        if (DEBUG_INSTALL) {
                            Slog.d(TAG, "restore default pkgName = " + pkgName + " seinfo = " + pkg.applicationInfo.seinfo);
                        }
                        restoreAppContext(pkg, originSeinfo, reason);
                    }
                }
            }
        }
    }

    private void restoreAppContext(Package pkg, String originSeinfo, String reason) {
        if (this.mInstaller == null) {
            pkg.applicationInfo.seinfo = originSeinfo;
            return;
        }
        if (pkg.isSystemApp() || pkg.mSharedUserId == null) {
            restoreContext(pkg, originSeinfo, reason);
        } else {
            int uid = getUidForSharedUser(pkg.mSharedUserId);
            if (DEBUG_INSTALL) {
                Slog.d(TAG, "restore share uid " + uid + " shareuid " + pkg.mSharedUserId);
            }
            String[] pkgName = getPackagesForUid(uid);
            if (pkgName != null && pkgName.length > 0) {
                for (int i = 0; i < pkgName.length; i++) {
                    if (pkgName[i] != null) {
                        Package pkgShare = (Package) this.mPackages.get(pkgName[i]);
                        if (pkgShare != null) {
                            pkgShare.applicationInfo.seinfo = pkg.applicationInfo.seinfo;
                        }
                        if (DEBUG_INSTALL) {
                            Slog.d(TAG, "restore share pkgName = " + pkg.applicationInfo.packageName);
                        }
                        restoreContext(pkg, originSeinfo, reason);
                    }
                }
            }
        }
    }

    private void restoreContext(Package pkg, String originSeinfo, String reason) {
        UserManager um = (UserManager) this.mContext.getSystemService(UserManager.class);
        if (um == null) {
            Slog.e(TAG, "restoreContext um is null : " + pkg.packageName);
            pkg.applicationInfo.seinfo = originSeinfo;
            return;
        }
        UserManagerInternal umInternal = getUserManagerInternal();
        for (UserInfo user : um.getUsers()) {
            int flags;
            if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
                flags = 3;
            } else if (umInternal.isUserRunning(user.id)) {
                flags = 1;
            } else {
                continue;
            }
            PackageSetting ps = (PackageSetting) this.mSettings.mPackages.get(pkg.packageName);
            if (ps == null) {
                Slog.e(TAG, "restoreContext ps is null : " + pkg.packageName);
                pkg.applicationInfo.seinfo = originSeinfo;
                return;
            }
            this.mSettings.writeKernelMappingLPr(ps);
            if (ps.getInstalled(user.id)) {
                restoreAppData(pkg, user.id, flags, originSeinfo, reason);
            }
        }
    }

    private void restoreAppData(Package pkg, int userId, int flags, String originSeinfo, String reason) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            pkg.applicationInfo.seinfo = originSeinfo;
            return;
        }
        restoreData(pkg, userId, flags, originSeinfo, reason);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            restoreData((Package) pkg.childPackages.get(i), userId, flags, originSeinfo, reason);
        }
    }

    private void restoreData(Package pkg, int userId, int flags, String originSeinfo, String reason) {
        ApplicationInfo app = pkg.applicationInfo;
        int appId = UserHandle.getAppId(app.uid);
        try {
            if (this.mSystemReady) {
                killApplication(pkg.applicationInfo.packageName, pkg.applicationInfo.uid, reason);
            }
            this.mInstaller.restoreconAppData(pkg.volumeUuid, pkg.packageName, userId, flags, appId, app.seinfo);
        } catch (InstallerException e) {
            Slog.e(TAG, "Failed to restorecon for " + pkg.packageName + ": " + e);
            pkg.applicationInfo.seinfo = originSeinfo;
        }
    }

    public Map<String, Bitmap> getActivityIconsCache(IPackageDeleteObserver observer) {
        Preconditions.checkNotNull(observer);
        Integer uid = Integer.valueOf(Binder.getCallingUid());
        if (this.mPackageDeleteList.get(uid) != null) {
            this.mPackageDeleteList.remove(uid);
        }
        this.mPackageDeleteList.put(uid, observer);
        return mActivityIconsCache;
    }

    public PackageStats getCompilerPackageStats(String pkgName) {
        return this.mCompilerStats.getPackageStats(pkgName);
    }

    public PackageStats getOrCreateCompilerPackageStats(Package pkg) {
        return getOrCreateCompilerPackageStats(pkg.packageName);
    }

    public PackageStats getOrCreateCompilerPackageStats(String pkgName) {
        return this.mCompilerStats.getOrCreatePackageStats(pkgName);
    }

    public void deleteCompilerPackageStats(String pkgName) {
        this.mCompilerStats.deletePackageStats(pkgName);
    }

    public boolean isSystemDataApp(String packageName) {
        return ColorPackageManagerHelper.isSystemDataApp(packageName);
    }

    public List<String> getPermRecordPkgs() {
        if (this.mCtaPermsController == null) {
            return null;
        }
        return this.mCtaPermsController.getPermRecordPkgs();
    }

    public List<String> getPermRecordPerms(String packageName) {
        if (this.mCtaPermsController == null) {
            return null;
        }
        return this.mCtaPermsController.getPermRecordPerms(packageName);
    }

    public PermissionRecords getPermRecords(String packageName, String permName) {
        if (this.mCtaPermsController == null) {
            return null;
        }
        return this.mCtaPermsController.getPermRecords(packageName, permName);
    }

    private boolean isPackageNeedsReview(Package pkg) {
        if (!CtaUtils.isCtaSupported()) {
            return false;
        }
        boolean appSupportsRuntimePermissions = pkg.applicationInfo.targetSdkVersion >= 23;
        if (pkg.mSharedUserId == null) {
            return (appSupportsRuntimePermissions && pkg.isSystemApp()) ? this.mForcePermReviewPkgs.contains(pkg.packageName) : !this.mBlockPermReviewPkgs.contains(pkg.packageName);
        } else {
            SharedUserSetting suid = this.mSettings.getSharedUserLPw(pkg.mSharedUserId, 0, 0, false);
            if (suid != null) {
                for (PackageSetting setting : suid.packages) {
                    if (appSupportsRuntimePermissions) {
                        if (setting.pkg.isSystemApp()) {
                            return false;
                        }
                    } else if (setting.pkg.applicationInfo.targetSdkVersion >= 23) {
                        return false;
                    }
                }
            }
            return !this.mBlockPermReviewPkgs.contains(pkg.packageName);
        }
    }

    private boolean checkAppInstallPermission(String pkgName) {
        if (pkgName == null) {
            Slog.i(TAG, "pkgname is null!!");
            return false;
        } else if (this.mBlackAppInstallHelper == null) {
            Slog.i(TAG, "mBlackAppInstallHelper is null!!!");
            return false;
        } else if (!this.mBlackAppInstallHelper.getBlackAppList().contains(pkgName)) {
            return true;
        } else {
            Slog.i(TAG, "black install app list contains " + pkgName);
            return false;
        }
    }

    private void operatorAppCopy(String operatorDir) {
        File apkPath = new File(Environment.getDataDirectory(), operatorDir);
        if (apkPath.exists()) {
            for (File apkFile : apkPath.listFiles()) {
                try {
                    Slog.d(TAG, "copy apk to " + this.mAppInstallDir + ":" + apkFile);
                    PackageLite pkg = PackageParser.parsePackageLite(apkFile, 2);
                    if (pkg == null) {
                        Slog.i(TAG, "reserve package null, error!!!");
                    } else if (this.mSettings.mPackages.containsKey(pkg.packageName)) {
                        Slog.i(TAG, "apk:" + pkg.packageName + " has been installed, skip");
                    } else {
                        File destFile = new File(this.mAppInstallDir, apkFile.getName());
                        Slog.i(TAG, "apk:" + pkg.packageName + " has NOT been installed, copy it to " + destFile.getPath() + "......");
                        FileUtils.copyFile(apkFile, destFile);
                        FileUtils.setPermissions(destFile.getPath(), 420, -1, -1);
                    }
                } catch (PackageParserException e) {
                    Slog.e(TAG, "copy file to " + this.mAppInstallDir + " error!!!");
                }
            }
        }
    }

    void initMtkPermErrorDialog(BeforeShowAppErrorDialog data, AMEventHookResult result) {
        String permName = null;
        Data appErrorDialogData = (Data) data.get(Index.data);
        int uid = ((Integer) data.get(Index.uid)).intValue();
        String exceptionMsg = appErrorDialogData.exceptionMsg;
        ActivityManagerService am = (ActivityManagerService) data.get(Index.ams);
        List<MtkAppErrorDialog> dialogList = (List) data.get(Index.dialogList);
        String processName = (String) data.get(Index.processName);
        String pkgName = (String) data.get(Index.pkgName);
        if (this.mCtaPermsController != null) {
            permName = this.mCtaPermsController.parsePermName(uid, pkgName, exceptionMsg);
        }
        if (permName != null) {
            dialogList.add(new MtkPermErrorDialog(this.mContext, am, appErrorDialogData, permName, processName, pkgName));
            result.addAction(AMEventHookAction.AM_ReplaceDialog);
        }
    }

    public void onAmsAddedtoServiceMgr() {
        Slog.d(TAG, "onAmsAddedtoServiceMgr mIsPreNUpgrade = " + this.mIsPreNUpgrade);
        if (CtaUtils.isCtaSupported() && this.mIsPreNUpgrade) {
            for (int userId : UserManagerService.getInstance().getUserIds()) {
                this.mDefaultPermissionPolicy.grantCtaPermToPreInstalledPackage(userId);
            }
        }
    }

    private void scanCxpApp(File uniPath, String opFileName, int scanFlags) {
        List<String> appPathList = readPathsFromFile(new File(uniPath, opFileName));
        for (int i = 0; i < appPathList.size(); i++) {
            int flag;
            String path = (String) appPathList.get(i);
            File file = new File(path);
            if (path.contains("removable")) {
                flag = 8192;
            } else {
                flag = 65;
            }
            long startScanTime = SystemClock.uptimeMillis();
            Slog.d(TAG, "scan package: " + file.toString() + " , start at: " + startScanTime + "ms.");
            try {
                scanPackageLI(file, flag | 4, scanFlags, 0, null);
            } catch (PackageManagerException e) {
                Slog.w(TAG, "Failed to parse " + file + ": " + e.getMessage());
            }
            long endScanTime = SystemClock.uptimeMillis();
            Slog.d(TAG, "scan package: " + file.toString() + " , end at: " + endScanTime + "ms. elapsed time = " + (endScanTime - startScanTime) + "ms.");
        }
    }

    private List<String> readPathsFromFile(File packagePathsFile) {
        byte[] bytes = new byte[((int) packagePathsFile.length())];
        List<String> fileContents = new ArrayList();
        try {
            FileInputStream inputStream = new FileInputStream(packagePathsFile);
            if (inputStream != null) {
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                String str = IElsaManager.EMPTY_PACKAGE;
                while (true) {
                    str = bufferedReader.readLine();
                    if (str == null) {
                        break;
                    }
                    fileContents.add(str);
                }
                inputStream.close();
            }
        } catch (FileNotFoundException e) {
            Log.e(TAG, "File not found: " + e.toString());
        } catch (IOException e2) {
            Log.e(TAG, "Can not read file: " + e2.toString());
        }
        return fileContents;
    }

    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x00fe A:{SYNTHETIC, Splitter: B:63:0x00fe} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00e5 A:{SYNTHETIC, Splitter: B:55:0x00e5} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x00cc A:{SYNTHETIC, Splitter: B:47:0x00cc} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x00b3 A:{SYNTHETIC, Splitter: B:39:0x00b3} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:31:0x009a A:{SYNTHETIC, Splitter: B:31:0x009a} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0084 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x0114  */
    /* JADX WARNING: Removed duplicated region for block: B:69:0x010b A:{SYNTHETIC, Splitter: B:69:0x010b} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private List<String> loadCustomizeWhiteList(String path) {
        IOException e;
        NullPointerException e2;
        NumberFormatException e3;
        XmlPullParserException e4;
        IndexOutOfBoundsException e5;
        Throwable th;
        ArrayList<String> emptyList = new ArrayList();
        File file = new File(path);
        if (file.exists()) {
            ArrayList<String> ret = new ArrayList();
            FileInputStream stream = null;
            boolean success = false;
            try {
                FileInputStream stream2 = new FileInputStream(file);
                try {
                    XmlPullParser parser = Xml.newPullParser();
                    parser.setInput(stream2, null);
                    int type;
                    do {
                        type = parser.next();
                        if (type == 2) {
                            if (OppoCrashClearManager.CRASH_CLEAR_NAME.equals(parser.getName())) {
                                String value = parser.getAttributeValue(null, "att");
                                if (value != null) {
                                    ret.add(value);
                                }
                            }
                        }
                    } while (type != 1);
                    success = true;
                    if (stream2 != null) {
                        try {
                            stream2.close();
                        } catch (IOException e6) {
                            e6.printStackTrace();
                        }
                    }
                    stream = stream2;
                } catch (NullPointerException e7) {
                    e2 = e7;
                    stream = stream2;
                    Slog.w(TAG, "failed parsing ", e2);
                    if (stream != null) {
                    }
                    if (success) {
                    }
                } catch (NumberFormatException e8) {
                    e3 = e8;
                    stream = stream2;
                    Slog.w(TAG, "failed parsing ", e3);
                    if (stream != null) {
                    }
                    if (success) {
                    }
                } catch (XmlPullParserException e9) {
                    e4 = e9;
                    stream = stream2;
                    Slog.w(TAG, "failed parsing ", e4);
                    if (stream != null) {
                    }
                    if (success) {
                    }
                } catch (IOException e10) {
                    e6 = e10;
                    stream = stream2;
                    Slog.w(TAG, "failed parsing ", e6);
                    if (stream != null) {
                    }
                    if (success) {
                    }
                } catch (IndexOutOfBoundsException e11) {
                    e5 = e11;
                    stream = stream2;
                    try {
                        Slog.w(TAG, "failed parsing ", e5);
                        if (stream != null) {
                        }
                        if (success) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        if (stream != null) {
                            try {
                                stream.close();
                            } catch (IOException e62) {
                                e62.printStackTrace();
                            }
                        }
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    stream = stream2;
                    if (stream != null) {
                    }
                    throw th;
                }
            } catch (NullPointerException e12) {
                e2 = e12;
                Slog.w(TAG, "failed parsing ", e2);
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e622) {
                        e622.printStackTrace();
                    }
                }
                if (success) {
                }
            } catch (NumberFormatException e13) {
                e3 = e13;
                Slog.w(TAG, "failed parsing ", e3);
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e6222) {
                        e6222.printStackTrace();
                    }
                }
                if (success) {
                }
            } catch (XmlPullParserException e14) {
                e4 = e14;
                Slog.w(TAG, "failed parsing ", e4);
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e62222) {
                        e62222.printStackTrace();
                    }
                }
                if (success) {
                }
            } catch (IOException e15) {
                e62222 = e15;
                Slog.w(TAG, "failed parsing ", e62222);
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e622222) {
                        e622222.printStackTrace();
                    }
                }
                if (success) {
                }
            } catch (IndexOutOfBoundsException e16) {
                e5 = e16;
                Slog.w(TAG, "failed parsing ", e5);
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e6222222) {
                        e6222222.printStackTrace();
                    }
                }
                if (success) {
                }
            }
            if (success) {
                return ret;
            }
            Slog.w(TAG, path + " file failed parsing!");
            return emptyList;
        }
        Slog.w(TAG, path + " file don't exist!");
        return emptyList;
    }

    private boolean checkWhiteList(String packageName) {
        if (this.mCustomizeList == null || this.mCustomizeList.size() <= 0 || packageName == null) {
            return false;
        }
        try {
            for (String pkg : this.mCustomizeList) {
                if (pkg.equalsIgnoreCase(packageName)) {
                    return true;
                }
            }
            return false;
        } catch (Exception e) {
            Slog.w(TAG, "check white list has exception! ", e);
            return false;
        }
    }

    public boolean isInstallSourceEnable() {
        return SystemProperties.getBoolean("persist.sys.oppo.installsource", false);
    }

    public List<String> getInstallSourceList() {
        return this.mSettings.getInstalledSourceList();
    }

    public void enableInstallSource(boolean enable) {
        if (!hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            return;
        }
        if (!enable) {
            SystemProperties.set("persist.sys.oppo.installsource", "false");
        } else if (!SystemProperties.getBoolean("persist.sys.oppo.installsource", false)) {
            SystemProperties.set("persist.sys.oppo.installsource", "true");
            this.mSettings.addMarketName("com.ctsi.emm");
        }
    }

    public void addInstallSource(String pkgName) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.addMarketName(pkgName);
        }
    }

    public void deleteInstallSource(String pkgName) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.deleteMarketName(pkgName);
        }
    }

    public boolean arrayContainStr(String[] array, String str) {
        int i = 0;
        while (i < array.length) {
            if (array[i] != null && array[i].equals(str)) {
                return true;
            }
            i++;
        }
        return false;
    }

    public void addDisallowUninstallApps(List<String> packageNames) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.addUninstalledAppName(packageNames);
            return;
        }
        int hasOppoComponentPerm = -1;
        try {
            hasOppoComponentPerm = checkUidPermission("oppo.permission.OPPO_COMPONENT_SAFE", Binder.getCallingUid());
        } catch (Exception e) {
            Slog.e(TAG, "removeDisallowUninstallApps error:", e);
        }
        if (hasOppoComponentPerm == 0) {
            this.mSettings.addUninstalledAppName(packageNames);
        } else {
            Slog.e(TAG, "OPPO_COMPONENT_SAFE permission deny!");
        }
    }

    public void removeDisallowUninstallApps(List<String> packageNames) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.deleteUninstalledAppName(packageNames);
            return;
        }
        int hasOppoComponentPerm = -1;
        try {
            hasOppoComponentPerm = checkUidPermission("oppo.permission.OPPO_COMPONENT_SAFE", Binder.getCallingUid());
        } catch (Exception e) {
            Slog.e(TAG, "removeDisallowUninstallApps error:", e);
        }
        if (hasOppoComponentPerm == 0) {
            this.mSettings.deleteUninstalledAppName(packageNames);
        } else {
            Slog.e(TAG, "OPPO_COMPONENT_SAFE permission deny!");
        }
    }

    public List<String> getDisallowUninstallApps() {
        return this.mSettings.getUninstalledAppNames();
    }

    private void sendBroadcastForArmy() {
        this.mContext.sendBroadcast(new Intent("android.intent.action.OPPO_INSTALL_FOR_ARMY"));
    }

    public void addInstallPackageWhitelist(int mode, List<String> applist) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.addInstallPackageWhitelist(mode, applist);
        }
    }

    public void addInstallPackageBlacklist(int mode, List<String> applist) {
        if (hasSystemFeature("oppo.customize.function.control_app_install", 0)) {
            this.mSettings.addInstallPackageBlacklist(mode, applist);
        }
    }

    public String checkEMMApkRuntimePermission(String packageName) {
        int i = 0;
        if (!hasSystemFeature("oppo.customize.function.checkpermission", 0)) {
            return "Permission Denial: has not com.chinatelecom.permission.security.EMM";
        }
        int uid = Binder.getCallingUid();
        String[] packageNames = getPackagesForUid(uid);
        boolean found = false;
        int length = packageNames.length;
        while (i < length) {
            if (packageNames[i].equals(packageName)) {
                found = true;
                break;
            }
            i++;
        }
        if (!found) {
            return "Can't find package " + packageName;
        }
        if (checkUidPermission("com.chinatelecom.permission.security.EMM", uid) != 0) {
            return "Permission Denial: has not com.chinatelecom.permission.security.EMM";
        }
        Package pkg;
        synchronized (this.mPackages) {
            pkg = (Package) this.mPackages.get(packageName);
        }
        if (pkg == null) {
            return "Can't find package " + packageName;
        }
        return IElsaManager.EMPTY_PACKAGE;
    }

    private boolean getImeiNumber(Context context) {
        String imei = ((TelephonyManager) context.getSystemService("phone")).getDeviceId();
        if (imei == null || imei.equals(IElsaManager.EMPTY_PACKAGE)) {
            Slog.d(TAG, "getImeiNumber  false");
            return false;
        }
        Slog.d(TAG, "getImeiNumber  true");
        int len = imei.length();
        if (len < 14) {
            Slog.d(TAG, "getImeiNumber length =" + len);
            return false;
        }
        Slog.d(TAG, "getImeiNumber  =" + imei);
        return true;
    }

    public int adjustBackgroundInstallerParameter(String installerPackageName, int installFlags) {
        if (!EXP_VERSION || installerPackageName == null) {
            return installFlags;
        }
        String pkgName = null;
        ActivityManager am = (ActivityManager) this.mContext.getSystemService("activity");
        if (am == null) {
            return installFlags;
        }
        ComponentName cn = am.getTopAppName();
        if (cn != null) {
            pkgName = cn.getPackageName();
        }
        if (pkgName == null || installerPackageName.equals(pkgName)) {
            return installFlags;
        }
        for (int i = 0; i < this.mPackageInstaller.length; i++) {
            if (this.mPackageInstaller[i].equals(installerPackageName)) {
                installFlags |= Integer.MIN_VALUE;
                Slog.i(TAG, IElsaManager.EMPTY_PACKAGE + this.mPackageInstaller[i] + " installFlags with INSTALL_SPEED_BACKGROUND");
                return installFlags;
            }
        }
        return installFlags;
    }

    private void sendNonSilentInstallBroadcastExp(String installerPackageName, OriginInfo origin, PackageInstalledInfo res, int childPackageCount, int childPackageIndex) {
        if (installerPackageName != null && installerPackageName.equals("com.google.android.packageinstaller")) {
            String extraInstallerExp;
            synchronized (this.mRunningInstallerPkgName) {
                extraInstallerExp = (String) this.mRunningInstallerPkgName.get(origin);
                if (childPackageCount <= 0 || childPackageIndex + 1 >= childPackageCount) {
                    this.mRunningInstallerPkgName.remove(origin);
                }
            }
            Slog.i(TAG, "origin : " + origin.toString() + " packageName: " + res.pkg.applicationInfo.packageName + " extraInstallerExp: " + extraInstallerExp);
            boolean update = (res.removedInfo == null || res.removedInfo.removedPackage == null) ? false : true;
            if (extraInstallerExp != null && extraInstallerExp.length() > 0) {
                ColorPackageManagerHelper.sendDcsNonSilentInstallBroadcastExp(res.pkg.applicationInfo.packageName, update, extraInstallerExp, 0);
            }
        }
    }

    public boolean prohibitChildInstallation(int userId, boolean isInstall) {
        if (!EXP_VERSION || !hasSystemFeature("oppo.childspace.support", 0) || Global.getInt(this.mContext.getContentResolver(), "children_mode_on", 0) != 1) {
            return false;
        }
        UserHandle user = new UserHandle(userId);
        long identity = Binder.clearCallingIdentity();
        if (isInstall) {
            try {
                Slog.w(TAG, "prevent installation in children mode");
                this.mContext.sendBroadcastAsUser(new Intent("com.coloros.childrenspace.action.FORBID_INSTALL_PACKAGES"), user, "oppo.permission.OPPO_COMPONENT_SAFE");
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(identity);
            }
        } else {
            Slog.w(TAG, "prevent uninstallation in children mode");
            this.mContext.sendBroadcastAsUser(new Intent("com.coloros.childrenspace.action.FORBID_DELETE_PACKAGES"), user, "oppo.permission.OPPO_COMPONENT_SAFE");
        }
        Binder.restoreCallingIdentity(identity);
        return true;
    }

    private boolean isAfterRecoveryClear() {
        return SystemProperties.getBoolean("persist.recovery.clear", false);
    }

    private void resetRecoveryClearState() {
        SystemProperties.set("persist.recovery.clear", "false");
        File property_file = new File("/data/property/persist.recovery.clear");
        if (property_file.exists()) {
            property_file.delete();
            Slog.w(TAG, "delete persist.recovery.clear file");
        }
    }

    private String getMiniProgramSignature(String miniProgramPkgName) {
        return OppoListManager.getInstance().getMiniProgramSignature(miniProgramPkgName);
    }

    private Signature[] asArray(Signature... s) {
        return s;
    }

    private PackageInfo getMiniProgramPackageInfo(String miniProgramPkgName, String miniProgramSignature) {
        PackageInfo pi = new PackageInfo();
        pi.packageName = miniProgramPkgName;
        pi.applicationInfo = new ApplicationInfo();
        pi.applicationInfo.packageName = miniProgramPkgName;
        Signature[] signatureArr = new Signature[1];
        signatureArr[0] = new Signature(miniProgramSignature);
        pi.signatures = asArray(signatureArr);
        return pi;
    }
}
