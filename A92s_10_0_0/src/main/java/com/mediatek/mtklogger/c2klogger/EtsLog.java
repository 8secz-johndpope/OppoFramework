package com.mediatek.mtklogger.c2klogger;

import android.os.SystemProperties;
import android.util.Log;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.List;

public class EtsLog extends EtsDevice {
    private static final byte[] HEADER_LOG_FILE = {83, 67, 67, 83, 83, 84, 64, 69, 2, 0};
    private EtsLogCallback mCallback = null;
    private String mDirLog = null;
    private List<EtsMsg> mEtsMsgsCfg = new ArrayList();
    private List<EtsMsg> mEtsMsgsStop = new ArrayList();
    FileOutputStream mFileLog = null;
    private boolean mIsWriteConfigDone = false;
    private int mLogMaxSize = 0;
    private int mLogSize = 0;
    private String mPathDev = null;

    public interface EtsLogCallback {
        void onProcess(LogStatus logStatus, String str);
    }

    public enum LogStatus {
        Logging,
        Process,
        Error
    }

    private void genStopMsgs() {
        for (String msgStr : new String[]{"00:00:00.0[ Raw Tx: Len=5, 0x65 0x00 0x00 0x00 0x00", "00:00:00.1[ Raw Tx: Len=6, 0x98 0x08 0x00 0x00 0x00 0x00", "00:00:00.2[ Raw Tx: Len=6, 0x99 0x08 0x00 0x00 0x00 0x00", "00:00:00.3[ Raw Tx: Len=6, 0x80 0x0c 0x00 0x00 0x00 0x00", "00:00:00.5[ Raw Tx: Len=6, 0x81 0x0c 0x00 0x00 0x00 0x00", "00:00:00.6[ Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x00 0x00 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", "00:00:00.7[ Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x13 0x01 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", "00:00:00.8[ Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x26 0x02 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", "00:00:00.9[ Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x39 0x03 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", "00:00:01.0[ Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x4c 0x04 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", "00:00:01.1[ Raw Tx: Len=10, 0x64 0x00 0x00 0x00 0x5f 0x05 0x02 0x00 0x00 0x00"}) {
            this.mEtsMsgsStop.add(EtsMsg.parse(msgStr));
        }
    }

    public EtsLog(int sizeMax, EtsLogCallback callback) {
        if (sizeMax > 0) {
            this.mPerLogSize = sizeMax;
        }
        this.mLogMaxSize = this.mPerLogSize;
        if (callback != null) {
            this.mCallback = callback;
        } else {
            this.mCallback = new EtsLogCallback() {
                /* class com.mediatek.mtklogger.c2klogger.EtsLog.AnonymousClass1 */

                @Override // com.mediatek.mtklogger.c2klogger.EtsLog.EtsLogCallback
                public void onProcess(LogStatus status, String info) {
                    if (status == LogStatus.Error) {
                        Log.e("via_ets", info);
                    } else {
                        Log.i("via_ets", info);
                    }
                }
            };
        }
        genStopMsgs();
    }

    public void start(String pathDev, BufferedReader bufBcfg, String dirLog) {
        Log.i("via_ets", "ets log to be started");
        if (pathDev == null || bufBcfg == null || dirLog == null) {
            Log.e("via_ets", "parameter error!");
        }
        Log.v("via_ets", pathDev);
        Log.v("via_ets", dirLog);
        this.mDirLog = dirLog;
        this.mPathDev = pathDev;
        if (isOpened().booleanValue()) {
            Log.e("via_ets", "Log thread has been started");
        }
        Log.i("via_ets", "Parsing the config file");
        this.mCallback.onProcess(LogStatus.Logging, "parsing the config file");
        if (!parseCfgFile(bufBcfg).booleanValue()) {
            Log.e("via_ets", "paser bcfg file failed");
        }
        Log.i("via_ets", "ets Log started");
        this.mCallback.onProcess(LogStatus.Logging, "log process started");
    }

    public void stop() {
        Log.i("via_ets", "Ets Log to be stopped");
        this.mStopLogrecord = true;
        try {
            Thread.sleep(100);
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
        this.mCallback.onProcess(LogStatus.Logging, "closing ets device");
        stopReadThread(true);
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e12) {
            e12.printStackTrace();
        }
        FileOutputStream fileOutputStream = this.mFileLog;
        if (fileOutputStream != null) {
            try {
                fileOutputStream.close();
                this.mFileLog = null;
                this.mLogSize = 0;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        this.mCallback.onProcess(LogStatus.Logging, "log process stoped");
    }

    /* access modifiers changed from: protected */
    @Override // com.mediatek.mtklogger.c2klogger.EtsDevice
    public void onEtsMsgReceived(EtsMsg msg) {
        if (!this.mStopLogrecord) {
            if (this.mFileLog != null || this.mLogSize <= 0) {
                int i = this.mLogSize;
                if (i == 0 || i >= this.mLogMaxSize) {
                    String pathLogFile = this.mDirLog + new SimpleDateFormat("yyyy.MM.dd_HH.mm.ss").format(new Date()) + ".dat";
                    if (!createLogfile(pathLogFile).booleanValue()) {
                        destroy();
                        this.mCallback.onProcess(LogStatus.Error, "created log file \"" + pathLogFile + "\" failed.");
                        return;
                    }
                }
                try {
                    byte[] buf = msg.getLogEntry();
                    this.mFileLog.write(buf);
                    this.mLogSize += buf.length;
                    this.mCallback.onProcess(LogStatus.Process, "Recorded " + this.mLogSize + " bytes");
                } catch (FileNotFoundException e) {
                    this.mCallback.onProcess(LogStatus.Error, "log file is not created");
                    e.printStackTrace();
                } catch (IOException e2) {
                    this.mCallback.onProcess(LogStatus.Error, "write log file failed");
                    e2.printStackTrace();
                }
            } else {
                Log.e("via_ets", "log file has been destoried?");
            }
        }
    }

    /* access modifiers changed from: protected */
    @Override // com.mediatek.mtklogger.c2klogger.EtsDevice
    public void onEtsMsgReceived(byte[] buffer, int size) {
        if (buffer == null || size <= 0) {
            Log.e("via_ets", "buffer is null!");
            return;
        }
        try {
            String pathLogFile = this.mDirLog + new SimpleDateFormat("yyyy.MM.dd_HH.mm.ss").format(new Date()) + ".dat";
            File fDir = new File(FileUtil.getDirOfPath(pathLogFile));
            if ((!fDir.exists() || !fDir.isDirectory()) && !fDir.mkdirs()) {
                Log.e("via_ets", "The log file path : " + pathLogFile + " is error!");
                return;
            }
            Log.i("via_ets", "Write to file " + pathLogFile + ". Buffer size is " + size);
            FileOutputStream fos = new FileOutputStream(pathLogFile);
            fos.write(HEADER_LOG_FILE);
            this.mCallback.onProcess(LogStatus.Logging, "created log file:" + pathLogFile);
            fos.write(buffer, 0, size);
            fos.close();
            C2KLogRecycle.getInstance().addLogPathToRecycleConfig(pathLogFile);
        } catch (FileNotFoundException e) {
            this.mCallback.onProcess(LogStatus.Error, "log file is not created");
            e.printStackTrace();
        } catch (IOException e2) {
            this.mCallback.onProcess(LogStatus.Error, "write log file failed");
            e2.printStackTrace();
        }
    }

    /* access modifiers changed from: protected */
    @Override // com.mediatek.mtklogger.c2klogger.EtsDevice
    public void onEtsMsgReceived(List<EtsMsg> msgs) {
        if (msgs == null || msgs.size() == 0) {
            Log.e("via_ets", "Message output is null!");
            return;
        }
        Log.i("via_ets", "msgs size is " + msgs.size());
        try {
            String pathLogFile = this.mDirLog + new SimpleDateFormat("yyyy.MM.dd_HH.mm.ss").format(new Date()) + ".dat";
            File fDir = new File(FileUtil.getDirOfPath(pathLogFile));
            if ((!fDir.exists() || !fDir.isDirectory()) && !fDir.mkdirs()) {
                Log.e("via_ets", "The log file path : " + pathLogFile + " is error!");
                return;
            }
            FileOutputStream fos = new FileOutputStream(pathLogFile);
            fos.write(HEADER_LOG_FILE);
            this.mCallback.onProcess(LogStatus.Logging, "created log file:" + pathLogFile);
            for (EtsMsg msg : msgs) {
                fos.write(msg.getLogEntry());
            }
            fos.close();
        } catch (FileNotFoundException e) {
            this.mCallback.onProcess(LogStatus.Error, "log file is not created");
            e.printStackTrace();
        } catch (IOException e2) {
            this.mCallback.onProcess(LogStatus.Error, "write log file failed");
            e2.printStackTrace();
        }
    }

    private Boolean createLogfile(String pathLog) {
        File fDir = new File(FileUtil.getDirOfPath(pathLog));
        if ((!fDir.exists() || !fDir.isDirectory()) && !fDir.mkdirs()) {
            return false;
        }
        try {
            if (this.mFileLog != null) {
                this.mFileLog.close();
            }
            this.mFileLog = new FileOutputStream(pathLog);
            this.mFileLog.write(HEADER_LOG_FILE);
            this.mLogSize = 10;
            EtsLogCallback etsLogCallback = this.mCallback;
            LogStatus logStatus = LogStatus.Logging;
            etsLogCallback.onProcess(logStatus, "created log file:" + pathLog);
            return true;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            this.mFileLog = null;
            return false;
        } catch (IOException e2) {
            e2.printStackTrace();
            this.mFileLog = null;
            return false;
        }
    }

    private Boolean parseCfgFile(BufferedReader bufBcfg) {
        this.mEtsMsgsCfg.clear();
        while (true) {
            try {
                String line = bufBcfg.readLine();
                if (line == null) {
                    return true;
                }
                EtsMsg msg = EtsMsg.parse(line);
                if (msg != null) {
                    this.mEtsMsgsCfg.add(msg);
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return false;
            } catch (IOException e2) {
                e2.printStackTrace();
                return false;
            }
        }
    }

    public void writeEtsCfgs(boolean open) {
        if (!SystemProperties.get("net.cdma.mdmstat", "").equalsIgnoreCase("ready")) {
            Log.w("via_ets", "Modem is not ready, do not write filter to modme!");
            return;
        }
        try {
            this.mIsWriteConfigDone = false;
            Log.i("via_ets", open ? "open ets configs" : "close ets configs.");
            this.mCallback.onProcess(LogStatus.Logging, "start -> writing config/script to ets device");
            List<EtsMsg> msgs = open ? this.mEtsMsgsCfg : this.mEtsMsgsStop;
            if (isOpened().booleanValue()) {
                long lastTime = -1;
                for (EtsMsg msg : msgs) {
                    if (lastTime != -1) {
                        try {
                            long sleepTime = msg.mTime - lastTime;
                            if (sleepTime < 0 || sleepTime > 60000) {
                            }
                            Thread.sleep(msg.mTime - lastTime);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        } catch (IllegalArgumentException iae) {
                            iae.printStackTrace();
                        }
                    }
                    write(msg);
                    if (msg != null) {
                        lastTime = msg.mTime;
                    } else {
                        return;
                    }
                }
            }
            this.mCallback.onProcess(LogStatus.Logging, "end -> writing config/script to ets device");
            this.mIsWriteConfigDone = true;
        } catch (NullPointerException e2) {
            Log.w("via_ets", "Maybe the service is stopped during write configfile.");
            this.mIsWriteConfigDone = true;
        } catch (ConcurrentModificationException e3) {
            Log.w("via_ets", "Maybe the service is stopped during write configfile.");
            this.mIsWriteConfigDone = true;
        }
    }

    public boolean isWriteConfigDone() {
        return this.mIsWriteConfigDone;
    }

    public void stopLogRecord(boolean stop) {
        FileOutputStream fileOutputStream;
        this.mStopLogrecord = stop;
        if (this.mStopLogrecord && (fileOutputStream = this.mFileLog) != null) {
            try {
                fileOutputStream.close();
                this.mFileLog = null;
                this.mLogSize = 0;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void stopReadThread(boolean stop) {
        if (stop && this.mWorking) {
            Log.i("via_ets", "Closing the ets device");
            destroy();
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        if (!stop && !this.mWorking) {
            Log.i("via_ets", "Opening the ets device");
            if (!create(this.mPathDev).booleanValue()) {
                Log.e("via_ets", "open the ets device failed");
            }
        }
    }
}
